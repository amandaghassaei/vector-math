{"version":3,"file":"vector-math.min.js","sources":["../src/constants.ts","../src/Vector2.ts","../src/Vector3.ts","../src/Matrix3.ts","../src/Matrix4.ts","../src/Quaternion.ts","../src/Number.ts"],"sourcesContent":["export const NUMERICAL_TOLERANCE = 1e-15;","import type { Matrix3Readonly } from './Matrix3';\nimport type { Vector2 as THREE_Vector2 } from 'three';\n\nexport type Vector2Readonly = {\n\treadonly x: number;\n\treadonly y: number;\n\tdot: (vec: Vector2Readonly | THREE_Vector2) => number;\n\tcross: (vec: Vector2Readonly | THREE_Vector2) => number;\n\tangle: () => number;\n\tlengthSq: () => number;\n\tlength: () => number;\n\tequals: (vec: Vector2Readonly) => boolean;\n\tisZero: () => boolean;\n\tclone: () => Vector2;\n\ttoArray: () => [number, number];\n};\n\nexport class Vector2 {\n\tx: number;\n\ty: number;\n\n\t/**\n\t * @param x - Defaults to 0.\n\t * @param y - Defaults to 0.\n\t */\n\tconstructor();\n\tconstructor(x: number, y: number);\n\tconstructor(x?: number, y?: number) {\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t}\n\n\t/**\n\t * Set the contents of a Vector2.\n\t * @param x - x component.\n\t * @param y - y component.\n\t * @returns this\n\t */\n\tset(x: number, y: number) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a Vector2 to this Vector2.\n\t * @param vec - Vector2 to add.\n\t * @returns this\n\t */\n\tadd(vec: Vector2Readonly | THREE_Vector2) {\n\t\tthis.x += vec.x;\n\t\tthis.y += vec.y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Subtract a Vector2 from this Vector2.\n\t * @param vec - Vector2 to subtract.\n\t * @returns this\n\t */\n\tsub(vec: Vector2Readonly | THREE_Vector2) {\n\t\tthis.x -= vec.x;\n\t\tthis.y -= vec.y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Multiply this Vector2 by scalar value.\n\t * @param scalar - Scalar to multiply.\n\t * @returns this\n\t */\n\tmultiplyScalar(scalar: number) {\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Divide this Vector2 by scalar value.\n\t * @param scalar - Scalar to divide.\n\t * @returns this\n\t */\n\tdivideScalar(scalar: number) {\n\t\tif (scalar === 0) console.warn('Dividing by zero in Vector2.divideScalar().');\n\t\treturn this.multiplyScalar(1 / scalar);\n\t}\n\n\t/**\n\t * Returns the dot product of this Vector2 with another Vector2.\n\t * @param vec - Vector2 to dot with.\n\t */\n\tdot(vec: Vector2Readonly | THREE_Vector2) {\n\t\treturn this.x * vec.x + this.y * vec.y;\n\t}\n\n\t/**\n\t * Compute the 2D cross product (wedge product) with another Vector2.\n\t * @param vec - Vector2 to cross.\n\t */\n\tcross(vec: Vector2Readonly | THREE_Vector2) {\n\t\treturn this.x * vec.y - this.y * vec.x;\n\t}\n\n\t/**\n\t * Get the angle of this Vector2.\n\t * Computes the angle in radians with respect to the positive x-axis.\n\t * Angle is always in range [0, 2 * Math.PI] (and 2 * Math.PI is slightly less than 2 * PI).\n\t */\n\tangle() {\n\t\treturn Math.atan2(-this.y, -this.x) + Math.PI;\n\t}\n\n\t/**\n\t * Returns the squared length of the Vector2.\n\t */\n\tlengthSq() {\n\t\tconst lengthSq = this.dot(this);\n\t\treturn lengthSq;\n\t}\n\n\t/**\n\t * Returns the length of the Vector2.\n\t */\n\tlength() {\n\t\treturn Math.sqrt(this.lengthSq());\n\t}\n\n\t/**\n\t * Normalize the length of this Vector2.\n\t */\n\tnormalize() {\n\t\tlet length = this.length();\n\t\tif (length === 0) {\n\t\t\tconsole.warn('Attempting to normalize zero length Vector2.');\n\t\t\tlength = 1;\n\t\t}\n\t\tthis.divideScalar(length);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply Matrix3 transformation to this Vector2.\n\t * @param matrix - Matrix3 to apply.\n\t */\n\tapplyMatrix3(matrix: Matrix3Readonly) {\n\t\tif (matrix.isIdentity) return this;\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = matrix.elements;\n\t\tthis.x = e[0] * x + e[1] * y + e[2];\n\t\tthis.y = e[3] * x + e[4] * y + e[5];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Copy the contents of a Vector2 to this Vector2.\n\t * @param vec - Vector2 to copy.\n\t * @returns this\n\t */\n\tcopy(vec: Vector2Readonly | THREE_Vector2) {\n\t\tthis.x = vec.x;\n\t\tthis.y = vec.y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Test if this Vector2 equals another Vector2.\n\t * @param vec - Vector2 to test equality with.\n\t */\n\tequals(vec: Vector2Readonly | THREE_Vector2) {\n\t\treturn this.x === vec.x && this.y === vec.y;\n\t}\n\n\t/**\n\t * Test if this vector is the zero vector.\n\t */\n\tisZero() {\n\t\treturn this.x === 0 && this.y === 0;\n\t}\n\n\t/**\n\t * Clone this Vector2 into a new Vector2.\n\t */\n\tclone() {\n\t\treturn new Vector2(this.x, this.y);\n\t}\n\n\t/**\n\t * Returns an array containing the x and y components of this Vector3.\n\t */\n\ttoArray() {\n\t\treturn [this.x, this.y] as [number, number];\n\t}\n}","import type { Matrix4Readonly } from './Matrix4';\nimport type { QuaternionReadonly } from './Quaternion';\nimport type {\n\tVector3 as THREE_Vector3,\n\tQuaternion as THREE_Quaternion,\n} from 'three';\n\nexport type Vector3Readonly = {\n\treadonly x: number;\n\treadonly y: number;\n\treadonly z: number;\n\tdot: (vec: Vector3Readonly | THREE_Vector3) => number;\n\tlengthSq: () => number;\n\tlength: () => number;\n\tequals: (vec: Vector3Readonly | THREE_Vector3) => boolean;\n\tisZero: () => boolean;\n\tclone: () => Vector3;\n\ttoArray: () => [number, number, number];\n};\n\nexport class Vector3 {\n\tx: number;\n\ty: number;\n\tz: number;\n\n\t/**\n\t * @param x - Defaults to 0.\n\t * @param y - Defaults to 0.\n\t * @param z - Defaults to 0.\n\t */\n\tconstructor();\n\tconstructor(x: number, y: number, z: number);\n\tconstructor(x?: number, y?: number, z?: number) {\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t}\n\n\t/**\n\t * Set the contents of a Vector3.\n\t * @param x - x component.\n\t * @param y - y component.\n\t * @param z - z component.\n\t * @returns this\n\t */\n\tset(x: number, y: number, z: number) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a Vector3 to this Vector3.\n\t * @param vec - Vector3 to add.\n\t * @returns this\n\t */\n\tadd(vec: Vector3Readonly | THREE_Vector3) {\n\t\tthis.x += vec.x;\n\t\tthis.y += vec.y;\n\t\tthis.z += vec.z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Subtract a Vector3 from this Vector3.\n\t * @param vec - Vector3 to subtract.\n\t * @returns this\n\t */\n\tsub(vec: Vector3Readonly | THREE_Vector3) {\n\t\tthis.x -= vec.x;\n\t\tthis.y -= vec.y;\n\t\tthis.z -= vec.z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Multiply this Vector3 by scalar value.\n\t * @param scalar - Scalar to multiply.\n\t * @returns this\n\t */\n\tmultiplyScalar(scalar: number) {\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Divide this Vector3 by scalar value.\n\t * @param scalar - Scalar to divide.\n\t * @returns this\n\t */\n\tdivideScalar(scalar: number) {\n\t\tif (scalar === 0) console.warn('Dividing by zero in Vector3.divideScalar().');\n\t\treturn this.multiplyScalar(1 / scalar);\n\t}\n\n\t/**\n\t * Returns the dot product of this Vector3 with another Vector3.\n\t * @param vec - Vector3 to dot with.\n\t */\n\tdot(vec: Vector3Readonly | THREE_Vector3) {\n\t\treturn this.x * vec.x + this.y * vec.y + this.z * vec.z;\n\t}\n\n\t/**\n\t * Cross this Vector3 with another Vector3.\n\t * @param vec - Vector3 to cross with.\n\t */\n\tcross(vec: Vector3Readonly | THREE_Vector3) {\n\t\tconst ax = this.x, ay = this.y, az = this.z;\n\t\tconst bx = vec.x, by = vec.y, bz = vec.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the squared length of the Vector3.\n\t */\n\tlengthSq() {\n\t\tconst lengthSq = this.dot(this);\n\t\treturn lengthSq;\n\t}\n\n\t/**\n\t * Returns the length of the Vector3.\n\t */\n\tlength() {\n\t\treturn Math.sqrt(this.lengthSq());\n\t}\n\n\t/**\n\t * Normalize the length of this Vector3.\n\t */\n\tnormalize() {\n\t\tlet length = this.length();\n\t\tif (length === 0) {\n\t\t\tconsole.warn('Attempting to normalize zero length Vector3.');\n\t\t\tlength = 1;\n\t\t}\n\t\tthis.divideScalar(length);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply Matrix4 transformation to this Vector3.\n\t * @param matrix - Matrix4 to apply.\n\t * @returns this\n\t */\n\tapplyMatrix4(matrix: Matrix4Readonly) {\n\t\tif (matrix.isIdentity) return this;\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = matrix.elements;\n\t\tthis.x = e[0] * x + e[1] * y + e[2] * z + e[3];\n\t\tthis.y = e[4] * x + e[5] * y + e[6] * z + e[7];\n\t\tthis.z = e[8] * x + e[9] * y + e[10] * z + e[11];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply Matrix4 rotation component (ignore translation) to this Vector3.\n\t * @param matrix - Matrix4 to apply.\n\t * @returns this\n\t */\n\tapplyMatrix4RotationComponent(matrix: Matrix4Readonly) {\n\t\tif (matrix.isIdentity) return this;\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = matrix.elements;\n\t\tthis.x = e[0] * x + e[1] * y + e[2] * z;\n\t\tthis.y = e[4] * x + e[5] * y + e[6] * z;\n\t\tthis.z = e[8] * x + e[9] * y + e[10] * z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply Quaternion transformation to this Vector3.\n\t * @param quaternion - Quaternion to apply.\n\t * @returns this\n\t */\n\tapplyQuaternion(quaternion: QuaternionReadonly | THREE_Quaternion) {\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst qx = quaternion.x, qy = quaternion.y, qz = quaternion.z, qw = quaternion.w;\n\t\t// Calculate quat * vector.\n\t\tconst ix = qw * x + qy * z - qz * y;\n\t\tconst iy = qw * y + qz * x - qx * z;\n\t\tconst iz = qw * z + qx * y - qy * x;\n\t\tconst iw = - qx * x - qy * y - qz * z;\n\t\t// Calculate result * inverse quat.\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Copy the contents of a Vector3 to this Vector3.\n\t * @param vec - Vector3 to copy.\n\t * @returns this\n\t */\n\tcopy(vec: Vector3Readonly | THREE_Vector3) {\n\t\tthis.x = vec.x;\n\t\tthis.y = vec.y;\n\t\tthis.z = vec.z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Test if this Vector3 equals another Vector3.\n\t * @param vec - Vector3 to test equality with.\n\t */\n\tequals(vec: Vector3Readonly | THREE_Vector3) {\n\t\treturn this.x === vec.x && this.y === vec.y && this.z === vec.z;\n\t}\n\n\t/**\n\t * Test if this vector is the zero vector.\n\t */\n\tisZero() {\n\t\treturn this.x === 0 && this.y === 0 && this.z === 0;\n\t}\n\n\t/**\n\t * Clone this Vector3 into a new Vector3.\n\t */\n\tclone() {\n\t\treturn new Vector3(this.x, this.y, this.z);\n\t}\n\n\t/**\n\t * Returns an array containing the x, y, and z components of this Vector3.\n\t */\n\ttoArray() {\n\t\treturn [this.x, this.y, this.z] as [number, number, number];\n\t}\n}","import { NUMERICAL_TOLERANCE } from './constants';\nimport type { Vector2Readonly } from './Vector2';\nimport type { Vector2 as THREE_Vector2 } from 'three';\n\nexport type Matrix3Readonly = {\n\treadonly elements: readonly number[];\n\treadonly isIdentity: boolean;\n\tequals: (matrix: Matrix3Readonly) => boolean;\n\tclone: () => Matrix3;\n}\n\n/**\n * These Matrix3s represent a rigid transform in homogeneous coords,\n * therefore, we assume that the bottom row is [0, 0, 1] and only store 6 elements.\n */\nexport class Matrix3 {\n\tprivate readonly _elements: number[];\n\tprivate _isIdentity: boolean;\n\n\t/**\n\t * If no elements passed in, defaults to identity matrix.\n\t */\n\tconstructor();\n\tconstructor(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tisIdentity?: boolean,\n\t);\n\tconstructor(\n\t\tn11?: number,\n\t\tn12?: number,\n\t\tn13?: number,\n\t\tn21?: number,\n\t\tn22?: number,\n\t\tn23?: number,\n\t\tisIdentity?: boolean,\n\t) {\n\t\tif (n11 !== undefined) {\n\t\t\tthis._elements = [\n\t\t\t\tn11, n12!, n13!,\n\t\t\t\tn21!, n22!, n23!,\n\t\t\t];\n\t\t\tthis._isIdentity = isIdentity === undefined ? Matrix3._checkElementForIdentity(this._elements) : isIdentity;\n\t\t} else {\n\t\t\tthis._elements = [\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t];\n\t\t\tthis._isIdentity = true;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset elements(elements: readonly number[]) {\n\t\tthrow new Error('No elements setter on Matrix3.');\n\t}\n\n\t/**\n\t * Returns elements of Matrix3.\n\t */\n\tget elements() {\n\t\treturn this._elements as readonly number[];\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset isIdentity(isIdentity: boolean) {\n\t\tthrow new Error('No isIdentity setter on Matrix3.');\n\t}\n\n\t/**\n\t * Returns whether Matrix3 is the identity matrix.\n\t */\n\tget isIdentity() {\n\t\treturn this._isIdentity;\n\t}\n\n\t/**\n\t * Set values element-wise.\n\t */\n\tprivate _set(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t) {\n\t\tconst { _elements } = this;\n\t\t_elements[0] = n11; _elements[1] = n12; _elements[2] = n13;\n\t\t_elements[3] = n21; _elements[4] = n22; _elements[5] = n23;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set this Matrix4 to the identity matrix.\n\t * @returns this\n\t */\n\tsetIdentity() {\n\t\tthis._set(\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t);\n\t\tthis._isIdentity = true;\n\t\treturn this;\n\t}\n\n\tprivate static _checkElementForIdentity(elements: number[]) {\n\t\tconst [\n\t\t\tn11, n12, n13,\n\t\t\tn21, n22, n23,\n\t\t] = elements;\n\t\treturn Math.abs(n11 - 1) <= NUMERICAL_TOLERANCE && Math.abs(n22 - 1) <= NUMERICAL_TOLERANCE &&\n\t\t\tMath.abs(n12) <= NUMERICAL_TOLERANCE && Math.abs(n13) <= NUMERICAL_TOLERANCE &&\n\t\t\tMath.abs(n21) <= NUMERICAL_TOLERANCE && Math.abs(n23) <= NUMERICAL_TOLERANCE;\n\t}\n\n\t// _setTranslation(translation: Vector3Readonly) {\n\t// \tthis._set(\n\t// \t\t1, 0, translation.x,\n\t// \t\t0, 1, translation.y,\n\t// \t);\n\t// \tthis._isIdentity = translation.x === 0 && translation.y === 0;\n\t// \treturn this;\n\t// }\n\n\t/**\n\t * Set elements of Matrix4 according to rotation and translation.\n\t * @param angle - Angle of rotation in radians.\n\t * @param translation - Translation offset.\n\t * @returns this\n\t */\n\tsetFromRotationTranslation(angle: number, translation: Vector2Readonly | THREE_Vector2) {\n\t\tif (angle === 0 && translation.x === 0 && translation.y === 0) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\t// To do this we need to calculate R(angle) * T(position).\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t// First calc R.\n\t\tconst r11 = Math.cos(angle),\tr12 = -Math.sin(angle);\n\t\tconst r21 = -r12,\t\t\t\tr22 = r11;\n\t\t// Pre-multiply T by R.\n\t\tconst tx = translation.x * r11 + translation.y * r12;\n\t\tconst ty = translation.x * r21 + translation.y * r22;\n\t\tthis._set(\n\t\t\tr11, r12, tx,\n\t\t\tr21, r22, ty,\n\t\t);\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\t// /**\n\t//  * Invert the current transform.\n\t//  * https://math.stackexchange.com/questions/1234948/inverse-of-a-rigid-transformation\n\t//  */\n\t// invertTransform() {\n\t// \tif (this._isIdentity) return this;\n\t// \tconst { _elements } = this;\n\t// \t// The inverted 2x2 rotation matrix is equal to its transpose: rTrans.\n\t// \tconst rTrans11 = _elements[0], rTrans12 = _elements[3];\n\t// \tconst rTrans21 = _elements[1], rTrans22 = _elements[4];\n\t// \t// The inverted translation is -rTrans * t.\n\t// \tconst t1 = _elements[2], t2 = _elements[5];\n\t// \tconst t1Inv = -rTrans11 * t1 - rTrans12 * t2;\n\t// \tconst t2Inv = -rTrans21 * t1 - rTrans22 * t2;\n\t// \tthis._set(\n\t// \t\trTrans11, rTrans12, t1Inv,\n\t// \t\trTrans21, rTrans22, t2Inv,\n\t// \t);\n\t// \treturn this;\n\t// }\n\n\t/**\n\t * Test if this Matrix3 equals another Matrix3.\n\t * @param matrix - Matrix3 to test equality with.\n\t * @returns\n\t */\n\tequals(matrix: Matrix3Readonly) {\n\t\tconst elementsA = this.elements;\n\t\tconst elementsB = matrix.elements;\n\t\tfor (let i = 0, numElements = elementsA.length; i < numElements; i++) {\n\t\t\tif (elementsA[i] !== elementsB[i]) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Copy values from a Matrix3 into this Matrix3.\n\t * @param matrix - Matrix3 to copy.\n\t * @returns this\n\t */\n\tcopy(matrix: Matrix3Readonly) {\n\t\tconst { elements } = matrix;\n\t\tthis._set(\n\t\t\telements[0], elements[1], elements[2],\n\t\t\telements[3], elements[4], elements[5],\n\t\t);\n\t\tthis._isIdentity = matrix.isIdentity;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a deep copy of this Matrix3.\n\t */\n\tclone() {\n\t\tconst { _elements } = this;\n\t\tconst clone = new Matrix3(\n\t\t\t_elements[0], _elements[1], _elements[2],\n\t\t\t_elements[3], _elements[4], _elements[5],\n\t\t\tthis._isIdentity,\n\t\t);\n\t\treturn clone;\n\t}\n}","import { NUMERICAL_TOLERANCE } from './constants';\nimport type { Vector3Readonly } from './Vector3';\nimport type { Vector3 as THREE_Vector3 } from 'three';\n\nexport type Matrix4Readonly = {\n\treadonly elements: readonly number[];\n\treadonly isIdentity: boolean;\n\tequals: (matrix: Matrix4Readonly) => boolean;\n\tclone: () => Matrix4;\n}\n\n/**\n * These Matrix4s represent a rigid transform in homogeneous coords,\n * therefore, we assume that the bottom row is [0, 0, 0, 1] and only store 12 elements.\n */\nexport class Matrix4 {\n\tprivate readonly _elements: number[];\n\tprivate _isIdentity: boolean;\n\n\t/**\n\t * If no elements passed in, defaults to identity matrix.\n\t */\n\tconstructor();\n\tconstructor(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn14: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tn24: number,\n\t\tn31: number,\n\t\tn32: number,\n\t\tn33: number,\n\t\tn34: number,\n\t\tisIdentity?: boolean,\n\t);\n\tconstructor(\n\t\tn11?: number,\n\t\tn12?: number,\n\t\tn13?: number,\n\t\tn14?: number,\n\t\tn21?: number,\n\t\tn22?: number,\n\t\tn23?: number,\n\t\tn24?: number,\n\t\tn31?: number,\n\t\tn32?: number,\n\t\tn33?: number,\n\t\tn34?: number,\n\t\tisIdentity?: boolean,\n\t) {\n\t\tif (n11 !== undefined) {\n\t\t\tthis._elements = [\n\t\t\t\tn11, n12!, n13!, n14!,\n\t\t\t\tn21!, n22!, n23!, n24!,\n\t\t\t\tn31!, n32!, n33!, n34!,\n\t\t\t];\n\t\t\tthis._isIdentity = isIdentity === undefined ? Matrix4._checkElementsForIdentity(this._elements) : isIdentity;\n\t\t} else {\n\t\t\tthis._elements = [\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t];\n\t\t\tthis._isIdentity = true;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset elements(elements: readonly number[]) {\n\t\tthrow new Error('No elements setter on Matrix4.');\n\t}\n\n\t/**\n\t * Returns elements of Matrix4.\n\t */\n\tget elements() {\n\t\treturn this._elements as readonly number[];\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset isIdentity(isIdentity: boolean) {\n\t\tthrow new Error('No isIdentity setter on Matrix4.');\n\t}\n\n\t/**\n\t * Returns whether Matrix4 is the identity matrix.\n\t */\n\tget isIdentity() {\n\t\treturn this._isIdentity;\n\t}\n\n\tprivate static _checkElementsForIdentity(elements: number[]) {\n\t\tconst [\n\t\t\tn11, n12, n13, n14,\n\t\t\tn21, n22, n23, n24,\n\t\t\tn31, n32, n33, n34\n\t\t]= elements;\n\t\treturn Math.abs(n11 - 1) <= NUMERICAL_TOLERANCE && Math.abs(n22 - 1) <= NUMERICAL_TOLERANCE && Math.abs(n33 - 1) <= NUMERICAL_TOLERANCE &&\n\t\t\tMath.abs(n12) <= NUMERICAL_TOLERANCE && Math.abs(n13) <= NUMERICAL_TOLERANCE && Math.abs(n14) <= NUMERICAL_TOLERANCE &&\n\t\t\tMath.abs(n21) <= NUMERICAL_TOLERANCE && Math.abs(n23) <= NUMERICAL_TOLERANCE && Math.abs(n24) <= NUMERICAL_TOLERANCE &&\n\t\t\tMath.abs(n31) <= NUMERICAL_TOLERANCE && Math.abs(n32) <= NUMERICAL_TOLERANCE && Math.abs(n34) <= NUMERICAL_TOLERANCE;\n\t}\n\n\t/**\n\t * Set values element-wise.\n\t */\n\tprivate _set(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn14: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tn24: number,\n\t\tn31: number,\n\t\tn32: number,\n\t\tn33: number,\n\t\tn34: number,\n\t) {\n\t\tconst { _elements } = this;\n\t\t_elements[0] = n11; _elements[1] = n12; _elements[2] = n13; _elements[3] = n14;\n\t\t_elements[4] = n21; _elements[5] = n22; _elements[6] = n23; _elements[7] = n24;\n\t\t_elements[8] = n31; _elements[9] = n32; _elements[10] = n33; _elements[11] = n34;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set this Matrix4 to the identity matrix.\n\t * @returns this\n\t */\n\tsetIdentity() {\n\t\tthis._set(\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t);\n\t\tthis._isIdentity = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * In place matrix multiplication of this Matrix4 (A) with another Matrix4 (B).\n\t * Sets value of this Matrix4 to B*A.\n\t * @param matrix - Matrix4 to multiply with.\n\t * @returns this\n\t */\n\tpremultiplyMatrix4(matrix: Matrix4Readonly) {\n\t\treturn Matrix4._multiplyMatrices(this, matrix, this);\n\t}\n\n\t/**\n\t * In place matrix multiplication of this Matrix4 (A) with another Matrix4 (B).\n\t * Sets value of this Matrix4 to A*B.\n\t * @param matrix - Matrix4 to multiply with.\n\t */\n\tmultiplyMatrix4(matrix: Matrix4Readonly) {\n\t\treturn Matrix4._multiplyMatrices(this, this, matrix);\n\t}\n\n\t/**\n\t * Matrix multiplication of two matrices.\n\t */\n\tprivate static _multiplyMatrices(self: Matrix4, matrixA: Matrix4Readonly, matrixB: Matrix4Readonly) {\n\t\t// Check if we need to multiply through.\n\t\tif (matrixA.isIdentity) return self.copy(matrixB);\n\t\tif (matrixB.isIdentity) return self.copy(matrixA);\n\n\t\tconst { _elements } = self;\n\t\tconst ae = matrixA.elements;\n\t\tconst be = matrixB.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 1 ], a13 = ae[ 2 ], a14 = ae[ 3 ];\n\t\tconst a21 = ae[ 4 ], a22 = ae[ 5 ], a23 = ae[ 6 ], a24 = ae[ 7 ];\n\t\tconst a31 = ae[ 8 ], a32 = ae[ 9 ], a33 = ae[ 10 ], a34 = ae[ 11 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 1 ], b13 = be[ 2 ], b14 = be[ 3 ];\n\t\tconst b21 = be[ 4 ], b22 = be[ 5 ], b23 = be[ 6 ], b24 = be[ 7 ];\n\t\tconst b31 = be[ 8 ], b32 = be[ 9 ], b33 = be[ 10 ], b34 = be[ 11 ];\n\n\t\t_elements[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t_elements[1] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t_elements[2] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t_elements[3] = a11 * b14 + a12 * b24 + a13 * b34 + a14;\n\n\t\t_elements[4] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t_elements[5] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t_elements[6] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t_elements[7] = a21 * b14 + a22 * b24 + a23 * b34 + a24;\n\n\t\t_elements[8] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t_elements[9] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t_elements[10] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t_elements[11] = a31 * b14 + a32 * b24 + a33 * b34 + a34;\n\n\t\tself._isIdentity = Matrix4._checkElementsForIdentity(_elements);\n\t\treturn self;\n\t}\n\n\t// private _setTranslation(translation: Vector3Readonly) {\n\t// \tthis._set(\n\t// \t\t1, 0, 0, translation.x,\n\t// \t\t0, 1, 0, translation.y,\n\t// \t\t0, 0, 1, translation.z,\n\t// \t);\n\t//  this._isIdentity = translation.x === 0 && translation.y === 0 && translation.z === 0;\n\t// \treturn this;\n\t// }\n\n\t/**\n\t * Set elements of Matrix4 according to rotation about axis.\n\t * @param axis - Unit vector around which to rotate, must be normalized.\n\t * @param angle - Angle of rotation in radians.\n\t * @param offset - Offset vector.\n\t * @returns this\n\t */\n\tsetRotationAxisAngleAtOffset(\n\t\taxis: Vector3Readonly | THREE_Vector3,\n\t\tangle: number,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\tif (angle === 0) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\t// To do this we need to calculate T * R * (-T).\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t// First calc R.\n\t\tconst c = Math.cos(angle);\n\t\tconst s = Math.sin(angle);\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst t_x = t * x, t_y = t * y;\n\t\tconst r11 = t_x * x + c,\t\tr12 = t_x * y - s * z,\tr13 = t_x * z + s * y;\n\t\tconst r21 = t_x * y + s * z,\tr22 = t_y * y + c,\t\tr23 = t_y * z - s * x;\n\t\tconst r31 = t_x * z - s * y,\tr32 = t_y * z + s * x,\tr33 = t * z * z + c;\n\t\tif (offset) {\n\t\t\tthis._setRotationMatrixAtOffset(\n\t\t\t\tr11, r12, r13,\n\t\t\t\tr21, r22, r23,\n\t\t\t\tr31, r32, r33,\n\t\t\t\toffset,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._set(\n\t\t\t\tr11, r12, r13, 0,\n\t\t\t\tr21, r22, r23, 0,\n\t\t\t\tr31, r32, r33, 0,\n\t\t\t);\n\t\t}\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to reflection.\n\t * @param normal - Unit vector about which to reflect, must be normalized.\n\t * @param offset - Offset vector of reflection.\n\t * @returns this\n\t */\n\tsetReflectionNormalAtOffset(\n\t\tnormal: Vector3Readonly | THREE_Vector3,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\t// To do this we need to calculate T * R * (-T).\n\t\t// Based on https://math.stackexchange.com/questions/693414/reflection-across-the-plane\n\t\t// First calc R.\n\t\tconst nx = normal.x;\n\t\tconst ny = normal.y;\n\t\tconst nz = normal.z;\n\t\tconst r11 = 1 - 2 * nx * nx,\tr12 = -2 * nx * ny,\t\tr13 = -2 * nx * nz;\n\t\tconst r21 = r12,\t\t\t\tr22 = 1 - 2 * ny * ny,\tr23 = -2 * ny * nz;\n\t\tconst r31 = r13,\t\t\t\tr32 = r23,\t\t\t\tr33 = 1 - 2 * nz * nz;\n\t\tif (offset) {\n\t\t\tthis._setRotationMatrixAtOffset(\n\t\t\t\tr11, r12, r13,\n\t\t\t\tr21, r22, r23,\n\t\t\t\tr31, r32, r33,\n\t\t\t\toffset,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._set(\n\t\t\t\tr11, r12, r13, 0,\n\t\t\t\tr21, r22, r23, 0,\n\t\t\t\tr31, r32, r33, 0,\n\t\t\t);\n\t\t}\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\tprivate _setRotationMatrixAtOffset(\n\t\tr11: number, r12: number, r13: number,\n\t\tr21: number, r22: number, r23: number,\n\t\tr31: number, r32: number, r33: number,\n\t\toffset: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\t// Apply T * R * (-T).\n\t\t// Pre-multiply R by T and post multiply by -T.\n\t\t// This is a bit confusing to follow, but it reduces the amount of operations in the calc.\n\t\tconst tx = -offset.x * (r11 - 1) - offset.y * r12 - offset.z * r13;\n\t\tconst ty = -offset.x * r21 - offset.y * (r22 - 1) - offset.z * r23;\n\t\tconst tz = -offset.x * r31 - offset.y * r32 - offset.z * (r33 - 1);\n\t\tthis._set(\n\t\t\tr11, r12, r13, tx,\n\t\t\tr21, r22, r23, ty,\n\t\t\tr31, r32, r33, tz,\n\t\t);\n\t}\n\n\t/**\n\t * Invert the current transform.\n\t * https://math.stackexchange.com/questions/1234948/inverse-of-a-rigid-transformation\n\t * @returns this\n\t */\n\tinvertTransform() {\n\t\tif (this._isIdentity) return this;\n\t\tconst { _elements } = this;\n\t\t// The inverted 3x3 rotation matrix is equal to its transpose: rTrans.\n\t\tconst rTrans11 = _elements[0], rTrans12 = _elements[4], rTrans13 = _elements[8];\n\t\tconst rTrans21 = _elements[1], rTrans22 = _elements[5], rTrans23 = _elements[9];\n\t\tconst rTrans31 = _elements[2], rTrans32 = _elements[6], rTrans33 = _elements[10];\n\t\t// The inverted translation is -rTrans * t.\n\t\tconst t1 = _elements[3], t2 = _elements[7], t3 = _elements[11];\n\t\tconst t1Inv = -rTrans11 * t1 - rTrans12 * t2 - rTrans13 * t3;\n\t\tconst t2Inv = -rTrans21 * t1 - rTrans22 * t2 - rTrans23 * t3;\n\t\tconst t3Inv = -rTrans31 * t1 - rTrans32 * t2 - rTrans33 * t3;\n\t\tthis._set(\n\t\t\trTrans11, rTrans12, rTrans13, t1Inv,\n\t\t\trTrans21, rTrans22, rTrans23, t2Inv,\n\t\t\trTrans31, rTrans32, rTrans33, t3Inv,\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Test if this Matrix4 equals another Matrix4.\n\t * @param matrix - Matrix4 to test equality with.\n\t * @returns\n\t */\n\tequals(matrix: Matrix4Readonly) {\n\t\tconst elementsA = this.elements;\n\t\tconst elementsB = matrix.elements;\n\t\tfor (let i = 0, numElements = elementsA.length; i < numElements; i++) {\n\t\t\tif (elementsA[i] !== elementsB[i]) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Copy values from a Matrix4 into this Matrix4.\n\t * @param matrix - Matrix4 to copy.\n\t * @returns this\n\t */\n\tcopy(matrix: Matrix4Readonly) {\n\t\tconst { elements } = matrix;\n\t\tthis._set(\n\t\t\telements[0], elements[1], elements[2], elements[3],\n\t\t\telements[4], elements[5], elements[6], elements[7],\n\t\t\telements[8], elements[9], elements[10], elements[11],\n\t\t);\n\t\tthis._isIdentity = matrix.isIdentity;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a deep copy of this Matrix4.\n\t */\n\tclone() {\n\t\tconst { _elements } = this;\n\t\tconst clone = new Matrix4(\n\t\t\t_elements[0], _elements[1], _elements[2], _elements[3],\n\t\t\t_elements[4], _elements[5], _elements[6], _elements[7],\n\t\t\t_elements[8], _elements[9], _elements[10], _elements[11],\n\t\t\tthis._isIdentity,\n\t\t);\n\t\treturn clone;\n\t}\n}","import type { Vector3Readonly } from './Vector3';\nimport type {\n\tQuaternion as THREE_Quaternion,\n\tVector3 as THREE_Vector3,\n} from 'three';\n\nexport type QuaternionReadonly = {\n\treadonly x: number;\n\treadonly y: number;\n\treadonly z: number;\n\treadonly w: number;\n\treadonly lengthSq: () => number;\n\treadonly length: () => number;\n\treadonly clone: () => Quaternion;\n}\n\nexport class Quaternion {\n\tprivate _x;\n\tprivate _y;\n\tprivate _z;\n\tprivate _w;\n\n\t/**\n\t * @param x - Defaults to 0.\n\t * @param y - Defaults to 0.\n\t * @param z - Defaults to 0.\n\t * @param w - Defaults to 1.\n\t */\n\tconstructor();\n\tconstructor(x: number, y: number, z: number, w: number);\n\tconstructor(x?: number, y?: number, z?: number, w?: number) {\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = w !== undefined ? w : 1;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset x(x: number) {\n\t\tthrow new Error('No x setter on Quaternion.');\n\t}\n\n\tget x() {\n\t\treturn this._x;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset y(y: number) {\n\t\tthrow new Error('No y setter on Quaternion.');\n\t}\n\n\tget y() {\n\t\treturn this._y;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset z(z: number) {\n\t\tthrow new Error('No z setter on Quaternion.');\n\t}\n\n\tget z() {\n\t\treturn this._z;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset w(w: number) {\n\t\tthrow new Error('No w setter on Quaternion.');\n\t}\n\n\tget w() {\n\t\treturn this._w;\n\t}\n\n\t/**\n\t * Set quaternion from two unit vectors.\n\t * @param vFrom - From unit vector (normalized).\n\t * @param vTo - To unit vector (normalized).\n\t * @returns this\n\t */\n\tsetFromUnitVectors(\n\t\tvFrom: Vector3Readonly | THREE_Vector3,\n\t\tvTo: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\tlet r = vFrom.x * vTo.x + vFrom.y * vTo.y + vFrom.z * vTo.z + 1;\n\t\tif ( r <= Number.EPSILON ) { // TODO: better epsilon?\n\t\t\t// vFrom and vTo point in opposite directions.\n\t\t\tr = 0;\n\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\t\t\t} else {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\t\t} else {\n\t\t\t// crossVectors( vFrom, vTo );\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\t\t}\n\t\treturn this.normalize();\n\t}\n\n\t/**\n\t * Returns the squared length of the Quaternion.\n\t */\n\tlengthSq() {\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t}\n\n\t/**\n\t * Returns the length of the Quaternion.\n\t */\n\tlength() {\n\t\treturn Math.sqrt(this.lengthSq());\n\t}\n\n\t/**\n\t * Normalize the length of this Quaternion.\n\t * @returns this\n\t */\n\tnormalize() {\n\t\tlet l = this.length();\n\t\tif (l === 0) {\n\t\t\tconsole.warn('Attempting to normalize zero length Quaternion.');\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\t\t} else {\n\t\t\tl = 1 / l;\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * In place quaternion multiplication of this Quaternion (A) with another Quaternion (B).\n\t * Sets value of this Quaternion to A*B.\n\t * @param quat - Quaternion to multiply with.\n\t * @returns this\n\t */\n\tmultiply(quat: QuaternionReadonly | THREE_Quaternion) {\n\t\treturn Quaternion._multiplyQuaternions(this, this, quat);\n\n\t}\n\n\t/**\n\t * In place quaternion multiplication of this Quaternion (A) with another Quaternion (B).\n\t * Sets value of this Quaternion to B*A.\n\t * @param quat - Quaternion to premultiply with.\n\t * @returns this\n\t */\n\tpremultiply(quat: QuaternionReadonly | THREE_Quaternion) {\n\t\treturn Quaternion._multiplyQuaternions(this, quat, this);\n\t}\n\n\t/**\n\t * Quaternion multiplication.\n\t */\n\tprivate static _multiplyQuaternions(self: Quaternion, quatA: QuaternionReadonly | THREE_Quaternion, quatB: QuaternionReadonly | THREE_Quaternion) {\n\t\t// From http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\tconst qax = quatA.x, qay = quatA.y, qaz = quatA.z, qaw = quatA.w;\n\t\tconst qbx = quatB.x, qby = quatB.y, qbz = quatB.z, qbw = quatB.w;\n\n\t\tself._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tself._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tself._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tself._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\treturn self;\n\t}\n\n\t/**\n\t * Copy the contents of a Quaternion to this Quaternion.\n\t * @param quaternion - Quaternion to copy.\n\t * @returns this\n\t */\n\tcopy(quaternion: QuaternionReadonly | THREE_Quaternion) {\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Clone this Quaternion into a new Quaternion.\n\t */\n\tclone() {\n\t\treturn new Quaternion(this._x, this._y, this._z, this._w);\n\t}\n}","export function clampValue(value: number, min: number, max: number) {\n\treturn Math.max(Math.min(value, max), min);\n}\n\nexport function radiansToDegrees(value: number) {\n\treturn value * 180 / Math.PI;\n}\n\nexport function degreesToRadians(value: number) {\n\treturn value / 180 * Math.PI;\n}\n\nexport function roundValueToIncrement(value: number, coarseStep: number) {\n\tif (coarseStep === 0) return value;\n\tif (coarseStep < 0) throw new Error(`Invalid coarse step: ${coarseStep}.`);\n\tconst rounded = Math.round(value / coarseStep) * coarseStep;\n\t// Use a rounding trick to avoid results like 1.7999999999998 instead of 1.8.\n\tconst decimals = coarseStep.toString().split('.')[1]?.length || 0;\n\treturn parseFloat(rounded.toFixed(decimals));\n}"],"names":["NUMERICAL_TOLERANCE","Vector2","x","y","this","prototype","set","add","vec","sub","multiplyScalar","scalar","divideScalar","console","warn","dot","cross","angle","Math","atan2","PI","lengthSq","length","sqrt","normalize","applyMatrix3","matrix","isIdentity","e","elements","copy","equals","isZero","clone","toArray","Vector3","z","ax","ay","az","bx","by","bz","applyMatrix4","applyMatrix4RotationComponent","applyQuaternion","quaternion","qx","qy","qz","qw","w","ix","iy","iz","iw","Matrix3","n11","n12","n13","n21","n22","n23","undefined","_elements","_isIdentity","_checkElementForIdentity","Object","defineProperty","get","Error","_set","setIdentity","abs","setFromRotationTranslation","translation","r11","cos","r12","sin","r21","r22","tx","ty","elementsA","elementsB","i","numElements","Matrix4","n14","n24","n31","n32","n33","n34","_checkElementsForIdentity","premultiplyMatrix4","_multiplyMatrices","multiplyMatrix4","self","matrixA","matrixB","ae","be","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","setRotationAxisAngleAtOffset","axis","offset","c","s","t","t_x","t_y","r13","r23","r31","r32","r33","_setRotationMatrixAtOffset","setReflectionNormalAtOffset","normal","nx","ny","nz","tz","invertTransform","rTrans11","rTrans12","rTrans13","rTrans21","rTrans22","rTrans23","rTrans31","rTrans32","rTrans33","t1","t2","t3","t1Inv","t2Inv","t3Inv","Quaternion","_x","_y","_z","_w","setFromUnitVectors","vFrom","vTo","r","Number","EPSILON","l","multiply","quat","_multiplyQuaternions","premultiply","quatA","quatB","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","value","min","max","coarseStep","rounded","round","decimals","_a","toString","split","parseFloat","toFixed"],"mappings":"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"}