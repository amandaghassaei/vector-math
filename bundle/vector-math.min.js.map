{"version":3,"file":"vector-math.min.js","sources":["../src/constants.ts","../src/Vector2.ts","../src/Vector3.ts","../src/Matrix3.ts","../src/common.ts","../src/Matrix4.ts","../src/Quaternion.ts","../src/Number.ts"],"sourcesContent":["export const NUMERICAL_TOLERANCE = 1e-15;","import type { Matrix3Readonly } from './Matrix3';\nimport type { Vector2 as THREE_Vector2 } from 'three';\n\nexport type Vector2Readonly = {\n\treadonly x: number;\n\treadonly y: number;\n\tdot: (vec: Vector2Readonly | THREE_Vector2) => number;\n\tcross: (vec: Vector2Readonly | THREE_Vector2) => number;\n\tangle: () => number;\n\tlengthSq: () => number;\n\tlength: () => number;\n\tequals: (vec: Vector2Readonly | THREE_Vector2) => boolean;\n\tisZero: () => boolean;\n\tclone: () => Vector2;\n\ttoArray: () => [number, number];\n};\n\nexport class Vector2 {\n\tx: number;\n\ty: number;\n\n\t/**\n\t * @param x - Defaults to 0.\n\t * @param y - Defaults to 0.\n\t */\n\tconstructor();\n\tconstructor(x: number, y: number);\n\tconstructor(x?: number, y?: number) {\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t}\n\n\t/**\n\t * Set the contents of a Vector2.\n\t * @param x - x component.\n\t * @param y - y component.\n\t * @returns this\n\t */\n\tset(x: number, y: number) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the contents of a Vector3 from an array.\n\t * @param array - Array containing x, and y components.\n\t * @returns this\n\t */\n\tsetFromArray(array: readonly [number, number]) {\n\t\tthis.x = array[0];\n\t\tthis.y = array[1];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a Vector2 to this Vector2.\n\t * @param vec - Vector2 to add.\n\t * @returns this\n\t */\n\tadd(vec: Vector2Readonly | THREE_Vector2) {\n\t\tthis.x += vec.x;\n\t\tthis.y += vec.y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Subtract a Vector2 from this Vector2.\n\t * @param vec - Vector2 to subtract.\n\t * @returns this\n\t */\n\tsub(vec: Vector2Readonly | THREE_Vector2) {\n\t\tthis.x -= vec.x;\n\t\tthis.y -= vec.y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Multiply this Vector2 by scalar value.\n\t * @param scalar - Scalar to multiply.\n\t * @returns this\n\t */\n\tmultiplyScalar(scalar: number) {\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Divide this Vector2 by scalar value.\n\t * @param scalar - Scalar to divide.\n\t * @returns this\n\t */\n\tdivideScalar(scalar: number) {\n\t\tif (scalar === 0) console.warn('Dividing by zero in Vector2.divideScalar().');\n\t\treturn this.multiplyScalar(1 / scalar);\n\t}\n\n\t/**\n\t * Returns the dot product of this Vector2 with another Vector2.\n\t * @param vec - Vector2 to dot with.\n\t */\n\tdot(vec: Vector2Readonly | THREE_Vector2) {\n\t\treturn this.x * vec.x + this.y * vec.y;\n\t}\n\n\t/**\n\t * Compute the 2D cross product (wedge product) with another Vector2.\n\t * @param vec - Vector2 to cross.\n\t */\n\tcross(vec: Vector2Readonly | THREE_Vector2) {\n\t\treturn this.x * vec.y - this.y * vec.x;\n\t}\n\n\t/**\n\t * Get the angle of this Vector2.\n\t * Computes the angle in radians with respect to the positive x-axis.\n\t * Angle is always in range [0, 2 * Math.PI] (and 2 * Math.PI is slightly less than 2 * PI).\n\t */\n\tangle() {\n\t\treturn Math.atan2(-this.y, -this.x) + Math.PI;\n\t}\n\n\t/**\n\t * Returns the squared length of the Vector2.\n\t */\n\tlengthSq() {\n\t\tconst lengthSq = this.dot(this);\n\t\treturn lengthSq;\n\t}\n\n\t/**\n\t * Returns the length of the Vector2.\n\t */\n\tlength() {\n\t\treturn Math.sqrt(this.lengthSq());\n\t}\n\n\t/**\n\t * Normalize the length of this Vector2.\n\t */\n\tnormalize() {\n\t\tlet length = this.length();\n\t\tif (length === 0) {\n\t\t\tconsole.warn('Attempting to normalize zero length Vector2.');\n\t\t\tlength = 1;\n\t\t}\n\t\tthis.divideScalar(length);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply Matrix3 transformation to this Vector2.\n\t * @param matrix - Matrix3 to apply.\n\t */\n\tapplyMatrix3(matrix: Matrix3Readonly) {\n\t\tif (matrix.isIdentity) return this;\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = matrix.elements;\n\t\tthis.x = e[0] * x + e[1] * y + e[2];\n\t\tthis.y = e[3] * x + e[4] * y + e[5];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Linearly interpolate between this Vector2 and another Vector2.\n\t * @param vector - Vector2 to lerp to.\n\t * @param t - Interpolation factor between 0 and 1.\n\t * @returns this\n\t */\n\tlerp(vector: Vector2Readonly | THREE_Vector2, t: number) {\n\t\tthis.x += (vector.x - this.x) * t;\n\t\tthis.y += (vector.y - this.y) * t;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Average this Vector2 with another Vector2.\n\t * @param vector - Vector2 to average with.\n\t * @returns this\n\t */\n\taverage(vector: Vector2Readonly | THREE_Vector2) {\n\t\tthis.x = (this.x + vector.x) / 2;\n\t\tthis.y = (this.y + vector.y) / 2;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Copy the contents of a Vector2 to this Vector2.\n\t * @param vec - Vector2 to copy.\n\t * @returns this\n\t */\n\tcopy(vec: Vector2Readonly | THREE_Vector2) {\n\t\tthis.x = vec.x;\n\t\tthis.y = vec.y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Test if this Vector2 equals another Vector2.\n\t * @param vec - Vector2 to test equality with.\n\t */\n\tequals(vec: Vector2Readonly | THREE_Vector2) {\n\t\treturn this.x === vec.x && this.y === vec.y;\n\t}\n\n\t/**\n\t * Test if this vector is the zero vector.\n\t */\n\tisZero() {\n\t\treturn this.x === 0 && this.y === 0;\n\t}\n\n\t/**\n\t * Clone this Vector2 into a new Vector2.\n\t */\n\tclone() {\n\t\treturn new Vector2(this.x, this.y);\n\t}\n\n\t/**\n\t * Returns an array containing the x and y components of this Vector3.\n\t */\n\ttoArray() {\n\t\treturn [this.x, this.y] as [number, number];\n\t}\n}","import type { Matrix4Readonly } from './Matrix4';\nimport type { QuaternionReadonly } from './Quaternion';\nimport type {\n\tVector3 as THREE_Vector3,\n\tQuaternion as THREE_Quaternion,\n} from 'three';\n\nexport type Vector3Readonly = {\n\treadonly x: number;\n\treadonly y: number;\n\treadonly z: number;\n\tdot: (vec: Vector3Readonly | THREE_Vector3) => number;\n\tlengthSq: () => number;\n\tlength: () => number;\n\tequals: (vec: Vector3Readonly | THREE_Vector3) => boolean;\n\tisZero: () => boolean;\n\tclone: () => Vector3;\n\ttoArray: () => [number, number, number];\n};\n\nexport class Vector3 {\n\tx: number;\n\ty: number;\n\tz: number;\n\n\t/**\n\t * @param x - Defaults to 0.\n\t * @param y - Defaults to 0.\n\t * @param z - Defaults to 0.\n\t */\n\tconstructor();\n\tconstructor(x: number, y: number, z: number);\n\tconstructor(x?: number, y?: number, z?: number) {\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t}\n\n\t/**\n\t * Set the contents of a Vector3.\n\t * @param x - x component.\n\t * @param y - y component.\n\t * @param z - z component.\n\t * @returns this\n\t */\n\tset(x: number, y: number, z: number) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the contents of a Vector3 from an array.\n\t * @param array - Array containing x, y, and z components.\n\t * @returns this\n\t */\n\tsetFromArray(array: readonly [number, number, number]) {\n\t\tthis.x = array[0];\n\t\tthis.y = array[1];\n\t\tthis.z = array[2];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a Vector3 to this Vector3.\n\t * @param vec - Vector3 to add.\n\t * @returns this\n\t */\n\tadd(vec: Vector3Readonly | THREE_Vector3) {\n\t\tthis.x += vec.x;\n\t\tthis.y += vec.y;\n\t\tthis.z += vec.z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Subtract a Vector3 from this Vector3.\n\t * @param vec - Vector3 to subtract.\n\t * @returns this\n\t */\n\tsub(vec: Vector3Readonly | THREE_Vector3) {\n\t\tthis.x -= vec.x;\n\t\tthis.y -= vec.y;\n\t\tthis.z -= vec.z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Multiply this Vector3 by scalar value.\n\t * @param scalar - Scalar to multiply.\n\t * @returns this\n\t */\n\tmultiplyScalar(scalar: number) {\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Divide this Vector3 by scalar value.\n\t * @param scalar - Scalar to divide.\n\t * @returns this\n\t */\n\tdivideScalar(scalar: number) {\n\t\tif (scalar === 0) console.warn('Dividing by zero in Vector3.divideScalar().');\n\t\treturn this.multiplyScalar(1 / scalar);\n\t}\n\n\t/**\n\t * Returns the dot product of this Vector3 with another Vector3.\n\t * @param vec - Vector3 to dot with.\n\t */\n\tdot(vec: Vector3Readonly | THREE_Vector3) {\n\t\treturn this.x * vec.x + this.y * vec.y + this.z * vec.z;\n\t}\n\n\t/**\n\t * Cross this Vector3 with another Vector3.\n\t * @param vec - Vector3 to cross with.\n\t */\n\tcross(vec: Vector3Readonly | THREE_Vector3) {\n\t\tconst ax = this.x, ay = this.y, az = this.z;\n\t\tconst bx = vec.x, by = vec.y, bz = vec.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the squared length of the Vector3.\n\t */\n\tlengthSq() {\n\t\tconst lengthSq = this.dot(this);\n\t\treturn lengthSq;\n\t}\n\n\t/**\n\t * Returns the length of the Vector3.\n\t */\n\tlength() {\n\t\treturn Math.sqrt(this.lengthSq());\n\t}\n\n\t/**\n\t * Normalize the length of this Vector3.\n\t */\n\tnormalize() {\n\t\tlet length = this.length();\n\t\tif (length === 0) {\n\t\t\tconsole.warn('Attempting to normalize zero length Vector3.');\n\t\t\tlength = 1;\n\t\t}\n\t\tthis.divideScalar(length);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply Matrix4 transformation to this Vector3.\n\t * @param matrix - Matrix4 to apply.\n\t * @returns this\n\t */\n\tapplyMatrix4(matrix: Matrix4Readonly) {\n\t\tif (matrix.isIdentity) return this;\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = matrix.elements;\n\t\tthis.x = e[0] * x + e[1] * y + e[2] * z + e[3];\n\t\tthis.y = e[4] * x + e[5] * y + e[6] * z + e[7];\n\t\tthis.z = e[8] * x + e[9] * y + e[10] * z + e[11];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply Matrix4 rotation component (ignore translation) to this Vector3.\n\t * @param matrix - Matrix4 to apply.\n\t * @returns this\n\t */\n\tapplyMatrix4RotationComponent(matrix: Matrix4Readonly) {\n\t\tif (matrix.isIdentity) return this;\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = matrix.elements;\n\t\tthis.x = e[0] * x + e[1] * y + e[2] * z;\n\t\tthis.y = e[4] * x + e[5] * y + e[6] * z;\n\t\tthis.z = e[8] * x + e[9] * y + e[10] * z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply Quaternion transformation to this Vector3.\n\t * @param quaternion - Quaternion to apply.\n\t * @returns this\n\t */\n\tapplyQuaternion(quaternion: QuaternionReadonly | THREE_Quaternion) {\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst qx = quaternion.x, qy = quaternion.y, qz = quaternion.z, qw = quaternion.w;\n\t\t// Calculate quat * vector.\n\t\tconst ix = qw * x + qy * z - qz * y;\n\t\tconst iy = qw * y + qz * x - qx * z;\n\t\tconst iz = qw * z + qx * y - qy * x;\n\t\tconst iw = - qx * x - qy * y - qz * z;\n\t\t// Calculate result * inverse quat.\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Linearly interpolate between this Vector3 and another Vector3.\n\t * @param vector - Vector3 to lerp to.\n\t * @param t - Interpolation factor between 0 and 1.\n\t * @returns this\n\t */\n\tlerp(vector: Vector3Readonly | THREE_Vector3, t: number) {\n\t\tthis.x += (vector.x - this.x) * t;\n\t\tthis.y += (vector.y - this.y) * t;\n\t\tthis.z += (vector.z - this.z) * t;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Average this Vector3 with another Vector3.\n\t * @param vector - Vector3 to average with.\n\t * @returns this\n\t */\n\taverage(vector: Vector3Readonly | THREE_Vector3) {\n\t\tthis.x = (this.x + vector.x) / 2;\n\t\tthis.y = (this.y + vector.y) / 2;\n\t\tthis.z = (this.z + vector.z) / 2;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Copy the contents of a Vector3 to this Vector3.\n\t * @param vec - Vector3 to copy.\n\t * @returns this\n\t */\n\tcopy(vec: Vector3Readonly | THREE_Vector3) {\n\t\tthis.x = vec.x;\n\t\tthis.y = vec.y;\n\t\tthis.z = vec.z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Test if this Vector3 equals another Vector3.\n\t * @param vec - Vector3 to test equality with.\n\t */\n\tequals(vec: Vector3Readonly | THREE_Vector3) {\n\t\treturn this.x === vec.x && this.y === vec.y && this.z === vec.z;\n\t}\n\n\t/**\n\t * Test if this vector is the zero vector.\n\t */\n\tisZero() {\n\t\treturn this.x === 0 && this.y === 0 && this.z === 0;\n\t}\n\n\t/**\n\t * Clone this Vector3 into a new Vector3.\n\t */\n\tclone() {\n\t\treturn new Vector3(this.x, this.y, this.z);\n\t}\n\n\t/**\n\t * Returns an array containing the x, y, and z components of this Vector3.\n\t */\n\ttoArray() {\n\t\treturn [this.x, this.y, this.z] as [number, number, number];\n\t}\n}","import { NUMERICAL_TOLERANCE } from './constants';\nimport type { Vector2Readonly } from './Vector2';\nimport type { Vector2 as THREE_Vector2 } from 'three';\n\nexport type Matrix3Readonly = {\n\treadonly elements: readonly number[];\n\treadonly isIdentity: boolean;\n\tequals: (matrix: Matrix3Readonly) => boolean;\n\tclone: () => Matrix3;\n}\n\n/**\n * These Matrix3s represent a rigid transform in homogeneous coords,\n * therefore, we assume that the bottom row is [0, 0, 1] and only store 6 elements.\n */\nexport class Matrix3 {\n\tprivate readonly _elements: number[];\n\tprivate _isIdentity: boolean;\n\n\t/**\n\t * If no elements passed in, defaults to identity matrix.\n\t */\n\tconstructor();\n\tconstructor(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tisIdentity?: boolean,\n\t);\n\tconstructor(\n\t\tn11?: number,\n\t\tn12?: number,\n\t\tn13?: number,\n\t\tn21?: number,\n\t\tn22?: number,\n\t\tn23?: number,\n\t\tisIdentity?: boolean,\n\t) {\n\t\tif (n11 !== undefined) {\n\t\t\tthis._elements = [\n\t\t\t\tn11, n12!, n13!,\n\t\t\t\tn21!, n22!, n23!,\n\t\t\t];\n\t\t\tthis._isIdentity = isIdentity === undefined ? Matrix3._checkElementForIdentity(this._elements) : isIdentity;\n\t\t} else {\n\t\t\tthis._elements = [\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t];\n\t\t\tthis._isIdentity = true;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset elements(elements: readonly number[]) {\n\t\tthrow new Error('No elements setter on Matrix3.');\n\t}\n\n\t/**\n\t * Returns elements of Matrix3.\n\t */\n\tget elements() {\n\t\treturn this._elements as readonly number[];\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset isIdentity(isIdentity: boolean) {\n\t\tthrow new Error('No isIdentity setter on Matrix3.');\n\t}\n\n\t/**\n\t * Returns whether Matrix3 is the identity matrix.\n\t */\n\tget isIdentity() {\n\t\treturn this._isIdentity;\n\t}\n\n\t/**\n\t * Set values element-wise.\n\t */\n\tprivate _set(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t) {\n\t\tconst { _elements } = this;\n\t\t_elements[0] = n11; _elements[1] = n12; _elements[2] = n13;\n\t\t_elements[3] = n21; _elements[4] = n22; _elements[5] = n23;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set this Matrix4 to the identity matrix.\n\t * @returns this\n\t */\n\tsetIdentity() {\n\t\tthis._set(\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t);\n\t\tthis._isIdentity = true;\n\t\treturn this;\n\t}\n\n\tprivate static _checkElementForIdentity(elements: number[]) {\n\t\tconst [\n\t\t\tn11, n12, n13,\n\t\t\tn21, n22, n23,\n\t\t] = elements;\n\t\treturn Math.abs(n11 - 1) <= NUMERICAL_TOLERANCE && Math.abs(n22 - 1) <= NUMERICAL_TOLERANCE &&\n\t\t\tMath.abs(n12) <= NUMERICAL_TOLERANCE && Math.abs(n13) <= NUMERICAL_TOLERANCE &&\n\t\t\tMath.abs(n21) <= NUMERICAL_TOLERANCE && Math.abs(n23) <= NUMERICAL_TOLERANCE;\n\t}\n\n\t// _setTranslation(translation: Vector3Readonly) {\n\t// \tthis._set(\n\t// \t\t1, 0, translation.x,\n\t// \t\t0, 1, translation.y,\n\t// \t);\n\t// \tthis._isIdentity = translation.x === 0 && translation.y === 0;\n\t// \treturn this;\n\t// }\n\n\t/**\n\t * Set elements of Matrix4 according to rotation and translation.\n\t * @param angle - Angle of rotation in radians.\n\t * @param translation - Translation offset.\n\t * @returns this\n\t */\n\tsetFromRotationTranslation(angle: number, translation: Vector2Readonly | THREE_Vector2) {\n\t\tif (angle === 0 && translation.x === 0 && translation.y === 0) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\t// To do this we need to calculate R(angle) * T(position).\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t// First calc R.\n\t\tconst r11 = Math.cos(angle),\tr12 = -Math.sin(angle);\n\t\tconst r21 = -r12,\t\t\t\tr22 = r11;\n\t\t// Pre-multiply T by R.\n\t\tconst tx = translation.x * r11 + translation.y * r12;\n\t\tconst ty = translation.x * r21 + translation.y * r22;\n\t\tthis._set(\n\t\t\tr11, r12, tx,\n\t\t\tr21, r22, ty,\n\t\t);\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\t// /**\n\t//  * Invert the current transform.\n\t//  * https://math.stackexchange.com/questions/1234948/inverse-of-a-rigid-transformation\n\t//  */\n\t// invertTransform() {\n\t// \tif (this._isIdentity) return this;\n\t// \tconst { _elements } = this;\n\t// \t// The inverted 2x2 rotation matrix is equal to its transpose: rTrans.\n\t// \tconst rTrans11 = _elements[0], rTrans12 = _elements[3];\n\t// \tconst rTrans21 = _elements[1], rTrans22 = _elements[4];\n\t// \t// The inverted translation is -rTrans * t.\n\t// \tconst t1 = _elements[2], t2 = _elements[5];\n\t// \tconst t1Inv = -rTrans11 * t1 - rTrans12 * t2;\n\t// \tconst t2Inv = -rTrans21 * t1 - rTrans22 * t2;\n\t// \tthis._set(\n\t// \t\trTrans11, rTrans12, t1Inv,\n\t// \t\trTrans21, rTrans22, t2Inv,\n\t// \t);\n\t// \treturn this;\n\t// }\n\n\t/**\n\t * Test if this Matrix3 equals another Matrix3.\n\t * @param matrix - Matrix3 to test equality with.\n\t * @returns\n\t */\n\tequals(matrix: Matrix3Readonly) {\n\t\tconst elementsA = this.elements;\n\t\tconst elementsB = matrix.elements;\n\t\tfor (let i = 0, numElements = elementsA.length; i < numElements; i++) {\n\t\t\tif (elementsA[i] !== elementsB[i]) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Copy values from a Matrix3 into this Matrix3.\n\t * @param matrix - Matrix3 to copy.\n\t * @returns this\n\t */\n\tcopy(matrix: Matrix3Readonly) {\n\t\tconst { elements } = matrix;\n\t\tthis._set(\n\t\t\telements[0], elements[1], elements[2],\n\t\t\telements[3], elements[4], elements[5],\n\t\t);\n\t\tthis._isIdentity = matrix.isIdentity;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a deep copy of this Matrix3.\n\t */\n\tclone() {\n\t\tconst { _elements } = this;\n\t\tconst clone = new Matrix3(\n\t\t\t_elements[0], _elements[1], _elements[2],\n\t\t\t_elements[3], _elements[4], _elements[5],\n\t\t\tthis._isIdentity,\n\t\t);\n\t\treturn clone;\n\t}\n}","import { Vector3 } from './Vector3';\n\nexport const tempVector3 = new Vector3();","import { tempVector3 } from './common';\nimport { NUMERICAL_TOLERANCE } from './constants';\nimport type { Vector3Readonly } from './Vector3';\nimport type { Vector3 as THREE_Vector3 } from 'three';\n\nexport type Matrix4Readonly = {\n\treadonly elements: readonly number[];\n\treadonly isIdentity: boolean;\n\tequals: (matrix: Matrix4Readonly) => boolean;\n\tclone: () => Matrix4;\n}\n\n/**\n * These Matrix4s represent a rigid transform in homogeneous coords,\n * therefore, we assume that the bottom row is [0, 0, 0, 1] and only store 12 elements.\n */\nexport class Matrix4 {\n\tprivate readonly _elements: number[];\n\tprivate _isIdentity: boolean;\n\n\t/**\n\t * If no elements passed in, defaults to identity matrix.\n\t */\n\tconstructor();\n\tconstructor(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn14: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tn24: number,\n\t\tn31: number,\n\t\tn32: number,\n\t\tn33: number,\n\t\tn34: number,\n\t\tisIdentity?: boolean,\n\t);\n\tconstructor(\n\t\tn11?: number,\n\t\tn12?: number,\n\t\tn13?: number,\n\t\tn14?: number,\n\t\tn21?: number,\n\t\tn22?: number,\n\t\tn23?: number,\n\t\tn24?: number,\n\t\tn31?: number,\n\t\tn32?: number,\n\t\tn33?: number,\n\t\tn34?: number,\n\t\tisIdentity?: boolean,\n\t) {\n\t\tif (n11 !== undefined) {\n\t\t\tthis._elements = [\n\t\t\t\tn11, n12!, n13!, n14!,\n\t\t\t\tn21!, n22!, n23!, n24!,\n\t\t\t\tn31!, n32!, n33!, n34!,\n\t\t\t];\n\t\t\tthis._isIdentity = isIdentity === undefined ? Matrix4._checkElementsForIdentity(this._elements) : isIdentity;\n\t\t} else {\n\t\t\tthis._elements = [\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t];\n\t\t\tthis._isIdentity = true;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset elements(elements: readonly number[]) {\n\t\tthrow new Error('No elements setter on Matrix4.');\n\t}\n\n\t/**\n\t * Returns elements of Matrix4.\n\t */\n\tget elements() {\n\t\treturn this._elements as readonly number[];\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset isIdentity(isIdentity: boolean) {\n\t\tthrow new Error('No isIdentity setter on Matrix4.');\n\t}\n\n\t/**\n\t * Returns whether Matrix4 is the identity matrix.\n\t */\n\tget isIdentity() {\n\t\treturn this._isIdentity;\n\t}\n\n\tprivate static _checkElementsForIdentity(elements: number[]) {\n\t\tconst [\n\t\t\tn11, n12, n13, n14,\n\t\t\tn21, n22, n23, n24,\n\t\t\tn31, n32, n33, n34\n\t\t]= elements;\n\t\treturn Math.abs(n11 - 1) <= NUMERICAL_TOLERANCE && Math.abs(n22 - 1) <= NUMERICAL_TOLERANCE && Math.abs(n33 - 1) <= NUMERICAL_TOLERANCE &&\n\t\t\tMath.abs(n12) <= NUMERICAL_TOLERANCE && Math.abs(n13) <= NUMERICAL_TOLERANCE && Math.abs(n14) <= NUMERICAL_TOLERANCE &&\n\t\t\tMath.abs(n21) <= NUMERICAL_TOLERANCE && Math.abs(n23) <= NUMERICAL_TOLERANCE && Math.abs(n24) <= NUMERICAL_TOLERANCE &&\n\t\t\tMath.abs(n31) <= NUMERICAL_TOLERANCE && Math.abs(n32) <= NUMERICAL_TOLERANCE && Math.abs(n34) <= NUMERICAL_TOLERANCE;\n\t}\n\n\t/**\n\t * Set values element-wise.\n\t */\n\tprivate _set(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn14: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tn24: number,\n\t\tn31: number,\n\t\tn32: number,\n\t\tn33: number,\n\t\tn34: number,\n\t) {\n\t\tconst { _elements } = this;\n\t\t_elements[0] = n11; _elements[1] = n12; _elements[2] = n13; _elements[3] = n14;\n\t\t_elements[4] = n21; _elements[5] = n22; _elements[6] = n23; _elements[7] = n24;\n\t\t_elements[8] = n31; _elements[9] = n32; _elements[10] = n33; _elements[11] = n34;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set this Matrix4 to the identity matrix.\n\t * @returns this\n\t */\n\tsetIdentity() {\n\t\tthis._set(\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t);\n\t\tthis._isIdentity = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * In place matrix multiplication of this Matrix4 (A) with another Matrix4 (B).\n\t * Sets value of this Matrix4 to B*A.\n\t * @param matrix - Matrix4 to multiply with.\n\t * @returns this\n\t */\n\tpremultiplyMatrix4(matrix: Matrix4Readonly) {\n\t\treturn Matrix4._multiplyMatrices(this, matrix, this);\n\t}\n\n\t/**\n\t * In place matrix multiplication of this Matrix4 (A) with another Matrix4 (B).\n\t * Sets value of this Matrix4 to A*B.\n\t * @param matrix - Matrix4 to multiply with.\n\t */\n\tmultiplyMatrix4(matrix: Matrix4Readonly) {\n\t\treturn Matrix4._multiplyMatrices(this, this, matrix);\n\t}\n\n\t/**\n\t * Matrix multiplication of two matrices.\n\t */\n\tprivate static _multiplyMatrices(self: Matrix4, matrixA: Matrix4Readonly, matrixB: Matrix4Readonly) {\n\t\t// Check if we need to multiply through.\n\t\tif (matrixA.isIdentity) return self.copy(matrixB);\n\t\tif (matrixB.isIdentity) return self.copy(matrixA);\n\n\t\tconst { _elements } = self;\n\t\tconst ae = matrixA.elements;\n\t\tconst be = matrixB.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 1 ], a13 = ae[ 2 ], a14 = ae[ 3 ];\n\t\tconst a21 = ae[ 4 ], a22 = ae[ 5 ], a23 = ae[ 6 ], a24 = ae[ 7 ];\n\t\tconst a31 = ae[ 8 ], a32 = ae[ 9 ], a33 = ae[ 10 ], a34 = ae[ 11 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 1 ], b13 = be[ 2 ], b14 = be[ 3 ];\n\t\tconst b21 = be[ 4 ], b22 = be[ 5 ], b23 = be[ 6 ], b24 = be[ 7 ];\n\t\tconst b31 = be[ 8 ], b32 = be[ 9 ], b33 = be[ 10 ], b34 = be[ 11 ];\n\n\t\t_elements[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t_elements[1] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t_elements[2] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t_elements[3] = a11 * b14 + a12 * b24 + a13 * b34 + a14;\n\n\t\t_elements[4] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t_elements[5] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t_elements[6] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t_elements[7] = a21 * b14 + a22 * b24 + a23 * b34 + a24;\n\n\t\t_elements[8] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t_elements[9] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t_elements[10] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t_elements[11] = a31 * b14 + a32 * b24 + a33 * b34 + a34;\n\n\t\tself._isIdentity = Matrix4._checkElementsForIdentity(_elements);\n\t\treturn self;\n\t}\n\n\tsetTranslation(translation: Vector3Readonly | THREE_Vector3) {\n\t\tif (translation.x === 0 && translation.y === 0 && translation.z === 0) return this.setIdentity();\n\t\tthis._set(\n\t\t\t1, 0, 0, translation.x,\n\t\t\t0, 1, 0, translation.y,\n\t\t\t0, 0, 1, translation.z,\n\t\t);\n\t \tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to rotation about axis.\n\t * @param axis - Unit vector around which to rotate, must be normalized.\n\t * @param angle - Angle of rotation in radians.\n\t * @param offset - Offset vector.\n\t * @returns this\n\t */\n\tsetRotationAxisAngleAtOffset(\n\t\taxis: Vector3Readonly | THREE_Vector3,\n\t\tangle: number,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\tif (angle === 0) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\tconst cosAngle = Math.cos(angle);\n\t\tconst sinAngle = Math.sin(angle);\n\t\treturn this._setRotationAxisCosSin(cosAngle, sinAngle, axis, offset);\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to rotation from one vector to another.\n\t * @param fromVector - Unit vector to rotate from, must be normalized.\n\t * @param toVector - Unit vector to rotate to, must be normalized.\n\t * @returns this\n\t */\n\tsetRotationFromVectorToVector(\n\t\tfromVector: Vector3Readonly,\n\t\ttoVector: Vector3Readonly,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t): Matrix4;\n\tsetRotationFromVectorToVector(\n\t\tfromVector: THREE_Vector3,\n\t\ttoVector: THREE_Vector3,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t): Matrix4;\n\tsetRotationFromVectorToVector(\n\t\tfromVector: any,\n\t\ttoVector: any,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t): Matrix4 {\n\t\tif (fromVector.equals(toVector)) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\tconst axis = tempVector3.copy(fromVector).cross(toVector);\n\t\tconst sinAngle = axis.length();\n\t\taxis.divideScalar(sinAngle); // Normalize axis.\n\t\tconst cosAngle = fromVector.dot(toVector);\n\t\treturn this._setRotationAxisCosSin(cosAngle, sinAngle, axis, offset);\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to reflection.\n\t * @param normal - Unit vector about which to reflect, must be normalized.\n\t * @param offset - Offset vector of reflection.\n\t * @returns this\n\t */\n\tsetReflectionNormalAtOffset(\n\t\tnormal: Vector3Readonly | THREE_Vector3,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\t// To do this we need to calculate T * R * (-T).\n\t\t// Based on https://math.stackexchange.com/questions/693414/reflection-across-the-plane\n\t\t// First calc R.\n\t\tconst nx = normal.x;\n\t\tconst ny = normal.y;\n\t\tconst nz = normal.z;\n\t\tconst r11 = 1 - 2 * nx * nx,\tr12 = -2 * nx * ny,\t\tr13 = -2 * nx * nz;\n\t\tconst r21 = r12,\t\t\t\tr22 = 1 - 2 * ny * ny,\tr23 = -2 * ny * nz;\n\t\tconst r31 = r13,\t\t\t\tr32 = r23,\t\t\t\tr33 = 1 - 2 * nz * nz;\n\t\tif (offset) {\n\t\t\tthis._setRotationMatrixAtOffset(\n\t\t\t\tr11, r12, r13,\n\t\t\t\tr21, r22, r23,\n\t\t\t\tr31, r32, r33,\n\t\t\t\toffset,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._set(\n\t\t\t\tr11, r12, r13, 0,\n\t\t\t\tr21, r22, r23, 0,\n\t\t\t\tr31, r32, r33, 0,\n\t\t\t);\n\t\t}\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\tprivate _setRotationAxisCosSin(cosAngle: number, sinAngle: number, axis: Vector3Readonly | THREE_Vector3, offset?: Vector3Readonly | THREE_Vector3) {\n\t\t// To do this we need to calculate T * R * (-T).\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t// First calc R.\n\t\tconst t = 1 - cosAngle;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst t_x = t * x, t_y = t * y;\n\t\tconst r11 = t_x * x + cosAngle,\t\tr12 = t_x * y - sinAngle * z,\tr13 = t_x * z + sinAngle * y;\n\t\tconst r21 = t_x * y + sinAngle * z,\tr22 = t_y * y + cosAngle,\t\tr23 = t_y * z - sinAngle * x;\n\t\tconst r31 = t_x * z - sinAngle * y,\tr32 = t_y * z + sinAngle * x,\tr33 = t * z * z + cosAngle;\n\t\tif (offset) {\n\t\t\tthis._setRotationMatrixAtOffset(\n\t\t\t\tr11, r12, r13,\n\t\t\t\tr21, r22, r23,\n\t\t\t\tr31, r32, r33,\n\t\t\t\toffset,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._set(\n\t\t\t\tr11, r12, r13, 0,\n\t\t\t\tr21, r22, r23, 0,\n\t\t\t\tr31, r32, r33, 0,\n\t\t\t);\n\t\t}\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\tprivate _setRotationMatrixAtOffset(\n\t\tr11: number, r12: number, r13: number,\n\t\tr21: number, r22: number, r23: number,\n\t\tr31: number, r32: number, r33: number,\n\t\toffset: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\t// Apply T * R * (-T).\n\t\t// Pre-multiply R by T and post multiply by -T.\n\t\t// This is a bit confusing to follow, but it reduces the amount of operations in the calc.\n\t\tconst tx = -offset.x * (r11 - 1) - offset.y * r12 - offset.z * r13;\n\t\tconst ty = -offset.x * r21 - offset.y * (r22 - 1) - offset.z * r23;\n\t\tconst tz = -offset.x * r31 - offset.y * r32 - offset.z * (r33 - 1);\n\t\tthis._set(\n\t\t\tr11, r12, r13, tx,\n\t\t\tr21, r22, r23, ty,\n\t\t\tr31, r32, r33, tz,\n\t\t);\n\t}\n\n\t/**\n\t * Invert the current transform.\n\t * https://math.stackexchange.com/questions/1234948/inverse-of-a-rigid-transformation\n\t * @returns this\n\t */\n\tinvertTransform() {\n\t\tif (this._isIdentity) return this;\n\t\tconst { _elements } = this;\n\t\t// The inverted 3x3 rotation matrix is equal to its transpose: rTrans.\n\t\tconst rTrans11 = _elements[0], rTrans12 = _elements[4], rTrans13 = _elements[8];\n\t\tconst rTrans21 = _elements[1], rTrans22 = _elements[5], rTrans23 = _elements[9];\n\t\tconst rTrans31 = _elements[2], rTrans32 = _elements[6], rTrans33 = _elements[10];\n\t\t// The inverted translation is -rTrans * t.\n\t\tconst t1 = _elements[3], t2 = _elements[7], t3 = _elements[11];\n\t\tconst t1Inv = -rTrans11 * t1 - rTrans12 * t2 - rTrans13 * t3;\n\t\tconst t2Inv = -rTrans21 * t1 - rTrans22 * t2 - rTrans23 * t3;\n\t\tconst t3Inv = -rTrans31 * t1 - rTrans32 * t2 - rTrans33 * t3;\n\t\tthis._set(\n\t\t\trTrans11, rTrans12, rTrans13, t1Inv,\n\t\t\trTrans21, rTrans22, rTrans23, t2Inv,\n\t\t\trTrans31, rTrans32, rTrans33, t3Inv,\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Test if this Matrix4 equals another Matrix4.\n\t * @param matrix - Matrix4 to test equality with.\n\t * @returns\n\t */\n\tequals(matrix: Matrix4Readonly) {\n\t\tconst elementsA = this.elements;\n\t\tconst elementsB = matrix.elements;\n\t\tfor (let i = 0, numElements = elementsA.length; i < numElements; i++) {\n\t\t\tif (elementsA[i] !== elementsB[i]) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Copy values from a Matrix4 into this Matrix4.\n\t * @param matrix - Matrix4 to copy.\n\t * @returns this\n\t */\n\tcopy(matrix: Matrix4Readonly) {\n\t\tconst { elements } = matrix;\n\t\tthis._set(\n\t\t\telements[0], elements[1], elements[2], elements[3],\n\t\t\telements[4], elements[5], elements[6], elements[7],\n\t\t\telements[8], elements[9], elements[10], elements[11],\n\t\t);\n\t\tthis._isIdentity = matrix.isIdentity;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a deep copy of this Matrix4.\n\t */\n\tclone() {\n\t\tconst { _elements } = this;\n\t\tconst clone = new Matrix4(\n\t\t\t_elements[0], _elements[1], _elements[2], _elements[3],\n\t\t\t_elements[4], _elements[5], _elements[6], _elements[7],\n\t\t\t_elements[8], _elements[9], _elements[10], _elements[11],\n\t\t\tthis._isIdentity,\n\t\t);\n\t\treturn clone;\n\t}\n}","import type { Vector3Readonly } from './Vector3';\nimport type {\n\tQuaternion as THREE_Quaternion,\n\tVector3 as THREE_Vector3,\n} from 'three';\n\nexport type QuaternionReadonly = {\n\treadonly x: number;\n\treadonly y: number;\n\treadonly z: number;\n\treadonly w: number;\n\treadonly lengthSq: () => number;\n\treadonly length: () => number;\n\treadonly clone: () => Quaternion;\n}\n\nexport class Quaternion {\n\tprivate _x;\n\tprivate _y;\n\tprivate _z;\n\tprivate _w;\n\n\t/**\n\t * @param x - Defaults to 0.\n\t * @param y - Defaults to 0.\n\t * @param z - Defaults to 0.\n\t * @param w - Defaults to 1.\n\t */\n\tconstructor();\n\tconstructor(x: number, y: number, z: number, w: number);\n\tconstructor(x?: number, y?: number, z?: number, w?: number) {\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = w !== undefined ? w : 1;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset x(x: number) {\n\t\tthrow new Error('No x setter on Quaternion.');\n\t}\n\n\tget x() {\n\t\treturn this._x;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset y(y: number) {\n\t\tthrow new Error('No y setter on Quaternion.');\n\t}\n\n\tget y() {\n\t\treturn this._y;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset z(z: number) {\n\t\tthrow new Error('No z setter on Quaternion.');\n\t}\n\n\tget z() {\n\t\treturn this._z;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset w(w: number) {\n\t\tthrow new Error('No w setter on Quaternion.');\n\t}\n\n\tget w() {\n\t\treturn this._w;\n\t}\n\n\t/**\n\t * Set quaternion from two unit vectors.\n\t * @param vFrom - From unit vector (normalized).\n\t * @param vTo - To unit vector (normalized).\n\t * @returns this\n\t */\n\tsetFromUnitVectors(\n\t\tvFrom: Vector3Readonly | THREE_Vector3,\n\t\tvTo: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\tlet r = vFrom.x * vTo.x + vFrom.y * vTo.y + vFrom.z * vTo.z + 1;\n\t\tif ( r <= Number.EPSILON ) { // TODO: better epsilon?\n\t\t\t// vFrom and vTo point in opposite directions.\n\t\t\tr = 0;\n\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\t\t\t} else {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\t\t} else {\n\t\t\t// crossVectors( vFrom, vTo );\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\t\t}\n\t\treturn this.normalize();\n\t}\n\n\t/**\n\t * Returns the squared length of the Quaternion.\n\t */\n\tlengthSq() {\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t}\n\n\t/**\n\t * Returns the length of the Quaternion.\n\t */\n\tlength() {\n\t\treturn Math.sqrt(this.lengthSq());\n\t}\n\n\t/**\n\t * Normalize the length of this Quaternion.\n\t * @returns this\n\t */\n\tnormalize() {\n\t\tlet l = this.length();\n\t\tif (l === 0) {\n\t\t\tconsole.warn('Attempting to normalize zero length Quaternion.');\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\t\t} else {\n\t\t\tl = 1 / l;\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * In place quaternion multiplication of this Quaternion (A) with another Quaternion (B).\n\t * Sets value of this Quaternion to A*B.\n\t * @param quat - Quaternion to multiply with.\n\t * @returns this\n\t */\n\tmultiply(quat: QuaternionReadonly | THREE_Quaternion) {\n\t\treturn Quaternion._multiplyQuaternions(this, this, quat);\n\n\t}\n\n\t/**\n\t * In place quaternion multiplication of this Quaternion (A) with another Quaternion (B).\n\t * Sets value of this Quaternion to B*A.\n\t * @param quat - Quaternion to premultiply with.\n\t * @returns this\n\t */\n\tpremultiply(quat: QuaternionReadonly | THREE_Quaternion) {\n\t\treturn Quaternion._multiplyQuaternions(this, quat, this);\n\t}\n\n\t/**\n\t * Quaternion multiplication.\n\t */\n\tprivate static _multiplyQuaternions(\n\t\tself: Quaternion,\n\t\tquatA: QuaternionReadonly | THREE_Quaternion,\n\t\tquatB: QuaternionReadonly | THREE_Quaternion,\n\t) {\n\t\t// From http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\tconst qax = quatA.x, qay = quatA.y, qaz = quatA.z, qaw = quatA.w;\n\t\tconst qbx = quatB.x, qby = quatB.y, qbz = quatB.z, qbw = quatB.w;\n\n\t\tself._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tself._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tself._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tself._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\treturn self;\n\t}\n\n\t/**\n\t * Copy the contents of a Quaternion to this Quaternion.\n\t * @param quaternion - Quaternion to copy.\n\t * @returns this\n\t */\n\tcopy(quaternion: QuaternionReadonly | THREE_Quaternion) {\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Clone this Quaternion into a new Quaternion.\n\t */\n\tclone() {\n\t\treturn new Quaternion(this._x, this._y, this._z, this._w);\n\t}\n}","export function clampValue(value: number, min: number, max: number) {\n\treturn Math.max(Math.min(value, max), min);\n}\n\nexport function radiansToDegrees(value: number) {\n\treturn value * 180 / Math.PI;\n}\n\nexport function degreesToRadians(value: number) {\n\treturn value / 180 * Math.PI;\n}\n\nexport function roundValueToIncrement(value: number, coarseStep: number) {\n\tif (coarseStep === 0) return value;\n\tif (coarseStep < 0) throw new Error(`Invalid coarse step: ${coarseStep}.`);\n\tconst rounded = Math.round(value / coarseStep) * coarseStep;\n\t// Use a rounding trick to avoid results like 1.7999999999998 instead of 1.8.\n\tconst decimals = coarseStep.toString().split('.')[1]?.length || 0;\n\treturn parseFloat(rounded.toFixed(decimals));\n}"],"names":["NUMERICAL_TOLERANCE","Vector2","constructor","x","y","this","set","setFromArray","array","add","vec","sub","multiplyScalar","scalar","divideScalar","console","warn","dot","cross","angle","Math","atan2","PI","lengthSq","length","sqrt","normalize","applyMatrix3","matrix","isIdentity","e","elements","lerp","vector","t","average","copy","equals","isZero","clone","toArray","Vector3","z","ax","ay","az","bx","by","bz","applyMatrix4","applyMatrix4RotationComponent","applyQuaternion","quaternion","qx","qy","qz","qw","w","ix","iy","iz","iw","Matrix3","n11","n12","n13","n21","n22","n23","undefined","_elements","_isIdentity","_checkElementForIdentity","Error","_set","setIdentity","static","abs","setFromRotationTranslation","translation","r11","cos","r12","sin","r21","r22","tx","ty","elementsA","elementsB","i","numElements","tempVector3","Matrix4","n14","n24","n31","n32","n33","n34","_checkElementsForIdentity","premultiplyMatrix4","_multiplyMatrices","multiplyMatrix4","self","matrixA","matrixB","ae","be","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","setTranslation","setRotationAxisAngleAtOffset","axis","offset","cosAngle","sinAngle","_setRotationAxisCosSin","setRotationFromVectorToVector","fromVector","toVector","setReflectionNormalAtOffset","normal","nx","ny","nz","r13","r23","r31","r32","r33","_setRotationMatrixAtOffset","t_x","t_y","tz","invertTransform","rTrans11","rTrans12","rTrans13","rTrans21","rTrans22","rTrans23","rTrans31","rTrans32","rTrans33","t1","t2","t3","t1Inv","t2Inv","t3Inv","Quaternion","_x","_y","_z","_w","setFromUnitVectors","vFrom","vTo","r","Number","EPSILON","l","multiply","quat","_multiplyQuaternions","premultiply","quatA","quatB","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","value","min","max","coarseStep","rounded","round","decimals","_a","toString","split","parseFloat","toFixed"],"mappings":"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"}