{"version":3,"file":"vector-math.min.js","sources":["../src/constants.ts","../src/utils.ts","../src/Vector2.ts","../src/Vector3.ts","../src/Matrix3.ts","../src/common.ts","../src/Matrix4.ts","../src/Quaternion.ts","../src/Number.ts"],"sourcesContent":["export const DEFAULT_NUMERICAL_TOLERANCE = 1e-15;\n\nlet numericalTolerance = DEFAULT_NUMERICAL_TOLERANCE;\n\n/**\n * Set global numerical tolerance for all mathematical operations and equality checks.\n * Default numerical tolerance is 1e-15.\n * @param tolerance - Numerical tolerance to set.\n */\nexport function setNumericalTolerance(tolerance: number) {\n    numericalTolerance = tolerance;\n}\n\nexport function NUMERICAL_TOLERANCE() {\n    return numericalTolerance;\n}","export function getStackTraceAsString(): string {\n    try {\n        throw new Error('');\n    } catch (error: any) {\n        /* c8 ignore next 1 */\n        const stackString: string = error.stack || '';\n        const stack = stackString.split('\\n').map((line) => line.trim());\n        stack.splice(0, 2); // Remove first two elements (just points to this function).\n        return stack.join('\\n');\n    }\n}\n","import type { Matrix3Readonly } from './Matrix3';\nimport type { Vector2 as THREE_Vector2 } from 'three';\nimport { getStackTraceAsString } from './utils';\nimport { NUMERICAL_TOLERANCE } from './constants';\n\nexport type Vector2Readonly = {\n    readonly x: number;\n    readonly y: number;\n    dot: (vec: Vector2Readonly | THREE_Vector2) => number;\n    cross: (vec: Vector2Readonly | THREE_Vector2) => number;\n    angle: () => number;\n    lengthSq: () => number;\n    length: () => number;\n    distanceToSquared: (vec: Vector2Readonly | THREE_Vector2) => number;\n    distanceTo: (vec: Vector2Readonly | THREE_Vector2) => number;\n    equals: (vec: Vector2Readonly | THREE_Vector2) => boolean;\n    isZero: () => boolean;\n    clone: () => Vector2;\n    toArray: () => [number, number];\n};\n\nexport class Vector2 {\n    x: number;\n    y: number;\n\n    /**\n     * @param x - Defaults to 0.\n     * @param y - Defaults to 0.\n     */\n    constructor();\n    constructor(x: number, y: number);\n    constructor(x?: number, y?: number) {\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n\n    /**\n     * Set the contents of a Vector2.\n     * @param x - x component.\n     * @param y - y component.\n     * @returns this\n     */\n    set(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    /**\n     * Set the contents of a Vector3 from an array.\n     * @param array - Array containing x, and y components.\n     * @returns this\n     */\n    setFromArray(array: readonly [number, number]) {\n        this.x = array[0];\n        this.y = array[1];\n        return this;\n    }\n\n    /**\n     * Add a Vector2 to this Vector2.\n     * @param vec - Vector2 to add.\n     * @returns this\n     */\n    add(vec: Vector2Readonly | THREE_Vector2) {\n        this.x += vec.x;\n        this.y += vec.y;\n        return this;\n    }\n\n    /**\n     * Subtract a Vector2 from this Vector2.\n     * @param vec - Vector2 to subtract.\n     * @returns this\n     */\n    sub(vec: Vector2Readonly | THREE_Vector2) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n        return this;\n    }\n\n    /**\n     * Multiply this Vector2 by scalar value.\n     * @param scalar - Scalar to multiply.\n     * @returns this\n     */\n    multiplyScalar(scalar: number) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n\n    /**\n     * Divide this Vector2 by scalar value.\n     * @param scalar - Scalar to divide.\n     * @returns this\n     */\n    divideScalar(scalar: number) {\n        if (Math.abs(scalar) <= NUMERICAL_TOLERANCE())\n            console.warn(\n                `Dividing by zero in Vector2.divideScalar(), stack trace:\\n${getStackTraceAsString()}.`\n            );\n        return this.multiplyScalar(1 / scalar);\n    }\n\n    /**\n     * Returns the dot product of this Vector2 with another Vector2.\n     * @param vec - Vector2 to dot with.\n     */\n    dot(vec: Vector2Readonly | THREE_Vector2) {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n    /**\n     * Compute the 2D cross product (wedge product) with another Vector2.\n     * @param vec - Vector2 to cross.\n     */\n    cross(vec: Vector2Readonly | THREE_Vector2) {\n        return this.x * vec.y - this.y * vec.x;\n    }\n\n    /**\n     * Get the angle of this Vector2.\n     * Computes the angle in radians with respect to the positive x-axis.\n     * Angle is always in range [0, 2 * Math.PI] (and 2 * Math.PI is slightly less than 2 * PI).\n     */\n    angle() {\n        return Math.atan2(-this.y, -this.x) + Math.PI;\n    }\n\n    /**\n     * Returns the squared length of the Vector2.\n     */\n    lengthSq() {\n        const lengthSq = this.dot(this);\n        return lengthSq;\n    }\n\n    /**\n     * Returns the length of the Vector2.\n     */\n    length() {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    /**\n     * Returns the squared distance between this Vector2 and another Vector2.\n     * @param vec - Vector2 to measure distance to.\n     */\n    distanceToSquared(vec: Vector2Readonly | THREE_Vector2) {\n        const dx = this.x - vec.x;\n        const dy = this.y - vec.y;\n        return dx * dx + dy * dy;\n    }\n\n    /**\n     * Returns the distance between this Vector2 and another Vector2.\n     * @param vec - Vector2 to measure distance to.\n     */\n    distanceTo(vec: Vector2Readonly | THREE_Vector2) {\n        return Math.sqrt(this.distanceToSquared(vec));\n    }\n\n    /**\n     * Normalize the length of this Vector2.\n     */\n    normalize() {\n        let length = this.length();\n        if (length <= NUMERICAL_TOLERANCE()) {\n            console.warn(\n                `Attempting to normalize zero length Vector2, stack trace:\\n${getStackTraceAsString()}.`\n            );\n            length = 1;\n        }\n        this.divideScalar(length);\n        return this;\n    }\n\n    /**\n     * Apply Matrix3 transformation to this Vector2.\n     * @param matrix - Matrix3 to apply.\n     */\n    applyMatrix3(matrix: Matrix3Readonly) {\n        if (matrix.isIdentity) return this;\n        const x = this.x,\n            y = this.y;\n        const e = matrix.elements;\n        this.x = e[0] * x + e[1] * y + e[2];\n        this.y = e[3] * x + e[4] * y + e[5];\n        return this;\n    }\n\n    /**\n     * Linearly interpolate between this Vector2 and another Vector2.\n     * @param vector - Vector2 to lerp to.\n     * @param t - Interpolation factor between 0 and 1.\n     * @returns this\n     */\n    lerp(vector: Vector2Readonly | THREE_Vector2, t: number) {\n        this.x += (vector.x - this.x) * t;\n        this.y += (vector.y - this.y) * t;\n        return this;\n    }\n\n    /**\n     * Average this Vector2 with another Vector2.\n     * @param vector - Vector2 to average with.\n     * @returns this\n     */\n    average(vector: Vector2Readonly | THREE_Vector2) {\n        this.x = (this.x + vector.x) / 2;\n        this.y = (this.y + vector.y) / 2;\n        return this;\n    }\n\n    /**\n     * Invert this Vector2.\n     * @returns this\n     */\n    invert() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    /**\n     * Calculate the angle between this Vector2 and another Vector2.\n     */\n    angleTo(vector: Vector2Readonly | THREE_Vector2) {\n        const theta = this.dot(vector) / Math.sqrt(this.lengthSq() * vector.lengthSq());\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    /**\n     * Calculate the angle between this (normalized) Vector2 and another (normalized) Vector2.\n     */\n    angleToNormalized(vector: Vector2Readonly | THREE_Vector2) {\n        const theta = this.dot(vector);\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    /**\n     * Copy the contents of a Vector2 to this Vector2.\n     * @param vec - Vector2 to copy.\n     * @returns this\n     */\n    copy(vec: Vector2Readonly | THREE_Vector2) {\n        this.x = vec.x;\n        this.y = vec.y;\n        return this;\n    }\n\n    /**\n     * Test if this Vector2 equals another Vector2.\n     * @param vec - Vector2 to test equality with.\n     */\n    equals(vec: Vector2Readonly | THREE_Vector2) {\n        return Math.abs(this.x - vec.x) <= NUMERICAL_TOLERANCE() && Math.abs(this.y - vec.y) <= NUMERICAL_TOLERANCE();\n    }\n\n    /**\n     * Test if this vector is the zero vector.\n     */\n    isZero() {\n        return Math.abs(this.x) <= NUMERICAL_TOLERANCE() && Math.abs(this.y) <= NUMERICAL_TOLERANCE();\n    }\n\n    /**\n     * Clone this Vector2 into a new Vector2.\n     */\n    clone() {\n        return new Vector2(this.x, this.y);\n    }\n\n    /**\n     * Returns an array containing the x and y components of this Vector3.\n     */\n    toArray() {\n        return [this.x, this.y] as [number, number];\n    }\n}\n","import type { Matrix4Readonly } from './Matrix4';\nimport type { QuaternionReadonly } from './Quaternion';\nimport type { Vector3 as THREE_Vector3, Quaternion as THREE_Quaternion } from 'three';\nimport { getStackTraceAsString } from './utils';\nimport { NUMERICAL_TOLERANCE } from './constants';\n\nexport type Vector3Readonly = {\n    readonly x: number;\n    readonly y: number;\n    readonly z: number;\n    dot: (vec: Vector3Readonly | THREE_Vector3) => number;\n    lengthSq: () => number;\n    length: () => number;\n    distanceToSquared: (vec: Vector3Readonly | THREE_Vector3) => number;\n    distanceTo: (vec: Vector3Readonly | THREE_Vector3) => number;\n    equals: (vec: Vector3Readonly | THREE_Vector3) => boolean;\n    isZero: () => boolean;\n    clone: () => Vector3;\n    toArray: () => [number, number, number];\n};\n\nexport class Vector3 {\n    x: number;\n    y: number;\n    z: number;\n\n    /**\n     * @param x - Defaults to 0.\n     * @param y - Defaults to 0.\n     * @param z - Defaults to 0.\n     */\n    constructor();\n    constructor(x: number, y: number, z: number);\n    constructor(x?: number, y?: number, z?: number) {\n        this.x = x || 0;\n        this.y = y || 0;\n        this.z = z || 0;\n    }\n\n    /**\n     * Set the contents of a Vector3.\n     * @param x - x component.\n     * @param y - y component.\n     * @param z - z component.\n     * @returns this\n     */\n    set(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    }\n\n    /**\n     * Set the contents of a Vector3 from an array.\n     * @param array - Array containing x, y, and z components.\n     * @returns this\n     */\n    setFromArray(array: readonly [number, number, number]) {\n        this.x = array[0];\n        this.y = array[1];\n        this.z = array[2];\n        return this;\n    }\n\n    /**\n     * Add a Vector3 to this Vector3.\n     * @param vec - Vector3 to add.\n     * @returns this\n     */\n    add(vec: Vector3Readonly | THREE_Vector3) {\n        this.x += vec.x;\n        this.y += vec.y;\n        this.z += vec.z;\n        return this;\n    }\n\n    /**\n     * Subtract a Vector3 from this Vector3.\n     * @param vec - Vector3 to subtract.\n     * @returns this\n     */\n    sub(vec: Vector3Readonly | THREE_Vector3) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n        this.z -= vec.z;\n        return this;\n    }\n\n    /**\n     * Multiply this Vector3 by scalar value.\n     * @param scalar - Scalar to multiply.\n     * @returns this\n     */\n    multiplyScalar(scalar: number) {\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n        return this;\n    }\n\n    /**\n     * Divide this Vector3 by scalar value.\n     * @param scalar - Scalar to divide.\n     * @returns this\n     */\n    divideScalar(scalar: number) {\n        if (Math.abs(scalar) <= NUMERICAL_TOLERANCE())\n            console.warn(\n                `Dividing by zero in Vector3.divideScalar(), stack trace:\\n${getStackTraceAsString()}.`\n            );\n        return this.multiplyScalar(1 / scalar);\n    }\n\n    /**\n     * Returns the dot product of this Vector3 with another Vector3.\n     * @param vec - Vector3 to dot with.\n     */\n    dot(vec: Vector3Readonly | THREE_Vector3) {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    /**\n     * Cross this Vector3 with another Vector3.\n     * @param vec - Vector3 to cross with.\n     */\n    cross(vec: Vector3Readonly | THREE_Vector3) {\n        const ax = this.x,\n            ay = this.y,\n            az = this.z;\n        const bx = vec.x,\n            by = vec.y,\n            bz = vec.z;\n\n        this.x = ay * bz - az * by;\n        this.y = az * bx - ax * bz;\n        this.z = ax * by - ay * bx;\n\n        return this;\n    }\n\n    /**\n     * Returns the squared length of the Vector3.\n     */\n    lengthSq() {\n        const lengthSq = this.dot(this);\n        return lengthSq;\n    }\n\n    /**\n     * Returns the length of the Vector3.\n     */\n    length() {\n        return Math.sqrt(this.lengthSq());\n    }\n\n     /**\n     * Returns the squared distance between this Vector3 and another Vector3.\n     * @param vec - Vector3 to measure distance to.\n     */\n     distanceToSquared(vec: Vector3Readonly | THREE_Vector3) {\n        const dx = this.x - vec.x;\n        const dy = this.y - vec.y;\n        const dz = this.z - vec.z;\n        return dx * dx + dy * dy + dz * dz;\n    }\n\n    /**\n     * Returns the distance between this Vector3 and another Vector3.\n     * @param vec - Vector3 to measure distance to.\n     */\n    distanceTo(vec: Vector3Readonly | THREE_Vector3) {\n        return Math.sqrt(this.distanceToSquared(vec));\n    }\n\n    /**\n     * Normalize the length of this Vector3.\n     */\n    normalize() {\n        let length = this.length();\n        if (length <= NUMERICAL_TOLERANCE()) {\n            console.warn(\n                `Attempting to normalize zero length Vector3, stack trace:\\n${getStackTraceAsString()}.`\n            );\n            length = 1;\n        }\n        this.divideScalar(length);\n        return this;\n    }\n\n    /**\n     * Apply Matrix4 transformation to this Vector3.\n     * @param matrix - Matrix4 to apply.\n     * @returns this\n     */\n    applyMatrix4(matrix: Matrix4Readonly) {\n        if (matrix.isIdentity) return this;\n        const x = this.x,\n            y = this.y,\n            z = this.z;\n        const e = matrix.elements;\n        this.x = e[0] * x + e[1] * y + e[2] * z + e[3];\n        this.y = e[4] * x + e[5] * y + e[6] * z + e[7];\n        this.z = e[8] * x + e[9] * y + e[10] * z + e[11];\n        return this;\n    }\n\n    /**\n     * Apply Matrix4 rotation component (ignore translation) to this Vector3.\n     * @param matrix - Matrix4 to apply.\n     * @returns this\n     */\n    applyMatrix4RotationComponent(matrix: Matrix4Readonly) {\n        if (matrix.isIdentity) return this;\n        const x = this.x,\n            y = this.y,\n            z = this.z;\n        const e = matrix.elements;\n        this.x = e[0] * x + e[1] * y + e[2] * z;\n        this.y = e[4] * x + e[5] * y + e[6] * z;\n        this.z = e[8] * x + e[9] * y + e[10] * z;\n        return this;\n    }\n\n    /**\n     * Apply Quaternion transformation to this Vector3.\n     * @param quaternion - Quaternion to apply.\n     * @returns this\n     */\n    applyQuaternion(quaternion: QuaternionReadonly | THREE_Quaternion) {\n        const x = this.x,\n            y = this.y,\n            z = this.z;\n        const qx = quaternion.x,\n            qy = quaternion.y,\n            qz = quaternion.z,\n            qw = quaternion.w;\n        // Calculate quat * vector.\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n        // Calculate result * inverse quat.\n        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n        return this;\n    }\n\n    /**\n     * Linearly interpolate between this Vector3 and another Vector3.\n     * @param vector - Vector3 to lerp to.\n     * @param t - Interpolation factor between 0 and 1.\n     * @returns this\n     */\n    lerp(vector: Vector3Readonly | THREE_Vector3, t: number) {\n        this.x += (vector.x - this.x) * t;\n        this.y += (vector.y - this.y) * t;\n        this.z += (vector.z - this.z) * t;\n        return this;\n    }\n\n    /**\n     * Average this Vector3 with another Vector3.\n     * @param vector - Vector3 to average with.\n     * @returns this\n     */\n    average(vector: Vector3Readonly | THREE_Vector3) {\n        this.x = (this.x + vector.x) / 2;\n        this.y = (this.y + vector.y) / 2;\n        this.z = (this.z + vector.z) / 2;\n        return this;\n    }\n\n    /**\n     * Invert this Vector3.\n     * @returns this\n     */\n    invert() {\n        this.x = -this.x;\n        this.y = -this.y;\n        this.z = -this.z;\n        return this;\n    }\n\n    /**\n     * Calculate the angle between this Vector3 and another Vector3.\n     */\n    angleTo(vector: Vector3Readonly | THREE_Vector3) {\n        const theta = this.dot(vector) / Math.sqrt(this.lengthSq() * vector.lengthSq());\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    /**\n     * Calculate the angle between this (normalized) Vector3 and another (normalized) Vector3.\n     */\n    angleToNormalized(vector: Vector3Readonly | THREE_Vector3) {\n        const theta = this.dot(vector);\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    /**\n     * Copy the contents of a Vector3 to this Vector3.\n     * @param vec - Vector3 to copy.\n     * @returns this\n     */\n    copy(vec: Vector3Readonly | THREE_Vector3) {\n        this.x = vec.x;\n        this.y = vec.y;\n        this.z = vec.z;\n        return this;\n    }\n\n    /**\n     * Test if this Vector3 equals another Vector3.\n     * @param vec - Vector3 to test equality with.\n     * @param tolerance - Defaults to 0.\n     */\n    equals(vec: Vector3Readonly | THREE_Vector3) {\n        return (\n            Math.abs(this.x - vec.x) <= NUMERICAL_TOLERANCE() &&\n            Math.abs(this.y - vec.y) <= NUMERICAL_TOLERANCE() &&\n            Math.abs(this.z - vec.z) <= NUMERICAL_TOLERANCE()\n        );\n    }\n\n    /**\n     * Test if this vector is the zero vector.\n     */\n    isZero() {\n        return this.x <= NUMERICAL_TOLERANCE() && this.y <= NUMERICAL_TOLERANCE() && this.z <= NUMERICAL_TOLERANCE();\n    }\n\n    /**\n     * Clone this Vector3 into a new Vector3.\n     */\n    clone() {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    /**\n     * Returns an array containing the x, y, and z components of this Vector3.\n     */\n    toArray() {\n        return [this.x, this.y, this.z] as [number, number, number];\n    }\n}\n","import { NUMERICAL_TOLERANCE } from './constants';\nimport type { Vector2Readonly } from './Vector2';\nimport type { Vector2 as THREE_Vector2 } from 'three';\n\nexport type Matrix3Readonly = {\n\treadonly elements: readonly number[];\n\treadonly isIdentity: boolean;\n\tequals: (matrix: Matrix3Readonly) => boolean;\n\tclone: () => Matrix3;\n}\n\n/**\n * These Matrix3s represent a rigid transform in homogeneous coords,\n * therefore, we assume that the bottom row is [0, 0, 1] and only store 6 elements.\n */\nexport class Matrix3 {\n\tprivate readonly _elements: number[];\n\tprivate _isIdentity: boolean;\n\n\t/**\n\t * If no elements passed in, defaults to identity matrix.\n\t */\n\tconstructor();\n\tconstructor(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tisIdentity?: boolean,\n\t);\n\tconstructor(\n\t\tn11?: number,\n\t\tn12?: number,\n\t\tn13?: number,\n\t\tn21?: number,\n\t\tn22?: number,\n\t\tn23?: number,\n\t\tisIdentity?: boolean,\n\t) {\n\t\tif (n11 !== undefined) {\n\t\t\tthis._elements = [\n\t\t\t\tn11, n12!, n13!,\n\t\t\t\tn21!, n22!, n23!,\n\t\t\t];\n\t\t\tthis._isIdentity = isIdentity === undefined ? Matrix3._checkElementForIdentity(this._elements) : isIdentity;\n\t\t} else {\n\t\t\tthis._elements = [\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t];\n\t\t\tthis._isIdentity = true;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset elements(elements: readonly number[]) {\n\t\tthrow new Error('No elements setter on Matrix3.');\n\t}\n\n\t/**\n\t * Returns elements of Matrix3.\n\t */\n\tget elements() {\n\t\treturn this._elements as readonly number[];\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset isIdentity(isIdentity: boolean) {\n\t\tthrow new Error('No isIdentity setter on Matrix3.');\n\t}\n\n\t/**\n\t * Returns whether Matrix3 is the identity matrix.\n\t */\n\tget isIdentity() {\n\t\treturn this._isIdentity;\n\t}\n\n\t/**\n\t * Set values element-wise.\n\t */\n\tprivate _set(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t) {\n\t\tconst { _elements } = this;\n\t\t_elements[0] = n11; _elements[1] = n12; _elements[2] = n13;\n\t\t_elements[3] = n21; _elements[4] = n22; _elements[5] = n23;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set this Matrix4 to the identity matrix.\n\t * @returns this\n\t */\n\tsetIdentity() {\n\t\tthis._set(\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t);\n\t\tthis._isIdentity = true;\n\t\treturn this;\n\t}\n\n\tprivate static _checkElementForIdentity(elements: number[]) {\n\t\tconst [\n\t\t\tn11, n12, n13,\n\t\t\tn21, n22, n23,\n\t\t] = elements;\n\t\treturn Math.abs(n11 - 1) <= NUMERICAL_TOLERANCE() && Math.abs(n22 - 1) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n12) <= NUMERICAL_TOLERANCE() && Math.abs(n13) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n21) <= NUMERICAL_TOLERANCE() && Math.abs(n23) <= NUMERICAL_TOLERANCE();\n\t}\n\n\t// _setTranslation(translation: Vector3Readonly) {\n\t// \tthis._set(\n\t// \t\t1, 0, translation.x,\n\t// \t\t0, 1, translation.y,\n\t// \t);\n\t// \tthis._isIdentity = Math.abs(translation.x) <= NUMERICAL_TOLERANCE() && Math.abs(translation.y) <= NUMERICAL_TOLERANCE();\n\t// \treturn this;\n\t// }\n\n\t/**\n\t * Set elements of Matrix4 according to rotation and translation.\n\t * @param angle - Angle of rotation in radians.\n\t * @param translation - Translation offset.\n\t * @returns this\n\t */\n\tsetFromRotationTranslation(angle: number, translation: Vector2Readonly | THREE_Vector2) {\n\t\tif (Math.abs(angle) <= NUMERICAL_TOLERANCE() && Math.abs(translation.x) <= NUMERICAL_TOLERANCE() && Math.abs(translation.y) <= NUMERICAL_TOLERANCE()) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\t// To do this we need to calculate R(angle) * T(position).\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t// First calc R.\n\t\tconst r11 = Math.cos(angle),\tr12 = -Math.sin(angle);\n\t\tconst r21 = -r12,\t\t\t\tr22 = r11;\n\t\t// Pre-multiply T by R.\n\t\tconst tx = translation.x * r11 + translation.y * r12;\n\t\tconst ty = translation.x * r21 + translation.y * r22;\n\t\tthis._set(\n\t\t\tr11, r12, tx,\n\t\t\tr21, r22, ty,\n\t\t);\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\t// /**\n\t//  * Invert the current transform.\n\t//  * https://math.stackexchange.com/questions/1234948/inverse-of-a-rigid-transformation\n\t//  */\n\t// invertTransform() {\n\t// \tif (this._isIdentity) return this;\n\t// \tconst { _elements } = this;\n\t// \t// The inverted 2x2 rotation matrix is equal to its transpose: rTrans.\n\t// \tconst rTrans11 = _elements[0], rTrans12 = _elements[3];\n\t// \tconst rTrans21 = _elements[1], rTrans22 = _elements[4];\n\t// \t// The inverted translation is -rTrans * t.\n\t// \tconst t1 = _elements[2], t2 = _elements[5];\n\t// \tconst t1Inv = -rTrans11 * t1 - rTrans12 * t2;\n\t// \tconst t2Inv = -rTrans21 * t1 - rTrans22 * t2;\n\t// \tthis._set(\n\t// \t\trTrans11, rTrans12, t1Inv,\n\t// \t\trTrans21, rTrans22, t2Inv,\n\t// \t);\n\t// \treturn this;\n\t// }\n\n\t/**\n\t * Test if this Matrix3 equals another Matrix3.\n\t * @param matrix - Matrix3 to test equality with.\n\t * @returns\n\t */\n\tequals(matrix: Matrix3Readonly) {\n\t\tconst elementsA = this.elements;\n\t\tconst elementsB = matrix.elements;\n\t\tfor (let i = 0, numElements = elementsA.length; i < numElements; i++) {\n\t\t\tif (Math.abs(elementsA[i] - elementsB[i]) > NUMERICAL_TOLERANCE()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Copy values from a Matrix3 into this Matrix3.\n\t * @param matrix - Matrix3 to copy.\n\t * @returns this\n\t */\n\tcopy(matrix: Matrix3Readonly) {\n\t\tconst { elements } = matrix;\n\t\tthis._set(\n\t\t\telements[0], elements[1], elements[2],\n\t\t\telements[3], elements[4], elements[5],\n\t\t);\n\t\tthis._isIdentity = matrix.isIdentity;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a deep copy of this Matrix3.\n\t */\n\tclone() {\n\t\tconst { _elements } = this;\n\t\tconst clone = new Matrix3(\n\t\t\t_elements[0], _elements[1], _elements[2],\n\t\t\t_elements[3], _elements[4], _elements[5],\n\t\t\tthis._isIdentity,\n\t\t);\n\t\treturn clone;\n\t}\n}","import { Vector3 } from './Vector3';\n\nexport const tempVector3 = new Vector3();\n","import { tempVector3 } from './common';\nimport { NUMERICAL_TOLERANCE } from './constants';\nimport type { Vector3Readonly } from './Vector3';\nimport type { Vector3 as THREE_Vector3 } from 'three';\n\nexport type Matrix4Readonly = {\n\treadonly elements: readonly number[];\n\treadonly isIdentity: boolean;\n\tequals: (matrix: Matrix4Readonly) => boolean;\n\tclone: () => Matrix4;\n}\n\n/**\n * These Matrix4s represent a rigid transform in homogeneous coords,\n * therefore, we assume that the bottom row is [0, 0, 0, 1] and only store 12 elements.\n */\nexport class Matrix4 {\n\tprivate readonly _elements: number[];\n\tprivate _isIdentity: boolean;\n\n\t/**\n\t * If no elements passed in, defaults to identity matrix.\n\t */\n\tconstructor();\n\tconstructor(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn14: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tn24: number,\n\t\tn31: number,\n\t\tn32: number,\n\t\tn33: number,\n\t\tn34: number,\n\t\tisIdentity?: boolean,\n\t);\n\tconstructor(\n\t\tn11?: number,\n\t\tn12?: number,\n\t\tn13?: number,\n\t\tn14?: number,\n\t\tn21?: number,\n\t\tn22?: number,\n\t\tn23?: number,\n\t\tn24?: number,\n\t\tn31?: number,\n\t\tn32?: number,\n\t\tn33?: number,\n\t\tn34?: number,\n\t\tisIdentity?: boolean,\n\t) {\n\t\tif (n11 !== undefined) {\n\t\t\tthis._elements = [\n\t\t\t\tn11, n12!, n13!, n14!,\n\t\t\t\tn21!, n22!, n23!, n24!,\n\t\t\t\tn31!, n32!, n33!, n34!,\n\t\t\t];\n\t\t\tthis._isIdentity = isIdentity === undefined ? Matrix4._checkElementsForIdentity(this._elements) : isIdentity;\n\t\t} else {\n\t\t\tthis._elements = [\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t];\n\t\t\tthis._isIdentity = true;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset elements(elements: readonly number[]) {\n\t\tthrow new Error('No elements setter on Matrix4.');\n\t}\n\n\t/**\n\t * Returns elements of Matrix4.\n\t */\n\tget elements() {\n\t\treturn this._elements as readonly number[];\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset isIdentity(isIdentity: boolean) {\n\t\tthrow new Error('No isIdentity setter on Matrix4.');\n\t}\n\n\t/**\n\t * Returns whether Matrix4 is the identity matrix.\n\t */\n\tget isIdentity() {\n\t\treturn this._isIdentity;\n\t}\n\n\tprivate static _checkElementsForIdentity(elements: number[]) {\n\t\tconst [\n\t\t\tn11, n12, n13, n14,\n\t\t\tn21, n22, n23, n24,\n\t\t\tn31, n32, n33, n34\n\t\t]= elements;\n\t\treturn Math.abs(n11 - 1) <= NUMERICAL_TOLERANCE() && Math.abs(n22 - 1) <= NUMERICAL_TOLERANCE() && Math.abs(n33 - 1) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n12) <= NUMERICAL_TOLERANCE() && Math.abs(n13) <= NUMERICAL_TOLERANCE() && Math.abs(n14) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n21) <= NUMERICAL_TOLERANCE() && Math.abs(n23) <= NUMERICAL_TOLERANCE() && Math.abs(n24) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n31) <= NUMERICAL_TOLERANCE() && Math.abs(n32) <= NUMERICAL_TOLERANCE() && Math.abs(n34) <= NUMERICAL_TOLERANCE();\n\t}\n\n\t/**\n\t * Set values element-wise.\n\t */\n\tprivate _set(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn14: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tn24: number,\n\t\tn31: number,\n\t\tn32: number,\n\t\tn33: number,\n\t\tn34: number,\n\t) {\n\t\tconst { _elements } = this;\n\t\t_elements[0] = n11; _elements[1] = n12; _elements[2] = n13; _elements[3] = n14;\n\t\t_elements[4] = n21; _elements[5] = n22; _elements[6] = n23; _elements[7] = n24;\n\t\t_elements[8] = n31; _elements[9] = n32; _elements[10] = n33; _elements[11] = n34;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set this Matrix4 to the identity matrix.\n\t * @returns this\n\t */\n\tsetIdentity() {\n\t\tthis._set(\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t);\n\t\tthis._isIdentity = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * In place matrix multiplication of this Matrix4 (A) with another Matrix4 (B).\n\t * Sets value of this Matrix4 to B*A.\n\t * @param matrix - Matrix4 to multiply with.\n\t * @returns this\n\t */\n\tpremultiplyMatrix4(matrix: Matrix4Readonly) {\n\t\treturn Matrix4._multiplyMatrices(this, matrix, this);\n\t}\n\n\t/**\n\t * In place matrix multiplication of this Matrix4 (A) with another Matrix4 (B).\n\t * Sets value of this Matrix4 to A*B.\n\t * @param matrix - Matrix4 to multiply with.\n\t */\n\tmultiplyMatrix4(matrix: Matrix4Readonly) {\n\t\treturn Matrix4._multiplyMatrices(this, this, matrix);\n\t}\n\n\t/**\n\t * Matrix multiplication of two matrices.\n\t */\n\tprivate static _multiplyMatrices(self: Matrix4, matrixA: Matrix4Readonly, matrixB: Matrix4Readonly) {\n\t\t// Check if we need to multiply through.\n\t\tif (matrixA.isIdentity) return self.copy(matrixB);\n\t\tif (matrixB.isIdentity) return self.copy(matrixA);\n\n\t\tconst { _elements } = self;\n\t\tconst ae = matrixA.elements;\n\t\tconst be = matrixB.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 1 ], a13 = ae[ 2 ], a14 = ae[ 3 ];\n\t\tconst a21 = ae[ 4 ], a22 = ae[ 5 ], a23 = ae[ 6 ], a24 = ae[ 7 ];\n\t\tconst a31 = ae[ 8 ], a32 = ae[ 9 ], a33 = ae[ 10 ], a34 = ae[ 11 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 1 ], b13 = be[ 2 ], b14 = be[ 3 ];\n\t\tconst b21 = be[ 4 ], b22 = be[ 5 ], b23 = be[ 6 ], b24 = be[ 7 ];\n\t\tconst b31 = be[ 8 ], b32 = be[ 9 ], b33 = be[ 10 ], b34 = be[ 11 ];\n\n\t\t_elements[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t_elements[1] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t_elements[2] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t_elements[3] = a11 * b14 + a12 * b24 + a13 * b34 + a14;\n\n\t\t_elements[4] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t_elements[5] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t_elements[6] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t_elements[7] = a21 * b14 + a22 * b24 + a23 * b34 + a24;\n\n\t\t_elements[8] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t_elements[9] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t_elements[10] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t_elements[11] = a31 * b14 + a32 * b24 + a33 * b34 + a34;\n\n\t\tself._isIdentity = Matrix4._checkElementsForIdentity(_elements);\n\t\treturn self;\n\t}\n\n\tsetTranslation(translation: Vector3Readonly | THREE_Vector3) {\n\t\tif (Math.abs(translation.x) <= NUMERICAL_TOLERANCE() && Math.abs(translation.y) <= NUMERICAL_TOLERANCE() && Math.abs(translation.z) <= NUMERICAL_TOLERANCE()) return this.setIdentity();\n\t\tthis._set(\n\t\t\t1, 0, 0, translation.x,\n\t\t\t0, 1, 0, translation.y,\n\t\t\t0, 0, 1, translation.z,\n\t\t);\n\t \tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to rotation about axis.\n\t * @param axis - Unit vector around which to rotate, must be normalized.\n\t * @param angle - Angle of rotation in radians.\n\t * @param offset - Offset vector.\n\t * @returns this\n\t */\n\tsetRotationAxisAngleAtOffset(\n\t\taxis: Vector3Readonly | THREE_Vector3,\n\t\tangle: number,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\tif (Math.abs(angle) <= NUMERICAL_TOLERANCE()) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\tconst cosAngle = Math.cos(angle);\n\t\tconst sinAngle = Math.sin(angle);\n\t\treturn this._setRotationAxisCosSin(cosAngle, sinAngle, axis, offset);\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to rotation from one vector to another.\n\t * @param fromVector - Unit vector to rotate from, must be normalized.\n\t * @param toVector - Unit vector to rotate to, must be normalized.\n\t * @returns this\n\t */\n\tsetRotationFromVectorToVector(\n\t\tfromVector: Vector3Readonly,\n\t\ttoVector: Vector3Readonly,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t): Matrix4;\n\tsetRotationFromVectorToVector(\n\t\tfromVector: THREE_Vector3,\n\t\ttoVector: THREE_Vector3,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t): Matrix4;\n\tsetRotationFromVectorToVector(\n\t\tfromVector: any,\n\t\ttoVector: any,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t): Matrix4 {\n        // Check for no rotation.\n\t\tif (fromVector.equals(toVector)) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\tconst axis = tempVector3.copy(fromVector).cross(toVector);\n\t\tlet sinAngle = axis.length();\n        if (sinAngle <= NUMERICAL_TOLERANCE()) {\n            sinAngle = 0;\n            // Vectors are perfectly opposite, chose any axis orthogonal to fromVector.\n            axis.set(fromVector.y, -fromVector.x, 0);\n            let axisLength = axis.length();\n            /* c8 ignore next 4 */\n            if (axisLength <= NUMERICAL_TOLERANCE()) { // Just in case.\n                axis.set(-fromVector.z, 0, fromVector.x);\n                axisLength = axis.length();\n            }\n            axis.divideScalar(axisLength); // Normalize axis.\n        } else {\n            axis.divideScalar(sinAngle); // Normalize axis.\n        }\n        const cosAngle = fromVector.dot(toVector);\n\t\treturn this._setRotationAxisCosSin(cosAngle, sinAngle, axis, offset);\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to reflection.\n\t * @param normal - Unit vector about which to reflect, must be normalized.\n\t * @param offset - Offset vector of reflection.\n\t * @returns this\n\t */\n\tsetReflectionNormalAtOffset(\n\t\tnormal: Vector3Readonly | THREE_Vector3,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\t// To do this we need to calculate T * R * (-T).\n\t\t// Based on https://math.stackexchange.com/questions/693414/reflection-across-the-plane\n\t\t// First calc R.\n\t\tconst nx = normal.x;\n\t\tconst ny = normal.y;\n\t\tconst nz = normal.z;\n\t\tconst r11 = 1 - 2 * nx * nx,\tr12 = -2 * nx * ny,\t\tr13 = -2 * nx * nz;\n\t\tconst r21 = r12,\t\t\t\tr22 = 1 - 2 * ny * ny,\tr23 = -2 * ny * nz;\n\t\tconst r31 = r13,\t\t\t\tr32 = r23,\t\t\t\tr33 = 1 - 2 * nz * nz;\n\t\tif (offset) {\n\t\t\tthis._setRotationMatrixAtOffset(\n\t\t\t\tr11, r12, r13,\n\t\t\t\tr21, r22, r23,\n\t\t\t\tr31, r32, r33,\n\t\t\t\toffset,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._set(\n\t\t\t\tr11, r12, r13, 0,\n\t\t\t\tr21, r22, r23, 0,\n\t\t\t\tr31, r32, r33, 0,\n\t\t\t);\n\t\t}\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\tprivate _setRotationAxisCosSin(cosAngle: number, sinAngle: number, axis: Vector3Readonly | THREE_Vector3, offset?: Vector3Readonly | THREE_Vector3) {\n\t\t// To do this we need to calculate T * R * (-T).\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t// First calc R.\n\t\tconst t = 1 - cosAngle;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst t_x = t * x, t_y = t * y;\n\t\tconst r11 = t_x * x + cosAngle,\t\tr12 = t_x * y - sinAngle * z,\tr13 = t_x * z + sinAngle * y;\n\t\tconst r21 = t_x * y + sinAngle * z,\tr22 = t_y * y + cosAngle,\t\tr23 = t_y * z - sinAngle * x;\n\t\tconst r31 = t_x * z - sinAngle * y,\tr32 = t_y * z + sinAngle * x,\tr33 = t * z * z + cosAngle;\n\t\tif (offset) {\n\t\t\tthis._setRotationMatrixAtOffset(\n\t\t\t\tr11, r12, r13,\n\t\t\t\tr21, r22, r23,\n\t\t\t\tr31, r32, r33,\n\t\t\t\toffset,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._set(\n\t\t\t\tr11, r12, r13, 0,\n\t\t\t\tr21, r22, r23, 0,\n\t\t\t\tr31, r32, r33, 0,\n\t\t\t);\n\t\t}\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\tprivate _setRotationMatrixAtOffset(\n\t\tr11: number, r12: number, r13: number,\n\t\tr21: number, r22: number, r23: number,\n\t\tr31: number, r32: number, r33: number,\n\t\toffset: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\t// Apply T * R * (-T).\n\t\t// Pre-multiply R by T and post multiply by -T.\n\t\t// This is a bit confusing to follow, but it reduces the amount of operations in the calc.\n\t\tconst tx = -offset.x * (r11 - 1) - offset.y * r12 - offset.z * r13;\n\t\tconst ty = -offset.x * r21 - offset.y * (r22 - 1) - offset.z * r23;\n\t\tconst tz = -offset.x * r31 - offset.y * r32 - offset.z * (r33 - 1);\n\t\tthis._set(\n\t\t\tr11, r12, r13, tx,\n\t\t\tr21, r22, r23, ty,\n\t\t\tr31, r32, r33, tz,\n\t\t);\n\t}\n\n\t/**\n\t * Invert the current transform.\n\t * https://math.stackexchange.com/questions/1234948/inverse-of-a-rigid-transformation\n\t * @returns this\n\t */\n\tinvertTransform() {\n\t\tif (this._isIdentity) return this;\n\t\tconst { _elements } = this;\n\t\t// The inverted 3x3 rotation matrix is equal to its transpose: rTrans.\n\t\tconst rTrans11 = _elements[0], rTrans12 = _elements[4], rTrans13 = _elements[8];\n\t\tconst rTrans21 = _elements[1], rTrans22 = _elements[5], rTrans23 = _elements[9];\n\t\tconst rTrans31 = _elements[2], rTrans32 = _elements[6], rTrans33 = _elements[10];\n\t\t// The inverted translation is -rTrans * t.\n\t\tconst t1 = _elements[3], t2 = _elements[7], t3 = _elements[11];\n\t\tconst t1Inv = -rTrans11 * t1 - rTrans12 * t2 - rTrans13 * t3;\n\t\tconst t2Inv = -rTrans21 * t1 - rTrans22 * t2 - rTrans23 * t3;\n\t\tconst t3Inv = -rTrans31 * t1 - rTrans32 * t2 - rTrans33 * t3;\n\t\tthis._set(\n\t\t\trTrans11, rTrans12, rTrans13, t1Inv,\n\t\t\trTrans21, rTrans22, rTrans23, t2Inv,\n\t\t\trTrans31, rTrans32, rTrans33, t3Inv,\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Test if this Matrix4 equals another Matrix4.\n\t * @param matrix - Matrix4 to test equality with.\n\t * @returns\n\t */\n\tequals(matrix: Matrix4Readonly) {\n\t\tconst elementsA = this.elements;\n\t\tconst elementsB = matrix.elements;\n\t\tfor (let i = 0, numElements = elementsA.length; i < numElements; i++) {\n\t\t\tif (Math.abs(elementsA[i] - elementsB[i]) > NUMERICAL_TOLERANCE()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Copy values from a Matrix4 into this Matrix4.\n\t * @param matrix - Matrix4 to copy.\n\t * @returns this\n\t */\n\tcopy(matrix: Matrix4Readonly) {\n\t\tconst { elements } = matrix;\n\t\tthis._set(\n\t\t\telements[0], elements[1], elements[2], elements[3],\n\t\t\telements[4], elements[5], elements[6], elements[7],\n\t\t\telements[8], elements[9], elements[10], elements[11],\n\t\t);\n\t\tthis._isIdentity = matrix.isIdentity;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a deep copy of this Matrix4.\n\t */\n\tclone() {\n\t\tconst { _elements } = this;\n\t\tconst clone = new Matrix4(\n\t\t\t_elements[0], _elements[1], _elements[2], _elements[3],\n\t\t\t_elements[4], _elements[5], _elements[6], _elements[7],\n\t\t\t_elements[8], _elements[9], _elements[10], _elements[11],\n\t\t\tthis._isIdentity,\n\t\t);\n\t\treturn clone;\n\t}\n}","import type { Vector3Readonly } from './Vector3';\nimport type {\n\tQuaternion as THREE_Quaternion,\n\tVector3 as THREE_Vector3,\n} from 'three';\nimport { getStackTraceAsString } from './utils';\nimport { NUMERICAL_TOLERANCE } from './constants';\n\nexport type QuaternionReadonly = {\n\treadonly x: number;\n\treadonly y: number;\n\treadonly z: number;\n\treadonly w: number;\n\treadonly lengthSq: () => number;\n\treadonly length: () => number;\n\treadonly clone: () => Quaternion;\n}\n\nexport class Quaternion {\n\tprivate _x;\n\tprivate _y;\n\tprivate _z;\n\tprivate _w;\n\n\t/**\n\t * @param x - Defaults to 0.\n\t * @param y - Defaults to 0.\n\t * @param z - Defaults to 0.\n\t * @param w - Defaults to 1.\n\t */\n\tconstructor();\n\tconstructor(x: number, y: number, z: number, w: number);\n\tconstructor(x?: number, y?: number, z?: number, w?: number) {\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = w !== undefined ? w : 1;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset x(x: number) {\n\t\tthrow new Error('No x setter on Quaternion.');\n\t}\n\n\tget x() {\n\t\treturn this._x;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset y(y: number) {\n\t\tthrow new Error('No y setter on Quaternion.');\n\t}\n\n\tget y() {\n\t\treturn this._y;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset z(z: number) {\n\t\tthrow new Error('No z setter on Quaternion.');\n\t}\n\n\tget z() {\n\t\treturn this._z;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset w(w: number) {\n\t\tthrow new Error('No w setter on Quaternion.');\n\t}\n\n\tget w() {\n\t\treturn this._w;\n\t}\n\n\t/**\n\t * Set quaternion from two unit vectors.\n\t * @param vFrom - From unit vector (normalized).\n\t * @param vTo - To unit vector (normalized).\n\t * @returns this\n\t */\n\tsetFromUnitVectors(\n\t\tvFrom: Vector3Readonly | THREE_Vector3,\n\t\tvTo: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\tlet r = vFrom.x * vTo.x + vFrom.y * vTo.y + vFrom.z * vTo.z + 1;\n\t\tif ( r <= Number.EPSILON ) { // TODO: better epsilon?\n\t\t\t// vFrom and vTo point in opposite directions.\n\t\t\tr = 0;\n\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\t\t\t} else {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\t\t} else {\n\t\t\t// crossVectors( vFrom, vTo );\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\t\t}\n\t\treturn this.normalize();\n\t}\n\n\t/**\n\t * Returns the squared length of the Quaternion.\n\t */\n\tlengthSq() {\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t}\n\n\t/**\n\t * Returns the length of the Quaternion.\n\t */\n\tlength() {\n\t\treturn Math.sqrt(this.lengthSq());\n\t}\n\n\t/**\n\t * Normalize the length of this Quaternion.\n\t * @returns this\n\t */\n\tnormalize() {\n\t\tlet l = this.length();\n\t\tif (l <= NUMERICAL_TOLERANCE()) {\n\t\t\tconsole.warn(`Attempting to normalize zero length Quaternion, stack trace:\\n${getStackTraceAsString()}.`);\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\t\t} else {\n\t\t\tl = 1 / l;\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * In place quaternion multiplication of this Quaternion (A) with another Quaternion (B).\n\t * Sets value of this Quaternion to A*B.\n\t * @param quat - Quaternion to multiply with.\n\t * @returns this\n\t */\n\tmultiply(quat: QuaternionReadonly | THREE_Quaternion) {\n\t\treturn Quaternion._multiplyQuaternions(this, this, quat);\n\n\t}\n\n\t/**\n\t * In place quaternion multiplication of this Quaternion (A) with another Quaternion (B).\n\t * Sets value of this Quaternion to B*A.\n\t * @param quat - Quaternion to premultiply with.\n\t * @returns this\n\t */\n\tpremultiply(quat: QuaternionReadonly | THREE_Quaternion) {\n\t\treturn Quaternion._multiplyQuaternions(this, quat, this);\n\t}\n\n\t/**\n\t * Quaternion multiplication.\n\t */\n\tprivate static _multiplyQuaternions(\n\t\tself: Quaternion,\n\t\tquatA: QuaternionReadonly | THREE_Quaternion,\n\t\tquatB: QuaternionReadonly | THREE_Quaternion,\n\t) {\n\t\t// From http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\tconst qax = quatA.x, qay = quatA.y, qaz = quatA.z, qaw = quatA.w;\n\t\tconst qbx = quatB.x, qby = quatB.y, qbz = quatB.z, qbw = quatB.w;\n\n\t\tself._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tself._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tself._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tself._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\treturn self;\n\t}\n\n\t/**\n\t * Copy the contents of a Quaternion to this Quaternion.\n\t * @param quaternion - Quaternion to copy.\n\t * @returns this\n\t */\n\tcopy(quaternion: QuaternionReadonly | THREE_Quaternion) {\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Clone this Quaternion into a new Quaternion.\n\t */\n\tclone() {\n\t\treturn new Quaternion(this._x, this._y, this._z, this._w);\n\t}\n}","export function clampValue(value: number, min: number, max: number) {\n\treturn Math.max(Math.min(value, max), min);\n}\n\nexport function radiansToDegrees(value: number) {\n\treturn value * 180 / Math.PI;\n}\n\nexport function degreesToRadians(value: number) {\n\treturn value / 180 * Math.PI;\n}\n\nexport function roundValueToIncrement(value: number, coarseStep: number) {\n\tif (coarseStep === 0) return value;\n\tif (coarseStep < 0) throw new Error(`Invalid coarse step: ${coarseStep}.`);\n\tconst rounded = Math.round(value / coarseStep) * coarseStep;\n\t// Use a rounding trick to avoid results like 1.7999999999998 instead of 1.8.\n\tconst decimals = coarseStep.toString().split('.')[1]?.length || 0;\n\treturn parseFloat(rounded.toFixed(decimals));\n}"],"names":["numericalTolerance","NUMERICAL_TOLERANCE","getStackTraceAsString","Error","error","stack","split","map","line","trim","splice","join","Vector2","constructor","x","y","this","set","setFromArray","array","add","vec","sub","multiplyScalar","scalar","divideScalar","Math","abs","console","warn","dot","cross","angle","atan2","PI","lengthSq","length","sqrt","distanceToSquared","dx","dy","distanceTo","normalize","applyMatrix3","matrix","isIdentity","e","elements","lerp","vector","t","average","invert","angleTo","theta","acos","min","max","angleToNormalized","copy","equals","isZero","clone","toArray","Vector3","z","ax","ay","az","bx","by","bz","dz","applyMatrix4","applyMatrix4RotationComponent","applyQuaternion","quaternion","qx","qy","qz","qw","w","ix","iy","iz","iw","Matrix3","n11","n12","n13","n21","n22","n23","undefined","_elements","_isIdentity","_checkElementForIdentity","_set","setIdentity","static","setFromRotationTranslation","translation","r11","cos","r12","sin","r21","r22","tx","ty","elementsA","elementsB","i","numElements","tempVector3","Matrix4","n14","n24","n31","n32","n33","n34","_checkElementsForIdentity","premultiplyMatrix4","_multiplyMatrices","multiplyMatrix4","self","matrixA","matrixB","ae","be","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","setTranslation","setRotationAxisAngleAtOffset","axis","offset","cosAngle","sinAngle","_setRotationAxisCosSin","setRotationFromVectorToVector","fromVector","toVector","axisLength","setReflectionNormalAtOffset","normal","nx","ny","nz","r13","r23","r31","r32","r33","_setRotationMatrixAtOffset","t_x","t_y","tz","invertTransform","rTrans11","rTrans12","rTrans13","rTrans21","rTrans22","rTrans23","rTrans31","rTrans32","rTrans33","t1","t2","t3","t1Inv","t2Inv","t3Inv","Quaternion","_x","_y","_z","_w","setFromUnitVectors","vFrom","vTo","r","Number","EPSILON","l","multiply","quat","_multiplyQuaternions","premultiply","quatA","quatB","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","value","coarseStep","rounded","round","decimals","_a","toString","parseFloat","toFixed","tolerance"],"mappings":"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"}