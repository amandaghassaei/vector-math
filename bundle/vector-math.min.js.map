{"version":3,"file":"vector-math.min.js","sources":["../src/constants.ts","../src/utils.ts","../src/Vector2.ts","../src/Vector3.ts","../src/Matrix3.ts","../src/common.ts","../src/Matrix4.ts","../src/Quaternion.ts","../src/Number.ts"],"sourcesContent":["/**\n * Default numerical tolerance for all mathematical operations and equality checks.\n */\nexport const DEFAULT_NUMERICAL_TOLERANCE = 1e-15;\n\nlet numericalTolerance = DEFAULT_NUMERICAL_TOLERANCE;\n\n/**\n * Set global numerical tolerance for all mathematical operations and equality checks.\n * Default numerical tolerance is 1e-15.\n * @param tolerance - Numerical tolerance to set.\n */\nexport function setNumericalTolerance(tolerance: number) {\n    numericalTolerance = tolerance;\n}\n\n/**\n * Get global numerical tolerance for all mathematical operations and equality checks.\n */\nexport function NUMERICAL_TOLERANCE() {\n    return numericalTolerance;\n}","export function getStackTraceAsString(): string {\n    try {\n        throw new Error('');\n    } catch (error: any) {\n        /* c8 ignore next 1 */\n        const stackString: string = error.stack || '';\n        const stack = stackString.split('\\n').map((line) => line.trim());\n        stack.splice(0, 2); // Remove first two elements (just points to this function).\n        return stack.join('\\n');\n    }\n}\n","import type { Matrix3Readonly } from './Matrix3';\nimport type { THREE_Vector2 } from './THREE_types';\nimport { getStackTraceAsString } from './utils';\nimport { NUMERICAL_TOLERANCE } from './constants';\n\nexport type Vector2Readonly = {\n    readonly x: number;\n    readonly y: number;\n    dot: (vec: Vector2Readonly | THREE_Vector2) => number;\n    cross: (vec: Vector2Readonly | THREE_Vector2) => number;\n    angle: () => number;\n    lengthSq: () => number;\n    length: () => number;\n    distanceToSquared: (vec: Vector2Readonly | THREE_Vector2) => number;\n    distanceTo: (vec: Vector2Readonly | THREE_Vector2) => number;\n    angleTo: (vec: Vector2Readonly | THREE_Vector2) => number;\n    angleToNormalized: (vec: Vector2Readonly | THREE_Vector2) => number;\n    equals: (vec: Vector2Readonly | THREE_Vector2) => boolean;\n    isZero: () => boolean;\n    clone: () => Vector2;\n    toArray: () => [number, number];\n};\n\nexport class Vector2 {\n    x: number;\n    y: number;\n\n    /**\n     * @param x - Defaults to 0.\n     * @param y - Defaults to 0.\n     */\n    constructor();\n    constructor(x: number, y: number);\n    constructor(x?: number, y?: number) {\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n\n    /**\n     * Set the contents of a Vector2.\n     * @param x - x component.\n     * @param y - y component.\n     * @returns this\n     */\n    set(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    /**\n     * Set the contents of a Vector3 from an array.\n     * @param array - Array containing x, and y components.\n     * @returns this\n     */\n    setFromArray(array: readonly [number, number]) {\n        this.x = array[0];\n        this.y = array[1];\n        return this;\n    }\n\n    /**\n     * Fill all components of this Vector2 with the same value.\n     * @param value - Value to fill all components with.\n     * @returns \n     */\n    fill(value: number) {\n        this.x = value;\n        this.y = value;\n        return this;\n    }\n\n    /**\n     * Add a Vector2 to this Vector2.\n     * @param vec - Vector2 to add.\n     * @returns this\n     */\n    add(vec: Vector2Readonly | THREE_Vector2) {\n        this.x += vec.x;\n        this.y += vec.y;\n        return this;\n    }\n\n    /**\n     * Subtract a Vector2 from this Vector2.\n     * @param vec - Vector2 to subtract.\n     * @returns this\n     */\n    sub(vec: Vector2Readonly | THREE_Vector2) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n        return this;\n    }\n\n    /**\n     * Multiply this Vector2 by scalar value.\n     * @param scalar - Scalar to multiply.\n     * @returns this\n     */\n    multiplyScalar(scalar: number) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n\n    /**\n     * Divide this Vector2 by scalar value.\n     * @param scalar - Scalar to divide.\n     * @returns this\n     */\n    divideScalar(scalar: number) {\n        if (Math.abs(scalar) <= NUMERICAL_TOLERANCE())\n            console.warn(\n                `Dividing by zero in Vector2.divideScalar(), stack trace:\\n${getStackTraceAsString()}.`\n            );\n        return this.multiplyScalar(1 / scalar);\n    }\n\n    /**\n     * Returns the dot product of this Vector2 with another Vector2.\n     * @param vec - Vector2 to dot with.\n     * @returns The dot product.\n     */\n    dot(vec: Vector2Readonly | THREE_Vector2) {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n    // /**\n    //  * Returns the dot product of two Vector2s.\n    //  * @param vec1 - First Vector2.\n    //  * @param vec2 - Second Vector2.\n    //  * @returns The dot product.\n    //  */\n    // static dot(vec1: Vector2Readonly | THREE_Vector2, vec2: Vector2Readonly | THREE_Vector2) {\n    //     return vec1.x * vec2.x + vec1.y * vec2.y;\n    // }\n\n    /**\n     * Compute the 2D cross product (wedge product) with another Vector2.\n     * @param vec - Vector2 to cross.\n     * @returns The cross product.\n     */\n    cross(vec: Vector2Readonly | THREE_Vector2) {\n        return this.x * vec.y - this.y * vec.x;\n    }\n\n    // /**\n    //  * Compute the 2D cross product (wedge product) of two Vector2s.\n    //  * @param vec1 - First Vector2.\n    //  * @param vec2 - Second Vector2.\n    //  * @returns The cross product.\n    //  */\n    // static cross(vec1: Vector2Readonly | THREE_Vector2, vec2: Vector2Readonly | THREE_Vector2) {\n    //     return vec1.x * vec2.y - vec1.y * vec2.x;\n    // }\n\n    /**\n     * Get the angle of this Vector2.\n     * Computes the angle in radians with respect to the positive x-axis.\n     * Angle is always in range [0, 2 * Math.PI] (and 2 * Math.PI is slightly less than 2 * PI).\n     * @returns The angle.\n     */\n    angle() {\n        return Math.atan2(-this.y, -this.x) + Math.PI;\n    }\n\n    /**\n     * Returns the squared length of the Vector2.\n     * @returns The squared length.\n     */\n    lengthSq() {\n        const lengthSq = this.dot(this);\n        return lengthSq;\n    }\n\n    /**\n     * Returns the length of the Vector2.\n     * @returns The length.\n     */\n    length() {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    /**\n     * Returns the squared distance between this Vector2 and another Vector2.\n     * @param vec - Vector2 to measure distance to.\n     * @returns The squared distance.\n     */\n    distanceToSquared(vec: Vector2Readonly | THREE_Vector2) {\n        const dx = this.x - vec.x;\n        const dy = this.y - vec.y;\n        return dx * dx + dy * dy;\n    }\n\n    /**\n     * Returns the distance between this Vector2 and another Vector2.\n     * @param vec - Vector2 to measure distance to.\n     * @returns The distance.\n     */\n    distanceTo(vec: Vector2Readonly | THREE_Vector2) {\n        return Math.sqrt(this.distanceToSquared(vec));\n    }\n\n    /**\n     * Normalize the length of this Vector2.\n     * @returns this\n     */\n    normalize() {\n        let length = this.length();\n        if (length <= NUMERICAL_TOLERANCE()) {\n            console.warn(\n                `Attempting to normalize zero length Vector2, stack trace:\\n${getStackTraceAsString()}.`\n            );\n            length = 1;\n        }\n        this.divideScalar(length);\n        return this;\n    }\n\n    /**\n     * Apply Matrix3 transformation to this Vector2.\n     * @param matrix - Matrix3 to apply.\n     * @returns this\n     */\n    applyMatrix3(matrix: Matrix3Readonly) {\n        if (matrix.isIdentity) return this;\n        const x = this.x,\n            y = this.y;\n        const e = matrix.elements;\n        this.x = e[0] * x + e[1] * y + e[2];\n        this.y = e[3] * x + e[4] * y + e[5];\n        return this;\n    }\n\n    /**\n     * Linearly interpolate between this Vector2 and another Vector2.\n     * @param vector - Vector2 to lerp to.\n     * @param t - Interpolation factor between 0 and 1.\n     * @returns this\n     */\n    lerp(vector: Vector2Readonly | THREE_Vector2, t: number) {\n        this.x += (vector.x - this.x) * t;\n        this.y += (vector.y - this.y) * t;\n        return this;\n    }\n\n    /**\n     * Average this Vector2 with another Vector2.\n     * @param vector - Vector2 to average with.\n     * @returns this\n     */\n    average(vector: Vector2Readonly | THREE_Vector2) {\n        this.x = (this.x + vector.x) / 2;\n        this.y = (this.y + vector.y) / 2;\n        return this;\n    }\n\n    /**\n     * Min this Vector3 with another Vector3.\n     * @param vector - Vector3 to min with.\n     * @returns this\n     */\n    min(vector: Vector2Readonly | THREE_Vector2) {\n        this.x = Math.min(this.x, vector.x);\n        this.y = Math.min(this.y, vector.y);\n        return this;\n    }\n\n    /**\n     * Max this Vector2 with another Vector2.\n     * @param vector - Vector2 to max with.\n     * @returns this\n     */\n    max(vector: Vector2Readonly | THREE_Vector2) {\n        this.x = Math.max(this.x, vector.x);\n        this.y = Math.max(this.y, vector.y);\n        return this;\n    }\n\n    /**\n     * Invert this Vector2.\n     * @returns this\n     */\n    invert() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    /**\n     * Calculate the angle between this Vector2 and another Vector2.\n     * @param vector - Vector2 to calculate angle to.\n     * @returns The angle between the vectors.\n     */\n    angleTo(vector: Vector2Readonly | THREE_Vector2) {\n        const theta = this.dot(vector) / Math.sqrt(this.lengthSq() * vector.lengthSq());\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    // /**\n    //  * Calculate the angle between two Vector2s.\n    //  * @param vec1 - First Vector2.\n    //  * @param vec2 - Second Vector2.\n    //  * @returns The angle between the vectors.\n    //  */\n    // static angleTo(vec1: Vector2Readonly | THREE_Vector2, vec2: Vector2Readonly | THREE_Vector2) {\n    //     const theta = Vector2.dot(vec1, vec2) / Math.sqrt(vec1.lengthSq() * vec2.lengthSq());\n    //     return Math.acos(Math.min(Math.max(theta, -1), 1));\n    // }\n\n    /**\n     * Calculate the angle between this (normalized) Vector2 and another (normalized) Vector2.\n     * @param vector - Vector2 to calculate angle to.\n     * @returns The angle between the vectors.\n     */\n    angleToNormalized(vector: Vector2Readonly | THREE_Vector2) {\n        const theta = this.dot(vector);\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    // /**\n    //  * Calculate the angle between a (normalized) Vector2 and another (normalized) Vector2.\n    //  * @param vec1 - First Vector2.\n    //  * @param vec2 - Second Vector2.\n    //  * @returns The angle between the vectors.\n    //  */\n    // static angleToNormalized(vec1: Vector2Readonly | THREE_Vector2, vec2: Vector2Readonly | THREE_Vector2) {\n    //     const theta = Vector2.dot(vec1, vec2);\n    //     return Math.acos(Math.min(Math.max(theta, -1), 1));\n    // }\n\n    /**\n     * Copy the contents of a Vector2 to this Vector2.\n     * @param vec - Vector2 to copy.\n     * @returns this\n     */\n    copy(vec: Vector2Readonly | THREE_Vector2) {\n        this.x = vec.x;\n        this.y = vec.y;\n        return this;\n    }\n\n    /**\n     * Test if this Vector2 equals another Vector2.\n     * @param vec - Vector2 to test equality with.\n     * @param tolerance - Optional numerical tolerance for equality check, defaults to global numerical tolerance.\n     * @returns True if the vectors are equal.\n     */\n    equals(vec: Vector2Readonly | THREE_Vector2, tolerance = NUMERICAL_TOLERANCE()) {\n        return Math.abs(this.x - vec.x) <= tolerance && Math.abs(this.y - vec.y) <= tolerance;\n    }\n\n    // /**\n    //  * Test if two Vector2s are equal.\n    //  * @param vec1 - First Vector2.\n    //  * @param vec2 - Second Vector2.\n    //  * @param tolerance - Optional numerical tolerance for equality check, defaults to global numerical tolerance.\n    //  * @returns True if the vectors are equal.\n    //  */\n    // static equals(vec1: Vector2Readonly | THREE_Vector2, vec2: Vector2Readonly | THREE_Vector2, tolerance = NUMERICAL_TOLERANCE()) {\n    //     return Math.abs(vec1.x - vec2.x) <= tolerance && Math.abs(vec1.y - vec2.y) <= tolerance;\n    // }\n\n    /**\n     * Test if this vector is the zero vector.\n     * @param tolerance - Optional numerical tolerance for zero check, defaults to global numerical tolerance.\n     * @returns True if the vector is the zero vector.\n     */\n    isZero(tolerance = NUMERICAL_TOLERANCE()) {\n        return Math.abs(this.x) <= tolerance && Math.abs(this.y) <= tolerance;\n    }\n\n    /**\n     * Clone this Vector2 into a new Vector2.\n     * @returns The cloned Vector2.\n     */\n    clone() {\n        return new Vector2(this.x, this.y);\n    }\n\n    /**\n     * Returns an array containing the x and y components of this Vector3.\n     * @returns The Vector2 as an array.\n     */\n    toArray() {\n        return [this.x, this.y] as [number, number];\n    }\n}\n","import type { Matrix4Readonly } from './Matrix4';\nimport type { QuaternionReadonly } from './Quaternion';\nimport type { THREE_Vector3, THREE_Quaternion } from './THREE_types';\nimport { getStackTraceAsString } from './utils';\nimport { NUMERICAL_TOLERANCE } from './constants';\n\nexport type Vector3Readonly = {\n    readonly x: number;\n    readonly y: number;\n    readonly z: number;\n    dot: (vec: Vector3Readonly | THREE_Vector3) => number;\n    lengthSq: () => number;\n    length: () => number;\n    distanceToSquared: (vec: Vector3Readonly | THREE_Vector3) => number;\n    distanceTo: (vec: Vector3Readonly | THREE_Vector3) => number;\n    angleTo: (vec: Vector3Readonly | THREE_Vector3) => number;\n    angleToNormalized: (vec: Vector3Readonly | THREE_Vector3) => number;\n    equals: (vec: Vector3Readonly | THREE_Vector3) => boolean;\n    isZero: () => boolean;\n    clone: () => Vector3;\n    toArray: () => [number, number, number];\n};\n\nexport class Vector3 {\n    x: number;\n    y: number;\n    z: number;\n\n    /**\n     * @param x - Defaults to 0.\n     * @param y - Defaults to 0.\n     * @param z - Defaults to 0.\n     */\n    constructor();\n    constructor(x: number, y: number, z: number);\n    constructor(x?: number, y?: number, z?: number) {\n        this.x = x || 0;\n        this.y = y || 0;\n        this.z = z || 0;\n    }\n\n    /**\n     * Set the contents of a Vector3.\n     * @param x - x component.\n     * @param y - y component.\n     * @param z - z component.\n     * @returns this\n     */\n    set(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    }\n\n    /**\n     * Set the contents of a Vector3 from an array.\n     * @param array - Array containing x, y, and z components.\n     * @returns this\n     */\n    setFromArray(array: readonly [number, number, number]) {\n        this.x = array[0];\n        this.y = array[1];\n        this.z = array[2];\n        return this;\n    }\n\n    /**\n     * Fill all components of this Vector3 with the same value.\n     * @param value - Value to fill all components with.\n     * @returns \n     */\n    fill(value: number) {\n        this.x = value;\n        this.y = value;\n        this.z = value;\n        return this;\n    }\n\n    /**\n     * Add a Vector3 to this Vector3.\n     * @param vec - Vector3 to add.\n     * @returns this\n     */\n    add(vec: Vector3Readonly | THREE_Vector3) {\n        this.x += vec.x;\n        this.y += vec.y;\n        this.z += vec.z;\n        return this;\n    }\n\n    /**\n     * Subtract a Vector3 from this Vector3.\n     * @param vec - Vector3 to subtract.\n     * @returns this\n     */\n    sub(vec: Vector3Readonly | THREE_Vector3) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n        this.z -= vec.z;\n        return this;\n    }\n\n    /**\n     * Multiply this Vector3 by scalar value.\n     * @param scalar - Scalar to multiply.\n     * @returns this\n     */\n    multiplyScalar(scalar: number) {\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n        return this;\n    }\n\n    /**\n     * Divide this Vector3 by scalar value.\n     * @param scalar - Scalar to divide.\n     * @returns this\n     */\n    divideScalar(scalar: number) {\n        if (Math.abs(scalar) <= NUMERICAL_TOLERANCE())\n            console.warn(\n                `Dividing by zero in Vector3.divideScalar(), stack trace:\\n${getStackTraceAsString()}.`\n            );\n        return this.multiplyScalar(1 / scalar);\n    }\n\n    /**\n     * Returns the dot product of this Vector3 with another Vector3.\n     * @param vec - Vector3 to dot with.\n     * @returns dot product of this and vec.\n     */\n    dot(vec: Vector3Readonly | THREE_Vector3): number {\n        return Vector3.dot(this, vec);\n    }\n\n    /**\n     * Returns the dot product of two Vector3s.\n     * @param vec1 - First Vector3.\n     * @param vec2 - Second Vector3.\n     * @returns dot product of vec1 and vec2.\n     */\n    static dot(vec1: Vector3Readonly | THREE_Vector3, vec2: Vector3Readonly | THREE_Vector3) {\n        return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z;\n    }\n\n    /**\n     * Cross this Vector3 with another Vector3.\n     * @param vec - Vector3 to cross with.\n     * @returns this\n     */\n    cross(vec: Vector3Readonly | THREE_Vector3) {\n        const ax = this.x,\n            ay = this.y,\n            az = this.z;\n        const bx = vec.x,\n            by = vec.y,\n            bz = vec.z;\n\n        this.x = ay * bz - az * by;\n        this.y = az * bx - ax * bz;\n        this.z = ax * by - ay * bx;\n\n        return this;\n    }\n\n    /**\n     * Returns the squared length of the Vector3.\n     * @returns Squared length of the Vector3.\n     */\n    lengthSq() {\n        const lengthSq = this.dot(this);\n        return lengthSq;\n    }\n\n    /**\n     * Returns the length of the Vector3.\n     * @returns Length of the Vector3.\n     */\n    length() {\n        return Math.sqrt(this.lengthSq());\n    }\n\n     /**\n     * Returns the squared distance between this Vector3 and another Vector3.\n     * @param vec - Vector3 to measure distance to.\n     * @returns Squared distance between this and vec.\n     */\n     distanceToSquared(vec: Vector3Readonly | THREE_Vector3) {\n        const dx = this.x - vec.x;\n        const dy = this.y - vec.y;\n        const dz = this.z - vec.z;\n        return dx * dx + dy * dy + dz * dz;\n    }\n\n    /**\n     * Returns the distance between this Vector3 and another Vector3.\n     * @param vec - Vector3 to measure distance to.\n     * @returns Distance between this and vec.\n     */\n    distanceTo(vec: Vector3Readonly | THREE_Vector3) {\n        return Math.sqrt(this.distanceToSquared(vec));\n    }\n\n    /**\n     * Normalize the length of this Vector3.\n     * @returns this\n     */\n    normalize() {\n        let length = this.length();\n        if (length <= NUMERICAL_TOLERANCE()) {\n            console.warn(\n                `Attempting to normalize zero length Vector3, stack trace:\\n${getStackTraceAsString()}.`\n            );\n            length = 1;\n        }\n        this.divideScalar(length);\n        return this;\n    }\n\n    /**\n     * Apply Matrix4 transformation to this Vector3.\n     * @param matrix - Matrix4 to apply.\n     * @returns this\n     */\n    applyMatrix4(matrix: Matrix4Readonly) {\n        if (matrix.isIdentity) return this;\n        const x = this.x,\n            y = this.y,\n            z = this.z;\n        const e = matrix.elements;\n        this.x = e[0] * x + e[1] * y + e[2] * z + e[3];\n        this.y = e[4] * x + e[5] * y + e[6] * z + e[7];\n        this.z = e[8] * x + e[9] * y + e[10] * z + e[11];\n        return this;\n    }\n\n    /**\n     * Apply Matrix4 rotation component (ignore translation) to this Vector3.\n     * @param matrix - Matrix4 to apply.\n     * @returns this\n     */\n    applyMatrix4RotationComponent(matrix: Matrix4Readonly) {\n        if (matrix.isIdentity) return this;\n        const x = this.x,\n            y = this.y,\n            z = this.z;\n        const e = matrix.elements;\n        this.x = e[0] * x + e[1] * y + e[2] * z;\n        this.y = e[4] * x + e[5] * y + e[6] * z;\n        this.z = e[8] * x + e[9] * y + e[10] * z;\n        return this;\n    }\n\n    /**\n     * Apply Quaternion transformation to this Vector3.\n     * @param quaternion - Quaternion to apply.\n     * @returns this\n     */\n    applyQuaternion(quaternion: QuaternionReadonly | THREE_Quaternion) {\n        const x = this.x,\n            y = this.y,\n            z = this.z;\n        const qx = quaternion.x,\n            qy = quaternion.y,\n            qz = quaternion.z,\n            qw = quaternion.w;\n        // Calculate quat * vector.\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n        // Calculate result * inverse quat.\n        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n        return this;\n    }\n\n    /**\n     * Linearly interpolate between this Vector3 and another Vector3.\n     * @param vector - Vector3 to lerp to.\n     * @param t - Interpolation factor between 0 and 1.\n     * @returns this\n     */\n    lerp(vector: Vector3Readonly | THREE_Vector3, t: number) {\n        this.x += (vector.x - this.x) * t;\n        this.y += (vector.y - this.y) * t;\n        this.z += (vector.z - this.z) * t;\n        return this;\n    }\n\n    /**\n     * Average this Vector3 with another Vector3.\n     * @param vector - Vector3 to average with.\n     * @returns this\n     */\n    average(vector: Vector3Readonly | THREE_Vector3) {\n        this.x = (this.x + vector.x) / 2;\n        this.y = (this.y + vector.y) / 2;\n        this.z = (this.z + vector.z) / 2;\n        return this;\n    }\n\n    /**\n     * Min this Vector3 with another Vector3.\n     * @param vector - Vector3 to min with.\n     * @returns this\n     */\n    min(vector: Vector3Readonly | THREE_Vector3) {\n        this.x = Math.min(this.x, vector.x);\n        this.y = Math.min(this.y, vector.y);\n        this.z = Math.min(this.z, vector.z);\n        return this;\n    }\n\n    /**\n     * Max this Vector3 with another Vector3.\n     * @param vector - Vector3 to max with.\n     * @returns this\n     */\n    max(vector: Vector3Readonly | THREE_Vector3) {\n        this.x = Math.max(this.x, vector.x);\n        this.y = Math.max(this.y, vector.y);\n        this.z = Math.max(this.z, vector.z);\n        return this;\n    }\n\n    /**\n     * Invert this Vector3.\n     * @returns this\n     */\n    invert() {\n        this.x = -this.x;\n        this.y = -this.y;\n        this.z = -this.z;\n        return this;\n    }\n\n    /**\n     * Calculate the angle between this Vector3 and another Vector3.\n     * @param vector - Vector3 to calculate angle to.\n     * @returns Angle between this and vector.\n     */\n    angleTo(vector: Vector3Readonly | THREE_Vector3) {\n        const theta = this.dot(vector) / Math.sqrt(this.lengthSq() * vector.lengthSq());\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    /**\n     * Calculate the angle between this (normalized) Vector3 and another (normalized) Vector3.\n     * @param vector - Vector3 to calculate angle to.\n     * @returns Angle between this and vector.\n     */\n    angleToNormalized(vector: Vector3Readonly | THREE_Vector3) {\n        const theta = this.dot(vector);\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    /**\n     * Copy the contents of a Vector3 to this Vector3.\n     * @param vec - Vector3 to copy.\n     * @returns this\n     */\n    copy(vec: Vector3Readonly | THREE_Vector3) {\n        this.x = vec.x;\n        this.y = vec.y;\n        this.z = vec.z;\n        return this;\n    }\n\n    /**\n     * Test if this Vector3 equals another Vector3.\n     * @param vec - Vector3 to test equality with.\n     * @param tolerance - Defaults to 0.\n     * @returns True if the vectors are equal.\n     */\n    equals(vec: Vector3Readonly | THREE_Vector3, tolerance = NUMERICAL_TOLERANCE()): boolean {\n        return Vector3.equals(this, vec, tolerance);\n    }\n\n    /**\n     * Test if two Vector3s are equal (within numerical tolerance).\n     * @param vec1 - First Vector3.\n     * @param vec2 - Second Vector3.\n     * @param tolerance - Optional numerical tolerance for equality check, defaults to global numerical tolerance.\n     * @returns True if the vectors are equal.\n     */\n    static equals(vec1: Vector3Readonly | THREE_Vector3, vec2: Vector3Readonly | THREE_Vector3, tolerance = NUMERICAL_TOLERANCE()) {\n        return (\n            Math.abs(vec1.x - vec2.x) <= tolerance &&\n            Math.abs(vec1.y - vec2.y) <= tolerance &&\n            Math.abs(vec1.z - vec2.z) <= tolerance\n        )\n    }\n\n    /**\n     * Test if this vector is the zero vector.\n     * @param tolerance - Optional numerical tolerance for zero check, defaults to global numerical tolerance.\n     * @returns True if the vector is the zero vector.\n     */\n    isZero(tolerance = NUMERICAL_TOLERANCE()) {\n        return this.x <= tolerance && this.y <= tolerance && this.z <= tolerance;\n    }\n\n    /**\n     * Clone this Vector3 into a new Vector3.\n     */\n    clone() {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    /**\n     * Returns an array containing the x, y, and z components of this Vector3.\n     */\n    toArray() {\n        return [this.x, this.y, this.z] as [number, number, number];\n    }\n}\n","import { NUMERICAL_TOLERANCE } from './constants';\nimport type { Vector2Readonly } from './Vector2';\nimport type { THREE_Vector2 } from './THREE_types';\n\n\nexport type Matrix3Readonly = {\n\treadonly elements: readonly number[];\n\treadonly isIdentity: boolean;\n\tequals: (matrix: Matrix3Readonly) => boolean;\n\tclone: () => Matrix3;\n}\n\n/**\n * These Matrix3s represent a rigid transform in homogeneous coords,\n * therefore, we assume that the bottom row is [0, 0, 1] and only store 6 elements.\n */\nexport class Matrix3 {\n\tprivate readonly _elements: number[];\n\tprivate _isIdentity: boolean;\n\n\t/**\n\t * If no elements passed in, defaults to identity matrix.\n\t */\n\tconstructor();\n\tconstructor(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tisIdentity?: boolean,\n\t);\n\tconstructor(\n\t\tn11?: number,\n\t\tn12?: number,\n\t\tn13?: number,\n\t\tn21?: number,\n\t\tn22?: number,\n\t\tn23?: number,\n\t\tisIdentity?: boolean,\n\t) {\n\t\tif (n11 !== undefined) {\n\t\t\tthis._elements = [\n\t\t\t\tn11, n12!, n13!,\n\t\t\t\tn21!, n22!, n23!,\n\t\t\t];\n\t\t\tthis._isIdentity = isIdentity === undefined ? Matrix3._checkElementForIdentity(this._elements) : isIdentity;\n\t\t} else {\n\t\t\tthis._elements = [\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t];\n\t\t\tthis._isIdentity = true;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset elements(elements: readonly number[]) {\n\t\tthrow new Error('No elements setter on Matrix3.');\n\t}\n\n\t/**\n\t * Returns elements of Matrix3.\n\t */\n\tget elements() {\n\t\treturn this._elements as readonly number[];\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset isIdentity(isIdentity: boolean) {\n\t\tthrow new Error('No isIdentity setter on Matrix3.');\n\t}\n\n\t/**\n\t * Returns whether Matrix3 is the identity matrix.\n\t */\n\tget isIdentity() {\n\t\treturn this._isIdentity;\n\t}\n\n\t/**\n\t * Set values element-wise.\n\t */\n\tprivate _set(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t) {\n\t\tconst { _elements } = this;\n\t\t_elements[0] = n11; _elements[1] = n12; _elements[2] = n13;\n\t\t_elements[3] = n21; _elements[4] = n22; _elements[5] = n23;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set this Matrix4 to the identity matrix.\n\t * @returns this\n\t */\n\tsetIdentity() {\n\t\tthis._set(\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t);\n\t\tthis._isIdentity = true;\n\t\treturn this;\n\t}\n\n\tprivate static _checkElementForIdentity(elements: number[]) {\n\t\tconst [\n\t\t\tn11, n12, n13,\n\t\t\tn21, n22, n23,\n\t\t] = elements;\n\t\treturn Math.abs(n11 - 1) <= NUMERICAL_TOLERANCE() && Math.abs(n22 - 1) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n12) <= NUMERICAL_TOLERANCE() && Math.abs(n13) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n21) <= NUMERICAL_TOLERANCE() && Math.abs(n23) <= NUMERICAL_TOLERANCE();\n\t}\n\n    /**\n     * Set elements of Matrix3 according to rotation.\n     * @param angle - Angle of rotation in radians.\n     * @returns this\n     */\n    setRotation(angle: number) {\n        if (Math.abs(angle) <= NUMERICAL_TOLERANCE()) {\n            return this.setIdentity();\n        }\n        const c = Math.cos(angle), s = Math.sin(angle);\n        this._set(\n            c, -s, 0,\n            s, c, 0,\n        );\n        this._isIdentity = false;\n        return this;\n    }\n\n    /**\n     * Set elements of Matrix3 according to translation.\n     * @param translation - Translation vector.\n     * @returns this\n     */\n    setTranslation(translation: Vector2Readonly | THREE_Vector2) {\n        if (Math.abs(translation.x) <= NUMERICAL_TOLERANCE() && Math.abs(translation.y) <= NUMERICAL_TOLERANCE()) {\n            return this.setIdentity();\n        }\n        this._set(\n            1, 0, translation.x,\n            0, 1, translation.y,\n        );\n        this._isIdentity = false;\n\t\treturn this;\n    }\n\n\t/**\n\t * Set elements of Matrix4 according to rotation and translation.\n\t * @param angle - Angle of rotation in radians.\n\t * @param translation - Translation vector.\n\t * @returns this\n\t */\n\tsetRotationTranslation(angle: number, translation: Vector2Readonly | THREE_Vector2) {\n\t\tif (Math.abs(angle) <= NUMERICAL_TOLERANCE() && Math.abs(translation.x) <= NUMERICAL_TOLERANCE() && Math.abs(translation.y) <= NUMERICAL_TOLERANCE()) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\t// To do this we need to calculate R(angle) * T(position).\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t// First calc R.\n\t\tconst r11 = Math.cos(angle),\tr12 = -Math.sin(angle);\n\t\tconst r21 = -r12,\t\t\t\tr22 = r11;\n\t\t// Pre-multiply T by R.\n\t\tconst tx = translation.x * r11 + translation.y * r12;\n\t\tconst ty = translation.x * r21 + translation.y * r22;\n\t\tthis._set(\n\t\t\tr11, r12, tx,\n\t\t\tr21, r22, ty,\n\t\t);\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\t// /**\n\t//  * Invert the current transform.\n\t//  * https://math.stackexchange.com/questions/1234948/inverse-of-a-rigid-transformation\n\t//  */\n\t// invertTransform() {\n\t// \tif (this._isIdentity) return this;\n\t// \tconst { _elements } = this;\n\t// \t// The inverted 2x2 rotation matrix is equal to its transpose: rTrans.\n\t// \tconst rTrans11 = _elements[0], rTrans12 = _elements[3];\n\t// \tconst rTrans21 = _elements[1], rTrans22 = _elements[4];\n\t// \t// The inverted translation is -rTrans * t.\n\t// \tconst t1 = _elements[2], t2 = _elements[5];\n\t// \tconst t1Inv = -rTrans11 * t1 - rTrans12 * t2;\n\t// \tconst t2Inv = -rTrans21 * t1 - rTrans22 * t2;\n\t// \tthis._set(\n\t// \t\trTrans11, rTrans12, t1Inv,\n\t// \t\trTrans21, rTrans22, t2Inv,\n\t// \t);\n\t// \treturn this;\n\t// }\n\n\t/**\n\t * Test if this Matrix3 equals another Matrix3.\n\t * @param matrix - Matrix3 to test equality with.\n\t * @returns\n\t */\n\tequals(matrix: Matrix3Readonly) {\n\t\tconst elementsA = this.elements;\n\t\tconst elementsB = matrix.elements;\n\t\tfor (let i = 0, numElements = elementsA.length; i < numElements; i++) {\n\t\t\tif (Math.abs(elementsA[i] - elementsB[i]) > NUMERICAL_TOLERANCE()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Copy values from a Matrix3 into this Matrix3.\n\t * @param matrix - Matrix3 to copy.\n\t * @returns this\n\t */\n\tcopy(matrix: Matrix3Readonly) {\n\t\tconst { elements } = matrix;\n\t\tthis._set(\n\t\t\telements[0], elements[1], elements[2],\n\t\t\telements[3], elements[4], elements[5],\n\t\t);\n\t\tthis._isIdentity = matrix.isIdentity;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a deep copy of this Matrix3.\n\t */\n\tclone() {\n\t\tconst { _elements } = this;\n\t\tconst clone = new Matrix3(\n\t\t\t_elements[0], _elements[1], _elements[2],\n\t\t\t_elements[3], _elements[4], _elements[5],\n\t\t\tthis._isIdentity,\n\t\t);\n\t\treturn clone;\n\t}\n}","import { Vector3 } from './Vector3';\n\nexport const tempVector3 = new Vector3();\n","import { tempVector3 } from './common';\nimport { NUMERICAL_TOLERANCE } from './constants';\nimport { Vector3, type Vector3Readonly } from './Vector3';\nimport type { THREE_Vector3 } from './THREE_types';\n\nexport type Matrix4Readonly = {\n\treadonly elements: readonly number[];\n\treadonly isIdentity: boolean;\n\tequals: (matrix: Matrix4Readonly) => boolean;\n\tclone: () => Matrix4;\n}\n\n/**\n * These Matrix4s represent a rigid transform in homogeneous coords,\n * therefore, we assume that the bottom row is [0, 0, 0, 1] and only store 12 elements.\n */\nexport class Matrix4 {\n\tprivate readonly _elements: number[];\n\tprivate _isIdentity: boolean;\n\n\t/**\n\t * If no elements passed in, defaults to identity matrix.\n\t */\n\tconstructor();\n\tconstructor(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn14: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tn24: number,\n\t\tn31: number,\n\t\tn32: number,\n\t\tn33: number,\n\t\tn34: number,\n\t\tisIdentity?: boolean,\n\t);\n\tconstructor(\n\t\tn11?: number,\n\t\tn12?: number,\n\t\tn13?: number,\n\t\tn14?: number,\n\t\tn21?: number,\n\t\tn22?: number,\n\t\tn23?: number,\n\t\tn24?: number,\n\t\tn31?: number,\n\t\tn32?: number,\n\t\tn33?: number,\n\t\tn34?: number,\n\t\tisIdentity?: boolean,\n\t) {\n\t\tif (n11 !== undefined) {\n\t\t\tthis._elements = [\n\t\t\t\tn11, n12!, n13!, n14!,\n\t\t\t\tn21!, n22!, n23!, n24!,\n\t\t\t\tn31!, n32!, n33!, n34!,\n\t\t\t];\n\t\t\tthis._isIdentity = isIdentity === undefined ? Matrix4._checkElementsForIdentity(this._elements) : isIdentity;\n\t\t} else {\n\t\t\tthis._elements = [\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t];\n\t\t\tthis._isIdentity = true;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset elements(elements: readonly number[]) {\n\t\tthrow new Error('No elements setter on Matrix4.');\n\t}\n\n\t/**\n\t * Returns elements of Matrix4.\n\t */\n\tget elements() {\n\t\treturn this._elements as readonly number[];\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset isIdentity(isIdentity: boolean) {\n\t\tthrow new Error('No isIdentity setter on Matrix4.');\n\t}\n\n\t/**\n\t * Returns whether Matrix4 is the identity matrix.\n\t */\n\tget isIdentity() {\n\t\treturn this._isIdentity;\n\t}\n\n\tprivate static _checkElementsForIdentity(elements: number[]) {\n\t\tconst [\n\t\t\tn11, n12, n13, n14,\n\t\t\tn21, n22, n23, n24,\n\t\t\tn31, n32, n33, n34\n\t\t]= elements;\n\t\treturn Math.abs(n11 - 1) <= NUMERICAL_TOLERANCE() && Math.abs(n22 - 1) <= NUMERICAL_TOLERANCE() && Math.abs(n33 - 1) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n12) <= NUMERICAL_TOLERANCE() && Math.abs(n13) <= NUMERICAL_TOLERANCE() && Math.abs(n14) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n21) <= NUMERICAL_TOLERANCE() && Math.abs(n23) <= NUMERICAL_TOLERANCE() && Math.abs(n24) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n31) <= NUMERICAL_TOLERANCE() && Math.abs(n32) <= NUMERICAL_TOLERANCE() && Math.abs(n34) <= NUMERICAL_TOLERANCE();\n\t}\n\n\t/**\n\t * Set values element-wise.\n\t */\n\tprivate _set(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn14: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tn24: number,\n\t\tn31: number,\n\t\tn32: number,\n\t\tn33: number,\n\t\tn34: number,\n\t) {\n\t\tconst { _elements } = this;\n\t\t_elements[0] = n11; _elements[1] = n12; _elements[2] = n13; _elements[3] = n14;\n\t\t_elements[4] = n21; _elements[5] = n22; _elements[6] = n23; _elements[7] = n24;\n\t\t_elements[8] = n31; _elements[9] = n32; _elements[10] = n33; _elements[11] = n34;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set this Matrix4 to the identity matrix.\n\t * @returns this\n\t */\n\tsetIdentity() {\n\t\tthis._set(\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t);\n\t\tthis._isIdentity = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * In place matrix multiplication of this Matrix4 (A) with another Matrix4 (B).\n\t * Sets value of this Matrix4 to B*A.\n\t * @param matrix - Matrix4 to multiply with.\n\t * @returns this\n\t */\n\tpremultiplyMatrix4(matrix: Matrix4Readonly) {\n\t\treturn Matrix4._multiplyMatrices(this, matrix, this);\n\t}\n\n\t/**\n\t * In place matrix multiplication of this Matrix4 (A) with another Matrix4 (B).\n\t * Sets value of this Matrix4 to A*B.\n\t * @param matrix - Matrix4 to multiply with.\n\t */\n\tmultiplyMatrix4(matrix: Matrix4Readonly) {\n\t\treturn Matrix4._multiplyMatrices(this, this, matrix);\n\t}\n\n\t/**\n\t * Matrix multiplication of two matrices.\n\t */\n\tprivate static _multiplyMatrices(self: Matrix4, matrixA: Matrix4Readonly, matrixB: Matrix4Readonly) {\n\t\t// Check if we need to multiply through.\n\t\tif (matrixA.isIdentity) return self.copy(matrixB);\n\t\tif (matrixB.isIdentity) return self.copy(matrixA);\n\n\t\tconst { _elements } = self;\n\t\tconst ae = matrixA.elements;\n\t\tconst be = matrixB.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 1 ], a13 = ae[ 2 ], a14 = ae[ 3 ];\n\t\tconst a21 = ae[ 4 ], a22 = ae[ 5 ], a23 = ae[ 6 ], a24 = ae[ 7 ];\n\t\tconst a31 = ae[ 8 ], a32 = ae[ 9 ], a33 = ae[ 10 ], a34 = ae[ 11 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 1 ], b13 = be[ 2 ], b14 = be[ 3 ];\n\t\tconst b21 = be[ 4 ], b22 = be[ 5 ], b23 = be[ 6 ], b24 = be[ 7 ];\n\t\tconst b31 = be[ 8 ], b32 = be[ 9 ], b33 = be[ 10 ], b34 = be[ 11 ];\n\n\t\t_elements[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t_elements[1] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t_elements[2] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t_elements[3] = a11 * b14 + a12 * b24 + a13 * b34 + a14;\n\n\t\t_elements[4] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t_elements[5] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t_elements[6] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t_elements[7] = a21 * b14 + a22 * b24 + a23 * b34 + a24;\n\n\t\t_elements[8] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t_elements[9] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t_elements[10] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t_elements[11] = a31 * b14 + a32 * b24 + a33 * b34 + a34;\n\n\t\tself._isIdentity = Matrix4._checkElementsForIdentity(_elements);\n\t\treturn self;\n\t}\n\n    /**\n     * Set elements of Matrix4 according to translation.\n     * @param translation - Translation vector.\n     * @returns this\n     */\n\tsetTranslation(translation: Vector3Readonly | THREE_Vector3) {\n\t\tif (Math.abs(translation.x) <= NUMERICAL_TOLERANCE() && Math.abs(translation.y) <= NUMERICAL_TOLERANCE() && Math.abs(translation.z) <= NUMERICAL_TOLERANCE()) return this.setIdentity();\n\t\tthis._set(\n\t\t\t1, 0, 0, translation.x,\n\t\t\t0, 1, 0, translation.y,\n\t\t\t0, 0, 1, translation.z,\n\t\t);\n\t \tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to rotation about axis.\n\t * @param axis - Unit vector around which to rotate, must be normalized.\n\t * @param angle - Angle of rotation in radians.\n\t * @param offset - Offset vector.\n\t * @returns this\n\t */\n\tsetRotationAxisAngleAtOffset(\n\t\taxis: Vector3Readonly | THREE_Vector3,\n\t\tangle: number,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\tif (Math.abs(angle) <= NUMERICAL_TOLERANCE()) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\tconst cosAngle = Math.cos(angle);\n\t\tconst sinAngle = Math.sin(angle);\n\t\treturn this._setRotationAxisCosSin(cosAngle, sinAngle, axis, offset);\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to rotation from one vector to another.\n\t * @param fromVector - Unit vector to rotate from, must be normalized.\n\t * @param toVector - Unit vector to rotate to, must be normalized.\n\t * @returns this\n\t */\n\tsetRotationFromVectorToVector(\n\t\tfromVector: Vector3Readonly | THREE_Vector3,\n\t\ttoVector: Vector3Readonly | THREE_Vector3,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t): Matrix4 {\n        // Check for no rotation.\n\t\tif (Vector3.equals(fromVector, toVector)) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\tconst axis = tempVector3.copy(fromVector).cross(toVector);\n\t\tlet sinAngle = axis.length();\n        if (sinAngle <= NUMERICAL_TOLERANCE()) {\n            sinAngle = 0;\n            // Vectors are perfectly opposite, chose any axis orthogonal to fromVector.\n            axis.set(fromVector.y, -fromVector.x, 0);\n            let axisLength = axis.length();\n            /* c8 ignore next 4 */\n            if (axisLength <= NUMERICAL_TOLERANCE()) { // Just in case.\n                axis.set(-fromVector.z, 0, fromVector.x);\n                axisLength = axis.length();\n            }\n            axis.divideScalar(axisLength); // Normalize axis.\n        } else {\n            axis.divideScalar(sinAngle); // Normalize axis.\n        }\n        const cosAngle = Vector3.dot(fromVector, toVector);\n\t\treturn this._setRotationAxisCosSin(cosAngle, sinAngle, axis, offset);\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to reflection.\n\t * @param normal - Unit vector about which to reflect, must be normalized.\n\t * @param offset - Offset vector of reflection.\n\t * @returns this\n\t */\n\tsetReflectionNormalAtOffset(\n\t\tnormal: Vector3Readonly | THREE_Vector3,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\t// To do this we need to calculate T * R * (-T).\n\t\t// Based on https://math.stackexchange.com/questions/693414/reflection-across-the-plane\n\t\t// First calc R.\n\t\tconst nx = normal.x;\n\t\tconst ny = normal.y;\n\t\tconst nz = normal.z;\n\t\tconst r11 = 1 - 2 * nx * nx,\tr12 = -2 * nx * ny,\t\tr13 = -2 * nx * nz;\n\t\tconst r21 = r12,\t\t\t\tr22 = 1 - 2 * ny * ny,\tr23 = -2 * ny * nz;\n\t\tconst r31 = r13,\t\t\t\tr32 = r23,\t\t\t\tr33 = 1 - 2 * nz * nz;\n\t\tif (offset) {\n\t\t\tthis._setRotationMatrixAtOffset(\n\t\t\t\tr11, r12, r13,\n\t\t\t\tr21, r22, r23,\n\t\t\t\tr31, r32, r33,\n\t\t\t\toffset,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._set(\n\t\t\t\tr11, r12, r13, 0,\n\t\t\t\tr21, r22, r23, 0,\n\t\t\t\tr31, r32, r33, 0,\n\t\t\t);\n\t\t}\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\tprivate _setRotationAxisCosSin(cosAngle: number, sinAngle: number, axis: Vector3Readonly | THREE_Vector3, offset?: Vector3Readonly | THREE_Vector3) {\n\t\t// To do this we need to calculate T * R * (-T).\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t// First calc R.\n\t\tconst t = 1 - cosAngle;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst t_x = t * x, t_y = t * y;\n\t\tconst r11 = t_x * x + cosAngle,\t\tr12 = t_x * y - sinAngle * z,\tr13 = t_x * z + sinAngle * y;\n\t\tconst r21 = t_x * y + sinAngle * z,\tr22 = t_y * y + cosAngle,\t\tr23 = t_y * z - sinAngle * x;\n\t\tconst r31 = t_x * z - sinAngle * y,\tr32 = t_y * z + sinAngle * x,\tr33 = t * z * z + cosAngle;\n\t\tif (offset) {\n\t\t\tthis._setRotationMatrixAtOffset(\n\t\t\t\tr11, r12, r13,\n\t\t\t\tr21, r22, r23,\n\t\t\t\tr31, r32, r33,\n\t\t\t\toffset,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._set(\n\t\t\t\tr11, r12, r13, 0,\n\t\t\t\tr21, r22, r23, 0,\n\t\t\t\tr31, r32, r33, 0,\n\t\t\t);\n\t\t}\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\tprivate _setRotationMatrixAtOffset(\n\t\tr11: number, r12: number, r13: number,\n\t\tr21: number, r22: number, r23: number,\n\t\tr31: number, r32: number, r33: number,\n\t\toffset: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\t// Apply T * R * (-T).\n\t\t// Pre-multiply R by T and post multiply by -T.\n\t\t// This is a bit confusing to follow, but it reduces the amount of operations in the calc.\n\t\tconst tx = -offset.x * (r11 - 1) - offset.y * r12 - offset.z * r13;\n\t\tconst ty = -offset.x * r21 - offset.y * (r22 - 1) - offset.z * r23;\n\t\tconst tz = -offset.x * r31 - offset.y * r32 - offset.z * (r33 - 1);\n\t\tthis._set(\n\t\t\tr11, r12, r13, tx,\n\t\t\tr21, r22, r23, ty,\n\t\t\tr31, r32, r33, tz,\n\t\t);\n\t}\n\n\t/**\n\t * Invert the current transform.\n\t * https://math.stackexchange.com/questions/1234948/inverse-of-a-rigid-transformation\n\t * @returns this\n\t */\n\tinvertTransform() {\n\t\tif (this._isIdentity) return this;\n\t\tconst { _elements } = this;\n\t\t// The inverted 3x3 rotation matrix is equal to its transpose: rTrans.\n\t\tconst rTrans11 = _elements[0], rTrans12 = _elements[4], rTrans13 = _elements[8];\n\t\tconst rTrans21 = _elements[1], rTrans22 = _elements[5], rTrans23 = _elements[9];\n\t\tconst rTrans31 = _elements[2], rTrans32 = _elements[6], rTrans33 = _elements[10];\n\t\t// The inverted translation is -rTrans * t.\n\t\tconst t1 = _elements[3], t2 = _elements[7], t3 = _elements[11];\n\t\tconst t1Inv = -rTrans11 * t1 - rTrans12 * t2 - rTrans13 * t3;\n\t\tconst t2Inv = -rTrans21 * t1 - rTrans22 * t2 - rTrans23 * t3;\n\t\tconst t3Inv = -rTrans31 * t1 - rTrans32 * t2 - rTrans33 * t3;\n\t\tthis._set(\n\t\t\trTrans11, rTrans12, rTrans13, t1Inv,\n\t\t\trTrans21, rTrans22, rTrans23, t2Inv,\n\t\t\trTrans31, rTrans32, rTrans33, t3Inv,\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Test if this Matrix4 equals another Matrix4.\n\t * @param matrix - Matrix4 to test equality with.\n\t * @returns\n\t */\n\tequals(matrix: Matrix4Readonly) {\n\t\tconst elementsA = this.elements;\n\t\tconst elementsB = matrix.elements;\n\t\tfor (let i = 0, numElements = elementsA.length; i < numElements; i++) {\n\t\t\tif (Math.abs(elementsA[i] - elementsB[i]) > NUMERICAL_TOLERANCE()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Copy values from a Matrix4 into this Matrix4.\n\t * @param matrix - Matrix4 to copy.\n\t * @returns this\n\t */\n\tcopy(matrix: Matrix4Readonly) {\n        // if (matrix instanceof Matrix4) {\n            const { elements } = matrix;\n            this._set(\n                elements[0], elements[1], elements[2], elements[3],\n                elements[4], elements[5], elements[6], elements[7],\n                elements[8], elements[9], elements[10], elements[11],\n            );\n            this._isIdentity = matrix.isIdentity;\n        // } else {\n        //     const { elements } = matrix;\n        //     this._set(\n        //         elements[0], elements[4], elements[8], elements[12],\n        //         elements[1], elements[5], elements[9], elements[13],\n        //         elements[2], elements[6], elements[10], elements[14],\n        //     );\n        //     this._isIdentity = Matrix4._checkElementsForIdentity(this._elements);\n        // }\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a deep copy of this Matrix4.\n\t */\n\tclone() {\n\t\tconst { _elements } = this;\n\t\tconst clone = new Matrix4(\n\t\t\t_elements[0], _elements[1], _elements[2], _elements[3],\n\t\t\t_elements[4], _elements[5], _elements[6], _elements[7],\n\t\t\t_elements[8], _elements[9], _elements[10], _elements[11],\n\t\t\tthis._isIdentity,\n\t\t);\n\t\treturn clone;\n\t}\n}","import type { Vector3Readonly } from './Vector3';\nimport type { THREE_Vector3, THREE_Quaternion } from './THREE_types';\nimport { getStackTraceAsString } from './utils';\nimport { NUMERICAL_TOLERANCE } from './constants';\n\nexport type QuaternionReadonly = {\n\treadonly x: number;\n\treadonly y: number;\n\treadonly z: number;\n\treadonly w: number;\n\treadonly lengthSq: () => number;\n\treadonly length: () => number;\n\treadonly clone: () => Quaternion;\n}\n\nexport class Quaternion {\n\tprivate _x;\n\tprivate _y;\n\tprivate _z;\n\tprivate _w;\n\n\t/**\n\t * @param x - Defaults to 0.\n\t * @param y - Defaults to 0.\n\t * @param z - Defaults to 0.\n\t * @param w - Defaults to 1.\n\t */\n\tconstructor();\n\tconstructor(x: number, y: number, z: number, w: number);\n\tconstructor(x?: number, y?: number, z?: number, w?: number) {\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = w !== undefined ? w : 1;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset x(x: number) {\n\t\tthrow new Error('No x setter on Quaternion.');\n\t}\n    /**\n     * @returns The x component of the Quaternion.\n     */\n\tget x() {\n\t\treturn this._x;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset y(y: number) {\n\t\tthrow new Error('No y setter on Quaternion.');\n\t}\n    /**\n     * @returns The y component of the Quaternion.\n     */\n\tget y() {\n\t\treturn this._y;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset z(z: number) {\n\t\tthrow new Error('No z setter on Quaternion.');\n\t}\n    /**\n     * @returns The z component of the Quaternion.\n     */\n\tget z() {\n\t\treturn this._z;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset w(w: number) {\n\t\tthrow new Error('No w setter on Quaternion.');\n\t}\n    /**\n     * @returns The w component of the Quaternion.\n     */\n\tget w() {\n\t\treturn this._w;\n\t}\n\n\t/**\n\t * Set quaternion from two unit vectors.\n\t * @param vFrom - From unit vector (normalized).\n\t * @param vTo - To unit vector (normalized).\n\t * @returns this\n\t */\n\tsetFromUnitVectors(\n\t\tvFrom: Vector3Readonly | THREE_Vector3,\n\t\tvTo: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\tlet r = vFrom.x * vTo.x + vFrom.y * vTo.y + vFrom.z * vTo.z + 1;\n\t\tif ( r <= Number.EPSILON ) { // TODO: better epsilon?\n\t\t\t// vFrom and vTo point in opposite directions.\n\t\t\tr = 0;\n\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\t\t\t} else {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\t\t} else {\n\t\t\t// crossVectors( vFrom, vTo );\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\t\t}\n\t\treturn this.normalize();\n\t}\n\n\t/**\n\t * Returns the squared length of the Quaternion.\n\t */\n\tlengthSq() {\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t}\n\n\t/**\n\t * Returns the length of the Quaternion.\n\t */\n\tlength() {\n\t\treturn Math.sqrt(this.lengthSq());\n\t}\n\n\t/**\n\t * Normalize the length of this Quaternion.\n\t * @returns this\n\t */\n\tnormalize() {\n\t\tlet l = this.length();\n\t\tif (l <= NUMERICAL_TOLERANCE()) {\n\t\t\tconsole.warn(`Attempting to normalize zero length Quaternion, stack trace:\\n${getStackTraceAsString()}.`);\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\t\t} else {\n\t\t\tl = 1 / l;\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * In place quaternion multiplication of this Quaternion (A) with another Quaternion (B).\n\t * Sets value of this Quaternion to A*B.\n\t * @param quat - Quaternion to multiply with.\n\t * @returns this\n\t */\n\tmultiply(quat: QuaternionReadonly | THREE_Quaternion) {\n\t\treturn Quaternion._multiplyQuaternions(this, this, quat);\n\n\t}\n\n\t/**\n\t * In place quaternion multiplication of this Quaternion (A) with another Quaternion (B).\n\t * Sets value of this Quaternion to B*A.\n\t * @param quat - Quaternion to premultiply with.\n\t * @returns this\n\t */\n\tpremultiply(quat: QuaternionReadonly | THREE_Quaternion) {\n\t\treturn Quaternion._multiplyQuaternions(this, quat, this);\n\t}\n\n\t/**\n\t * Quaternion multiplication.\n\t */\n\tprivate static _multiplyQuaternions(\n\t\tself: Quaternion,\n\t\tquatA: QuaternionReadonly | THREE_Quaternion,\n\t\tquatB: QuaternionReadonly | THREE_Quaternion,\n\t) {\n\t\t// From http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\tconst qax = quatA.x, qay = quatA.y, qaz = quatA.z, qaw = quatA.w;\n\t\tconst qbx = quatB.x, qby = quatB.y, qbz = quatB.z, qbw = quatB.w;\n\n\t\tself._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tself._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tself._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tself._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\treturn self;\n\t}\n\n    /**\n     * Invert this Quaternion.\n     * @returns this\n     */\n    invert() {\n\t\t// Quaternion is assumed to have unit length.\n        this._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n        return this;\n\t}\n\n\t/**\n\t * Copy the contents of a Quaternion to this Quaternion.\n\t * @param quaternion - Quaternion to copy.\n\t * @returns this\n\t */\n\tcopy(quaternion: QuaternionReadonly | THREE_Quaternion) {\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Clone this Quaternion into a new Quaternion.\n\t */\n\tclone() {\n\t\treturn new Quaternion(this._x, this._y, this._z, this._w);\n\t}\n}","/**\n * Clamp a value between a minimum and maximum value.\n * @param value - The value to clamp.\n * @param min - The minimum value.\n * @param max - The maximum value.\n * @returns The clamped value.\n */\nexport function clampValue(value: number, min: number, max: number) {\n\treturn Math.max(Math.min(value, max), min);\n}\n\n/**\n * Convert a value in radians to degrees.\n * @param value - The value in radians.\n * @returns The value in degrees.\n */\nexport function radiansToDegrees(value: number) {\n\treturn value * 180 / Math.PI;\n}\n\n/**\n * Convert a value in degrees to radians.\n * @param value - The value in degrees.\n * @returns The value in radians.\n */\nexport function degreesToRadians(value: number) {\n\treturn value / 180 * Math.PI;\n}\n\n/**\n * Round value to increment, if increment is 0, return value.\n * @param value - The value to round.\n * @param coarseStep - The increment to round to.\n * @returns The rounded value.\n */\nexport function roundValueToIncrement(value: number, coarseStep: number) {\n\tif (coarseStep === 0) return value;\n\tif (coarseStep < 0) throw new Error(`Invalid coarse step: ${coarseStep}.`);\n\tconst rounded = Math.round(value / coarseStep) * coarseStep;\n\t// Use a rounding trick to avoid results like 1.7999999999998 instead of 1.8.\n\tconst decimals = coarseStep.toString().split('.')[1]?.length || 0;\n\treturn parseFloat(rounded.toFixed(decimals));\n}"],"names":["numericalTolerance","NUMERICAL_TOLERANCE","getStackTraceAsString","Error","error","stack","split","map","line","trim","splice","join","Vector2","constructor","x","y","this","set","setFromArray","array","fill","value","add","vec","sub","multiplyScalar","scalar","divideScalar","Math","abs","console","warn","dot","cross","angle","atan2","PI","lengthSq","length","sqrt","distanceToSquared","dx","dy","distanceTo","normalize","applyMatrix3","matrix","isIdentity","e","elements","lerp","vector","t","average","min","max","invert","angleTo","theta","acos","angleToNormalized","copy","equals","tolerance","isZero","clone","toArray","Vector3","z","static","vec1","vec2","ax","ay","az","bx","by","bz","dz","applyMatrix4","applyMatrix4RotationComponent","applyQuaternion","quaternion","qx","qy","qz","qw","w","ix","iy","iz","iw","Matrix3","n11","n12","n13","n21","n22","n23","undefined","_elements","_isIdentity","_checkElementForIdentity","_set","setIdentity","setRotation","c","cos","s","sin","setTranslation","translation","setRotationTranslation","r11","r12","r21","r22","tx","ty","elementsA","elementsB","i","numElements","tempVector3","Matrix4","n14","n24","n31","n32","n33","n34","_checkElementsForIdentity","premultiplyMatrix4","_multiplyMatrices","multiplyMatrix4","self","matrixA","matrixB","ae","be","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","setRotationAxisAngleAtOffset","axis","offset","cosAngle","sinAngle","_setRotationAxisCosSin","setRotationFromVectorToVector","fromVector","toVector","axisLength","setReflectionNormalAtOffset","normal","nx","ny","nz","r13","r23","r31","r32","r33","_setRotationMatrixAtOffset","t_x","t_y","tz","invertTransform","rTrans11","rTrans12","rTrans13","rTrans21","rTrans22","rTrans23","rTrans31","rTrans32","rTrans33","t1","t2","t3","t1Inv","t2Inv","t3Inv","Quaternion","_x","_y","_z","_w","setFromUnitVectors","vFrom","vTo","r","Number","EPSILON","l","multiply","quat","_multiplyQuaternions","premultiply","quatA","quatB","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","coarseStep","rounded","round","decimals","_a","toString","parseFloat","toFixed"],"mappings":"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"}