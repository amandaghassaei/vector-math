{"version":3,"file":"vector-math.js","sources":["../src/constants.ts","../src/Number.ts","../src/utils.ts","../src/Vector2.ts","../src/Vector3.ts","../src/Matrix3.ts","../src/common.ts","../src/Matrix4.ts","../src/Quaternion.ts"],"sourcesContent":["/**\n * Default numerical tolerance for all mathematical operations and equality checks.\n */\nexport const DEFAULT_NUMERICAL_TOLERANCE = 1e-15;\n\nlet numericalTolerance = DEFAULT_NUMERICAL_TOLERANCE;\n\n/**\n * Set global numerical tolerance for all mathematical operations and equality checks.\n * Default numerical tolerance is 1e-15.\n * @param tolerance - Numerical tolerance to set.\n */\nexport function setNumericalTolerance(tolerance: number) {\n    numericalTolerance = tolerance;\n}\n\n/**\n * Get global numerical tolerance for all mathematical operations and equality checks.\n */\nexport function NUMERICAL_TOLERANCE() {\n    return numericalTolerance;\n}","/**\n * Clamp a value between a minimum and maximum value.\n * @param value - The value to clamp.\n * @param min - The minimum value.\n * @param max - The maximum value.\n * @returns The clamped value.\n */\nexport function clampValue(value: number, min: number, max: number) {\n\treturn Math.max(Math.min(value, max), min);\n}\n\n/**\n * Convert a value in radians to degrees.\n * @param value - The value in radians.\n * @returns The value in degrees.\n */\nexport function radiansToDegrees(value: number) {\n\treturn value * 180 / Math.PI;\n}\n\n/**\n * Convert a value in degrees to radians.\n * @param value - The value in degrees.\n * @returns The value in radians.\n */\nexport function degreesToRadians(value: number) {\n\treturn value / 180 * Math.PI;\n}\n\n/**\n * Round value to increment, if increment is 0, return value.\n * @param value - The value to round.\n * @param coarseStep - The increment to round to.\n * @returns The rounded value.\n */\nexport function roundValueToIncrement(value: number, coarseStep: number) {\n\tif (coarseStep === 0) return value;\n\tif (coarseStep < 0) throw new Error(`Invalid coarse step: ${coarseStep}.`);\n\tconst rounded = Math.round(value / coarseStep) * coarseStep;\n\t// Use a rounding trick to avoid results like 1.7999999999998 instead of 1.8.\n\tconst decimals = coarseStep.toString().split('.')[1]?.length || 0;\n\treturn parseFloat(rounded.toFixed(decimals));\n}","export function getStackTraceAsString(): string {\n    try {\n        throw new Error('');\n    } catch (error: any) {\n        /* c8 ignore next 1 */\n        const stackString: string = error.stack || '';\n        const stack = stackString.split('\\n').map((line) => line.trim());\n        stack.splice(0, 2); // Remove first two elements (just points to this function).\n        return stack.join('\\n');\n    }\n}\n","import type { Matrix3Readonly } from './Matrix3';\nimport type { Vector2 as THREE_Vector2 } from 'three';\nimport { getStackTraceAsString } from './utils';\nimport { NUMERICAL_TOLERANCE } from './constants';\n\nexport type Vector2Readonly = {\n    readonly x: number;\n    readonly y: number;\n    dot: (vec: Vector2Readonly | THREE_Vector2) => number;\n    cross: (vec: Vector2Readonly | THREE_Vector2) => number;\n    angle: () => number;\n    lengthSq: () => number;\n    length: () => number;\n    distanceToSquared: (vec: Vector2Readonly | THREE_Vector2) => number;\n    distanceTo: (vec: Vector2Readonly | THREE_Vector2) => number;\n    angleTo: (vec: Vector2Readonly | THREE_Vector2) => number;\n    angleToNormalized: (vec: Vector2Readonly | THREE_Vector2) => number;\n    equals: (vec: Vector2Readonly | THREE_Vector2) => boolean;\n    isZero: () => boolean;\n    clone: () => Vector2;\n    toArray: () => [number, number];\n};\n\nexport class Vector2 {\n    x: number;\n    y: number;\n\n    /**\n     * @param x - Defaults to 0.\n     * @param y - Defaults to 0.\n     */\n    constructor();\n    constructor(x: number, y: number);\n    constructor(x?: number, y?: number) {\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n\n    /**\n     * Set the contents of a Vector2.\n     * @param x - x component.\n     * @param y - y component.\n     * @returns this\n     */\n    set(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    /**\n     * Set the contents of a Vector3 from an array.\n     * @param array - Array containing x, and y components.\n     * @returns this\n     */\n    setFromArray(array: readonly [number, number]) {\n        this.x = array[0];\n        this.y = array[1];\n        return this;\n    }\n\n    /**\n     * Add a Vector2 to this Vector2.\n     * @param vec - Vector2 to add.\n     * @returns this\n     */\n    add(vec: Vector2Readonly | THREE_Vector2) {\n        this.x += vec.x;\n        this.y += vec.y;\n        return this;\n    }\n\n    /**\n     * Subtract a Vector2 from this Vector2.\n     * @param vec - Vector2 to subtract.\n     * @returns this\n     */\n    sub(vec: Vector2Readonly | THREE_Vector2) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n        return this;\n    }\n\n    /**\n     * Multiply this Vector2 by scalar value.\n     * @param scalar - Scalar to multiply.\n     * @returns this\n     */\n    multiplyScalar(scalar: number) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n\n    /**\n     * Divide this Vector2 by scalar value.\n     * @param scalar - Scalar to divide.\n     * @returns this\n     */\n    divideScalar(scalar: number) {\n        if (Math.abs(scalar) <= NUMERICAL_TOLERANCE())\n            console.warn(\n                `Dividing by zero in Vector2.divideScalar(), stack trace:\\n${getStackTraceAsString()}.`\n            );\n        return this.multiplyScalar(1 / scalar);\n    }\n\n    /**\n     * Returns the dot product of this Vector2 with another Vector2.\n     * @param vec - Vector2 to dot with.\n     */\n    dot(vec: Vector2Readonly | THREE_Vector2) {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n    /**\n     * Compute the 2D cross product (wedge product) with another Vector2.\n     * @param vec - Vector2 to cross.\n     */\n    cross(vec: Vector2Readonly | THREE_Vector2) {\n        return this.x * vec.y - this.y * vec.x;\n    }\n\n    /**\n     * Get the angle of this Vector2.\n     * Computes the angle in radians with respect to the positive x-axis.\n     * Angle is always in range [0, 2 * Math.PI] (and 2 * Math.PI is slightly less than 2 * PI).\n     */\n    angle() {\n        return Math.atan2(-this.y, -this.x) + Math.PI;\n    }\n\n    /**\n     * Returns the squared length of the Vector2.\n     */\n    lengthSq() {\n        const lengthSq = this.dot(this);\n        return lengthSq;\n    }\n\n    /**\n     * Returns the length of the Vector2.\n     */\n    length() {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    /**\n     * Returns the squared distance between this Vector2 and another Vector2.\n     * @param vec - Vector2 to measure distance to.\n     */\n    distanceToSquared(vec: Vector2Readonly | THREE_Vector2) {\n        const dx = this.x - vec.x;\n        const dy = this.y - vec.y;\n        return dx * dx + dy * dy;\n    }\n\n    /**\n     * Returns the distance between this Vector2 and another Vector2.\n     * @param vec - Vector2 to measure distance to.\n     */\n    distanceTo(vec: Vector2Readonly | THREE_Vector2) {\n        return Math.sqrt(this.distanceToSquared(vec));\n    }\n\n    /**\n     * Normalize the length of this Vector2.\n     */\n    normalize() {\n        let length = this.length();\n        if (length <= NUMERICAL_TOLERANCE()) {\n            console.warn(\n                `Attempting to normalize zero length Vector2, stack trace:\\n${getStackTraceAsString()}.`\n            );\n            length = 1;\n        }\n        this.divideScalar(length);\n        return this;\n    }\n\n    /**\n     * Apply Matrix3 transformation to this Vector2.\n     * @param matrix - Matrix3 to apply.\n     */\n    applyMatrix3(matrix: Matrix3Readonly) {\n        if (matrix.isIdentity) return this;\n        const x = this.x,\n            y = this.y;\n        const e = matrix.elements;\n        this.x = e[0] * x + e[1] * y + e[2];\n        this.y = e[3] * x + e[4] * y + e[5];\n        return this;\n    }\n\n    /**\n     * Linearly interpolate between this Vector2 and another Vector2.\n     * @param vector - Vector2 to lerp to.\n     * @param t - Interpolation factor between 0 and 1.\n     * @returns this\n     */\n    lerp(vector: Vector2Readonly | THREE_Vector2, t: number) {\n        this.x += (vector.x - this.x) * t;\n        this.y += (vector.y - this.y) * t;\n        return this;\n    }\n\n    /**\n     * Average this Vector2 with another Vector2.\n     * @param vector - Vector2 to average with.\n     * @returns this\n     */\n    average(vector: Vector2Readonly | THREE_Vector2) {\n        this.x = (this.x + vector.x) / 2;\n        this.y = (this.y + vector.y) / 2;\n        return this;\n    }\n\n    /**\n     * Min this Vector3 with another Vector3.\n     * @param vector - Vector3 to min with.\n     * @returns this\n     */\n    min(vector: Vector2Readonly | THREE_Vector2) {\n        this.x = Math.min(this.x, vector.x);\n        this.y = Math.min(this.y, vector.y);\n        return this;\n    }\n\n    /**\n     * Max this Vector2 with another Vector2.\n     * @param vector - Vector2 to max with.\n     * @returns this\n     */\n    max(vector: Vector2Readonly | THREE_Vector2) {\n        this.x = Math.max(this.x, vector.x);\n        this.y = Math.max(this.y, vector.y);\n        return this;\n    }\n\n    /**\n     * Invert this Vector2.\n     * @returns this\n     */\n    invert() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    /**\n     * Calculate the angle between this Vector2 and another Vector2.\n     */\n    angleTo(vector: Vector2Readonly | THREE_Vector2) {\n        const theta = this.dot(vector) / Math.sqrt(this.lengthSq() * vector.lengthSq());\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    /**\n     * Calculate the angle between this (normalized) Vector2 and another (normalized) Vector2.\n     */\n    angleToNormalized(vector: Vector2Readonly | THREE_Vector2) {\n        const theta = this.dot(vector);\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    /**\n     * Copy the contents of a Vector2 to this Vector2.\n     * @param vec - Vector2 to copy.\n     * @returns this\n     */\n    copy(vec: Vector2Readonly | THREE_Vector2) {\n        this.x = vec.x;\n        this.y = vec.y;\n        return this;\n    }\n\n    /**\n     * Test if this Vector2 equals another Vector2.\n     * @param vec - Vector2 to test equality with.\n     */\n    equals(vec: Vector2Readonly | THREE_Vector2) {\n        return Math.abs(this.x - vec.x) <= NUMERICAL_TOLERANCE() && Math.abs(this.y - vec.y) <= NUMERICAL_TOLERANCE();\n    }\n\n    /**\n     * Test if this vector is the zero vector.\n     */\n    isZero() {\n        return Math.abs(this.x) <= NUMERICAL_TOLERANCE() && Math.abs(this.y) <= NUMERICAL_TOLERANCE();\n    }\n\n    /**\n     * Clone this Vector2 into a new Vector2.\n     */\n    clone() {\n        return new Vector2(this.x, this.y);\n    }\n\n    /**\n     * Returns an array containing the x and y components of this Vector3.\n     */\n    toArray() {\n        return [this.x, this.y] as [number, number];\n    }\n}\n","import type { Matrix4Readonly } from './Matrix4';\nimport type { QuaternionReadonly } from './Quaternion';\nimport type { Vector3 as THREE_Vector3, Quaternion as THREE_Quaternion } from 'three';\nimport { getStackTraceAsString } from './utils';\nimport { NUMERICAL_TOLERANCE } from './constants';\n\nexport type Vector3Readonly = {\n    readonly x: number;\n    readonly y: number;\n    readonly z: number;\n    dot: (vec: Vector3Readonly | THREE_Vector3) => number;\n    lengthSq: () => number;\n    length: () => number;\n    distanceToSquared: (vec: Vector3Readonly | THREE_Vector3) => number;\n    distanceTo: (vec: Vector3Readonly | THREE_Vector3) => number;\n    angleTo: (vec: Vector3Readonly | THREE_Vector3) => number;\n    angleToNormalized: (vec: Vector3Readonly | THREE_Vector3) => number;\n    equals: (vec: Vector3Readonly | THREE_Vector3) => boolean;\n    isZero: () => boolean;\n    clone: () => Vector3;\n    toArray: () => [number, number, number];\n};\n\nexport class Vector3 {\n    x: number;\n    y: number;\n    z: number;\n\n    /**\n     * @param x - Defaults to 0.\n     * @param y - Defaults to 0.\n     * @param z - Defaults to 0.\n     */\n    constructor();\n    constructor(x: number, y: number, z: number);\n    constructor(x?: number, y?: number, z?: number) {\n        this.x = x || 0;\n        this.y = y || 0;\n        this.z = z || 0;\n    }\n\n    /**\n     * Set the contents of a Vector3.\n     * @param x - x component.\n     * @param y - y component.\n     * @param z - z component.\n     * @returns this\n     */\n    set(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    }\n\n    /**\n     * Set the contents of a Vector3 from an array.\n     * @param array - Array containing x, y, and z components.\n     * @returns this\n     */\n    setFromArray(array: readonly [number, number, number]) {\n        this.x = array[0];\n        this.y = array[1];\n        this.z = array[2];\n        return this;\n    }\n\n    /**\n     * Add a Vector3 to this Vector3.\n     * @param vec - Vector3 to add.\n     * @returns this\n     */\n    add(vec: Vector3Readonly | THREE_Vector3) {\n        this.x += vec.x;\n        this.y += vec.y;\n        this.z += vec.z;\n        return this;\n    }\n\n    /**\n     * Subtract a Vector3 from this Vector3.\n     * @param vec - Vector3 to subtract.\n     * @returns this\n     */\n    sub(vec: Vector3Readonly | THREE_Vector3) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n        this.z -= vec.z;\n        return this;\n    }\n\n    /**\n     * Multiply this Vector3 by scalar value.\n     * @param scalar - Scalar to multiply.\n     * @returns this\n     */\n    multiplyScalar(scalar: number) {\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n        return this;\n    }\n\n    /**\n     * Divide this Vector3 by scalar value.\n     * @param scalar - Scalar to divide.\n     * @returns this\n     */\n    divideScalar(scalar: number) {\n        if (Math.abs(scalar) <= NUMERICAL_TOLERANCE())\n            console.warn(\n                `Dividing by zero in Vector3.divideScalar(), stack trace:\\n${getStackTraceAsString()}.`\n            );\n        return this.multiplyScalar(1 / scalar);\n    }\n\n    /**\n     * Returns the dot product of this Vector3 with another Vector3.\n     * @param vec - Vector3 to dot with.\n     */\n    dot(vec: Vector3Readonly | THREE_Vector3) {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    /**\n     * Cross this Vector3 with another Vector3.\n     * @param vec - Vector3 to cross with.\n     */\n    cross(vec: Vector3Readonly | THREE_Vector3) {\n        const ax = this.x,\n            ay = this.y,\n            az = this.z;\n        const bx = vec.x,\n            by = vec.y,\n            bz = vec.z;\n\n        this.x = ay * bz - az * by;\n        this.y = az * bx - ax * bz;\n        this.z = ax * by - ay * bx;\n\n        return this;\n    }\n\n    /**\n     * Returns the squared length of the Vector3.\n     */\n    lengthSq() {\n        const lengthSq = this.dot(this);\n        return lengthSq;\n    }\n\n    /**\n     * Returns the length of the Vector3.\n     */\n    length() {\n        return Math.sqrt(this.lengthSq());\n    }\n\n     /**\n     * Returns the squared distance between this Vector3 and another Vector3.\n     * @param vec - Vector3 to measure distance to.\n     */\n     distanceToSquared(vec: Vector3Readonly | THREE_Vector3) {\n        const dx = this.x - vec.x;\n        const dy = this.y - vec.y;\n        const dz = this.z - vec.z;\n        return dx * dx + dy * dy + dz * dz;\n    }\n\n    /**\n     * Returns the distance between this Vector3 and another Vector3.\n     * @param vec - Vector3 to measure distance to.\n     */\n    distanceTo(vec: Vector3Readonly | THREE_Vector3) {\n        return Math.sqrt(this.distanceToSquared(vec));\n    }\n\n    /**\n     * Normalize the length of this Vector3.\n     */\n    normalize() {\n        let length = this.length();\n        if (length <= NUMERICAL_TOLERANCE()) {\n            console.warn(\n                `Attempting to normalize zero length Vector3, stack trace:\\n${getStackTraceAsString()}.`\n            );\n            length = 1;\n        }\n        this.divideScalar(length);\n        return this;\n    }\n\n    /**\n     * Apply Matrix4 transformation to this Vector3.\n     * @param matrix - Matrix4 to apply.\n     * @returns this\n     */\n    applyMatrix4(matrix: Matrix4Readonly) {\n        if (matrix.isIdentity) return this;\n        const x = this.x,\n            y = this.y,\n            z = this.z;\n        const e = matrix.elements;\n        this.x = e[0] * x + e[1] * y + e[2] * z + e[3];\n        this.y = e[4] * x + e[5] * y + e[6] * z + e[7];\n        this.z = e[8] * x + e[9] * y + e[10] * z + e[11];\n        return this;\n    }\n\n    /**\n     * Apply Matrix4 rotation component (ignore translation) to this Vector3.\n     * @param matrix - Matrix4 to apply.\n     * @returns this\n     */\n    applyMatrix4RotationComponent(matrix: Matrix4Readonly) {\n        if (matrix.isIdentity) return this;\n        const x = this.x,\n            y = this.y,\n            z = this.z;\n        const e = matrix.elements;\n        this.x = e[0] * x + e[1] * y + e[2] * z;\n        this.y = e[4] * x + e[5] * y + e[6] * z;\n        this.z = e[8] * x + e[9] * y + e[10] * z;\n        return this;\n    }\n\n    /**\n     * Apply Quaternion transformation to this Vector3.\n     * @param quaternion - Quaternion to apply.\n     * @returns this\n     */\n    applyQuaternion(quaternion: QuaternionReadonly | THREE_Quaternion) {\n        const x = this.x,\n            y = this.y,\n            z = this.z;\n        const qx = quaternion.x,\n            qy = quaternion.y,\n            qz = quaternion.z,\n            qw = quaternion.w;\n        // Calculate quat * vector.\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n        // Calculate result * inverse quat.\n        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n        return this;\n    }\n\n    /**\n     * Linearly interpolate between this Vector3 and another Vector3.\n     * @param vector - Vector3 to lerp to.\n     * @param t - Interpolation factor between 0 and 1.\n     * @returns this\n     */\n    lerp(vector: Vector3Readonly | THREE_Vector3, t: number) {\n        this.x += (vector.x - this.x) * t;\n        this.y += (vector.y - this.y) * t;\n        this.z += (vector.z - this.z) * t;\n        return this;\n    }\n\n    /**\n     * Average this Vector3 with another Vector3.\n     * @param vector - Vector3 to average with.\n     * @returns this\n     */\n    average(vector: Vector3Readonly | THREE_Vector3) {\n        this.x = (this.x + vector.x) / 2;\n        this.y = (this.y + vector.y) / 2;\n        this.z = (this.z + vector.z) / 2;\n        return this;\n    }\n\n    /**\n     * Min this Vector3 with another Vector3.\n     * @param vector - Vector3 to min with.\n     * @returns this\n     */\n    min(vector: Vector3Readonly | THREE_Vector3) {\n        this.x = Math.min(this.x, vector.x);\n        this.y = Math.min(this.y, vector.y);\n        this.z = Math.min(this.z, vector.z);\n        return this;\n    }\n\n    /**\n     * Max this Vector3 with another Vector3.\n     * @param vector - Vector3 to max with.\n     * @returns this\n     */\n    max(vector: Vector3Readonly | THREE_Vector3) {\n        this.x = Math.max(this.x, vector.x);\n        this.y = Math.max(this.y, vector.y);\n        this.z = Math.max(this.z, vector.z);\n        return this;\n    }\n\n    /**\n     * Invert this Vector3.\n     * @returns this\n     */\n    invert() {\n        this.x = -this.x;\n        this.y = -this.y;\n        this.z = -this.z;\n        return this;\n    }\n\n    /**\n     * Calculate the angle between this Vector3 and another Vector3.\n     */\n    angleTo(vector: Vector3Readonly | THREE_Vector3) {\n        const theta = this.dot(vector) / Math.sqrt(this.lengthSq() * vector.lengthSq());\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    /**\n     * Calculate the angle between this (normalized) Vector3 and another (normalized) Vector3.\n     */\n    angleToNormalized(vector: Vector3Readonly | THREE_Vector3) {\n        const theta = this.dot(vector);\n        return Math.acos(Math.min(Math.max(theta, -1), 1));\n    }\n\n    /**\n     * Copy the contents of a Vector3 to this Vector3.\n     * @param vec - Vector3 to copy.\n     * @returns this\n     */\n    copy(vec: Vector3Readonly | THREE_Vector3) {\n        this.x = vec.x;\n        this.y = vec.y;\n        this.z = vec.z;\n        return this;\n    }\n\n    /**\n     * Test if this Vector3 equals another Vector3.\n     * @param vec - Vector3 to test equality with.\n     * @param tolerance - Defaults to 0.\n     */\n    equals(vec: Vector3Readonly | THREE_Vector3) {\n        return (\n            Math.abs(this.x - vec.x) <= NUMERICAL_TOLERANCE() &&\n            Math.abs(this.y - vec.y) <= NUMERICAL_TOLERANCE() &&\n            Math.abs(this.z - vec.z) <= NUMERICAL_TOLERANCE()\n        );\n    }\n\n    /**\n     * Test if this vector is the zero vector.\n     */\n    isZero() {\n        return this.x <= NUMERICAL_TOLERANCE() && this.y <= NUMERICAL_TOLERANCE() && this.z <= NUMERICAL_TOLERANCE();\n    }\n\n    /**\n     * Clone this Vector3 into a new Vector3.\n     */\n    clone() {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    /**\n     * Returns an array containing the x, y, and z components of this Vector3.\n     */\n    toArray() {\n        return [this.x, this.y, this.z] as [number, number, number];\n    }\n}\n","import { NUMERICAL_TOLERANCE } from './constants';\nimport type { Vector2Readonly } from './Vector2';\nimport type { Vector2 as THREE_Vector2 } from 'three';\n\nexport type Matrix3Readonly = {\n\treadonly elements: readonly number[];\n\treadonly isIdentity: boolean;\n\tequals: (matrix: Matrix3Readonly) => boolean;\n\tclone: () => Matrix3;\n}\n\n/**\n * These Matrix3s represent a rigid transform in homogeneous coords,\n * therefore, we assume that the bottom row is [0, 0, 1] and only store 6 elements.\n */\nexport class Matrix3 {\n\tprivate readonly _elements: number[];\n\tprivate _isIdentity: boolean;\n\n\t/**\n\t * If no elements passed in, defaults to identity matrix.\n\t */\n\tconstructor();\n\tconstructor(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tisIdentity?: boolean,\n\t);\n\tconstructor(\n\t\tn11?: number,\n\t\tn12?: number,\n\t\tn13?: number,\n\t\tn21?: number,\n\t\tn22?: number,\n\t\tn23?: number,\n\t\tisIdentity?: boolean,\n\t) {\n\t\tif (n11 !== undefined) {\n\t\t\tthis._elements = [\n\t\t\t\tn11, n12!, n13!,\n\t\t\t\tn21!, n22!, n23!,\n\t\t\t];\n\t\t\tthis._isIdentity = isIdentity === undefined ? Matrix3._checkElementForIdentity(this._elements) : isIdentity;\n\t\t} else {\n\t\t\tthis._elements = [\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t];\n\t\t\tthis._isIdentity = true;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset elements(elements: readonly number[]) {\n\t\tthrow new Error('No elements setter on Matrix3.');\n\t}\n\n\t/**\n\t * Returns elements of Matrix3.\n\t */\n\tget elements() {\n\t\treturn this._elements as readonly number[];\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset isIdentity(isIdentity: boolean) {\n\t\tthrow new Error('No isIdentity setter on Matrix3.');\n\t}\n\n\t/**\n\t * Returns whether Matrix3 is the identity matrix.\n\t */\n\tget isIdentity() {\n\t\treturn this._isIdentity;\n\t}\n\n\t/**\n\t * Set values element-wise.\n\t */\n\tprivate _set(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t) {\n\t\tconst { _elements } = this;\n\t\t_elements[0] = n11; _elements[1] = n12; _elements[2] = n13;\n\t\t_elements[3] = n21; _elements[4] = n22; _elements[5] = n23;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set this Matrix4 to the identity matrix.\n\t * @returns this\n\t */\n\tsetIdentity() {\n\t\tthis._set(\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t);\n\t\tthis._isIdentity = true;\n\t\treturn this;\n\t}\n\n\tprivate static _checkElementForIdentity(elements: number[]) {\n\t\tconst [\n\t\t\tn11, n12, n13,\n\t\t\tn21, n22, n23,\n\t\t] = elements;\n\t\treturn Math.abs(n11 - 1) <= NUMERICAL_TOLERANCE() && Math.abs(n22 - 1) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n12) <= NUMERICAL_TOLERANCE() && Math.abs(n13) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n21) <= NUMERICAL_TOLERANCE() && Math.abs(n23) <= NUMERICAL_TOLERANCE();\n\t}\n\n\t// _setTranslation(translation: Vector3Readonly) {\n\t// \tthis._set(\n\t// \t\t1, 0, translation.x,\n\t// \t\t0, 1, translation.y,\n\t// \t);\n\t// \tthis._isIdentity = Math.abs(translation.x) <= NUMERICAL_TOLERANCE() && Math.abs(translation.y) <= NUMERICAL_TOLERANCE();\n\t// \treturn this;\n\t// }\n\n\t/**\n\t * Set elements of Matrix4 according to rotation and translation.\n\t * @param angle - Angle of rotation in radians.\n\t * @param translation - Translation offset.\n\t * @returns this\n\t */\n\tsetFromRotationTranslation(angle: number, translation: Vector2Readonly | THREE_Vector2) {\n\t\tif (Math.abs(angle) <= NUMERICAL_TOLERANCE() && Math.abs(translation.x) <= NUMERICAL_TOLERANCE() && Math.abs(translation.y) <= NUMERICAL_TOLERANCE()) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\t// To do this we need to calculate R(angle) * T(position).\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t// First calc R.\n\t\tconst r11 = Math.cos(angle),\tr12 = -Math.sin(angle);\n\t\tconst r21 = -r12,\t\t\t\tr22 = r11;\n\t\t// Pre-multiply T by R.\n\t\tconst tx = translation.x * r11 + translation.y * r12;\n\t\tconst ty = translation.x * r21 + translation.y * r22;\n\t\tthis._set(\n\t\t\tr11, r12, tx,\n\t\t\tr21, r22, ty,\n\t\t);\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\t// /**\n\t//  * Invert the current transform.\n\t//  * https://math.stackexchange.com/questions/1234948/inverse-of-a-rigid-transformation\n\t//  */\n\t// invertTransform() {\n\t// \tif (this._isIdentity) return this;\n\t// \tconst { _elements } = this;\n\t// \t// The inverted 2x2 rotation matrix is equal to its transpose: rTrans.\n\t// \tconst rTrans11 = _elements[0], rTrans12 = _elements[3];\n\t// \tconst rTrans21 = _elements[1], rTrans22 = _elements[4];\n\t// \t// The inverted translation is -rTrans * t.\n\t// \tconst t1 = _elements[2], t2 = _elements[5];\n\t// \tconst t1Inv = -rTrans11 * t1 - rTrans12 * t2;\n\t// \tconst t2Inv = -rTrans21 * t1 - rTrans22 * t2;\n\t// \tthis._set(\n\t// \t\trTrans11, rTrans12, t1Inv,\n\t// \t\trTrans21, rTrans22, t2Inv,\n\t// \t);\n\t// \treturn this;\n\t// }\n\n\t/**\n\t * Test if this Matrix3 equals another Matrix3.\n\t * @param matrix - Matrix3 to test equality with.\n\t * @returns\n\t */\n\tequals(matrix: Matrix3Readonly) {\n\t\tconst elementsA = this.elements;\n\t\tconst elementsB = matrix.elements;\n\t\tfor (let i = 0, numElements = elementsA.length; i < numElements; i++) {\n\t\t\tif (Math.abs(elementsA[i] - elementsB[i]) > NUMERICAL_TOLERANCE()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Copy values from a Matrix3 into this Matrix3.\n\t * @param matrix - Matrix3 to copy.\n\t * @returns this\n\t */\n\tcopy(matrix: Matrix3Readonly) {\n\t\tconst { elements } = matrix;\n\t\tthis._set(\n\t\t\telements[0], elements[1], elements[2],\n\t\t\telements[3], elements[4], elements[5],\n\t\t);\n\t\tthis._isIdentity = matrix.isIdentity;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a deep copy of this Matrix3.\n\t */\n\tclone() {\n\t\tconst { _elements } = this;\n\t\tconst clone = new Matrix3(\n\t\t\t_elements[0], _elements[1], _elements[2],\n\t\t\t_elements[3], _elements[4], _elements[5],\n\t\t\tthis._isIdentity,\n\t\t);\n\t\treturn clone;\n\t}\n}","import { Vector3 } from './Vector3';\n\nexport const tempVector3 = new Vector3();\n","import { tempVector3 } from './common';\nimport { NUMERICAL_TOLERANCE } from './constants';\nimport type { Vector3Readonly } from './Vector3';\nimport type { Vector3 as THREE_Vector3 } from 'three';\n\nexport type Matrix4Readonly = {\n\treadonly elements: readonly number[];\n\treadonly isIdentity: boolean;\n\tequals: (matrix: Matrix4Readonly) => boolean;\n\tclone: () => Matrix4;\n}\n\n/**\n * These Matrix4s represent a rigid transform in homogeneous coords,\n * therefore, we assume that the bottom row is [0, 0, 0, 1] and only store 12 elements.\n */\nexport class Matrix4 {\n\tprivate readonly _elements: number[];\n\tprivate _isIdentity: boolean;\n\n\t/**\n\t * If no elements passed in, defaults to identity matrix.\n\t */\n\tconstructor();\n\tconstructor(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn14: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tn24: number,\n\t\tn31: number,\n\t\tn32: number,\n\t\tn33: number,\n\t\tn34: number,\n\t\tisIdentity?: boolean,\n\t);\n\tconstructor(\n\t\tn11?: number,\n\t\tn12?: number,\n\t\tn13?: number,\n\t\tn14?: number,\n\t\tn21?: number,\n\t\tn22?: number,\n\t\tn23?: number,\n\t\tn24?: number,\n\t\tn31?: number,\n\t\tn32?: number,\n\t\tn33?: number,\n\t\tn34?: number,\n\t\tisIdentity?: boolean,\n\t) {\n\t\tif (n11 !== undefined) {\n\t\t\tthis._elements = [\n\t\t\t\tn11, n12!, n13!, n14!,\n\t\t\t\tn21!, n22!, n23!, n24!,\n\t\t\t\tn31!, n32!, n33!, n34!,\n\t\t\t];\n\t\t\tthis._isIdentity = isIdentity === undefined ? Matrix4._checkElementsForIdentity(this._elements) : isIdentity;\n\t\t} else {\n\t\t\tthis._elements = [\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t];\n\t\t\tthis._isIdentity = true;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset elements(elements: readonly number[]) {\n\t\tthrow new Error('No elements setter on Matrix4.');\n\t}\n\n\t/**\n\t * Returns elements of Matrix4.\n\t */\n\tget elements() {\n\t\treturn this._elements as readonly number[];\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset isIdentity(isIdentity: boolean) {\n\t\tthrow new Error('No isIdentity setter on Matrix4.');\n\t}\n\n\t/**\n\t * Returns whether Matrix4 is the identity matrix.\n\t */\n\tget isIdentity() {\n\t\treturn this._isIdentity;\n\t}\n\n\tprivate static _checkElementsForIdentity(elements: number[]) {\n\t\tconst [\n\t\t\tn11, n12, n13, n14,\n\t\t\tn21, n22, n23, n24,\n\t\t\tn31, n32, n33, n34\n\t\t]= elements;\n\t\treturn Math.abs(n11 - 1) <= NUMERICAL_TOLERANCE() && Math.abs(n22 - 1) <= NUMERICAL_TOLERANCE() && Math.abs(n33 - 1) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n12) <= NUMERICAL_TOLERANCE() && Math.abs(n13) <= NUMERICAL_TOLERANCE() && Math.abs(n14) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n21) <= NUMERICAL_TOLERANCE() && Math.abs(n23) <= NUMERICAL_TOLERANCE() && Math.abs(n24) <= NUMERICAL_TOLERANCE() &&\n\t\t\tMath.abs(n31) <= NUMERICAL_TOLERANCE() && Math.abs(n32) <= NUMERICAL_TOLERANCE() && Math.abs(n34) <= NUMERICAL_TOLERANCE();\n\t}\n\n\t/**\n\t * Set values element-wise.\n\t */\n\tprivate _set(\n\t\tn11: number,\n\t\tn12: number,\n\t\tn13: number,\n\t\tn14: number,\n\t\tn21: number,\n\t\tn22: number,\n\t\tn23: number,\n\t\tn24: number,\n\t\tn31: number,\n\t\tn32: number,\n\t\tn33: number,\n\t\tn34: number,\n\t) {\n\t\tconst { _elements } = this;\n\t\t_elements[0] = n11; _elements[1] = n12; _elements[2] = n13; _elements[3] = n14;\n\t\t_elements[4] = n21; _elements[5] = n22; _elements[6] = n23; _elements[7] = n24;\n\t\t_elements[8] = n31; _elements[9] = n32; _elements[10] = n33; _elements[11] = n34;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set this Matrix4 to the identity matrix.\n\t * @returns this\n\t */\n\tsetIdentity() {\n\t\tthis._set(\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t);\n\t\tthis._isIdentity = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * In place matrix multiplication of this Matrix4 (A) with another Matrix4 (B).\n\t * Sets value of this Matrix4 to B*A.\n\t * @param matrix - Matrix4 to multiply with.\n\t * @returns this\n\t */\n\tpremultiplyMatrix4(matrix: Matrix4Readonly) {\n\t\treturn Matrix4._multiplyMatrices(this, matrix, this);\n\t}\n\n\t/**\n\t * In place matrix multiplication of this Matrix4 (A) with another Matrix4 (B).\n\t * Sets value of this Matrix4 to A*B.\n\t * @param matrix - Matrix4 to multiply with.\n\t */\n\tmultiplyMatrix4(matrix: Matrix4Readonly) {\n\t\treturn Matrix4._multiplyMatrices(this, this, matrix);\n\t}\n\n\t/**\n\t * Matrix multiplication of two matrices.\n\t */\n\tprivate static _multiplyMatrices(self: Matrix4, matrixA: Matrix4Readonly, matrixB: Matrix4Readonly) {\n\t\t// Check if we need to multiply through.\n\t\tif (matrixA.isIdentity) return self.copy(matrixB);\n\t\tif (matrixB.isIdentity) return self.copy(matrixA);\n\n\t\tconst { _elements } = self;\n\t\tconst ae = matrixA.elements;\n\t\tconst be = matrixB.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 1 ], a13 = ae[ 2 ], a14 = ae[ 3 ];\n\t\tconst a21 = ae[ 4 ], a22 = ae[ 5 ], a23 = ae[ 6 ], a24 = ae[ 7 ];\n\t\tconst a31 = ae[ 8 ], a32 = ae[ 9 ], a33 = ae[ 10 ], a34 = ae[ 11 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 1 ], b13 = be[ 2 ], b14 = be[ 3 ];\n\t\tconst b21 = be[ 4 ], b22 = be[ 5 ], b23 = be[ 6 ], b24 = be[ 7 ];\n\t\tconst b31 = be[ 8 ], b32 = be[ 9 ], b33 = be[ 10 ], b34 = be[ 11 ];\n\n\t\t_elements[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t_elements[1] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t_elements[2] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t_elements[3] = a11 * b14 + a12 * b24 + a13 * b34 + a14;\n\n\t\t_elements[4] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t_elements[5] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t_elements[6] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t_elements[7] = a21 * b14 + a22 * b24 + a23 * b34 + a24;\n\n\t\t_elements[8] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t_elements[9] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t_elements[10] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t_elements[11] = a31 * b14 + a32 * b24 + a33 * b34 + a34;\n\n\t\tself._isIdentity = Matrix4._checkElementsForIdentity(_elements);\n\t\treturn self;\n\t}\n\n\tsetTranslation(translation: Vector3Readonly | THREE_Vector3) {\n\t\tif (Math.abs(translation.x) <= NUMERICAL_TOLERANCE() && Math.abs(translation.y) <= NUMERICAL_TOLERANCE() && Math.abs(translation.z) <= NUMERICAL_TOLERANCE()) return this.setIdentity();\n\t\tthis._set(\n\t\t\t1, 0, 0, translation.x,\n\t\t\t0, 1, 0, translation.y,\n\t\t\t0, 0, 1, translation.z,\n\t\t);\n\t \tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to rotation about axis.\n\t * @param axis - Unit vector around which to rotate, must be normalized.\n\t * @param angle - Angle of rotation in radians.\n\t * @param offset - Offset vector.\n\t * @returns this\n\t */\n\tsetRotationAxisAngleAtOffset(\n\t\taxis: Vector3Readonly | THREE_Vector3,\n\t\tangle: number,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\tif (Math.abs(angle) <= NUMERICAL_TOLERANCE()) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\tconst cosAngle = Math.cos(angle);\n\t\tconst sinAngle = Math.sin(angle);\n\t\treturn this._setRotationAxisCosSin(cosAngle, sinAngle, axis, offset);\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to rotation from one vector to another.\n\t * @param fromVector - Unit vector to rotate from, must be normalized.\n\t * @param toVector - Unit vector to rotate to, must be normalized.\n\t * @returns this\n\t */\n\tsetRotationFromVectorToVector(\n\t\tfromVector: Vector3Readonly,\n\t\ttoVector: Vector3Readonly,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t): Matrix4;\n\tsetRotationFromVectorToVector(\n\t\tfromVector: THREE_Vector3,\n\t\ttoVector: THREE_Vector3,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t): Matrix4;\n\tsetRotationFromVectorToVector(\n\t\tfromVector: any,\n\t\ttoVector: any,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t): Matrix4 {\n        // Check for no rotation.\n\t\tif (fromVector.equals(toVector)) {\n\t\t\treturn this.setIdentity();\n\t\t}\n\t\tconst axis = tempVector3.copy(fromVector).cross(toVector);\n\t\tlet sinAngle = axis.length();\n        if (sinAngle <= NUMERICAL_TOLERANCE()) {\n            sinAngle = 0;\n            // Vectors are perfectly opposite, chose any axis orthogonal to fromVector.\n            axis.set(fromVector.y, -fromVector.x, 0);\n            let axisLength = axis.length();\n            /* c8 ignore next 4 */\n            if (axisLength <= NUMERICAL_TOLERANCE()) { // Just in case.\n                axis.set(-fromVector.z, 0, fromVector.x);\n                axisLength = axis.length();\n            }\n            axis.divideScalar(axisLength); // Normalize axis.\n        } else {\n            axis.divideScalar(sinAngle); // Normalize axis.\n        }\n        const cosAngle = fromVector.dot(toVector);\n\t\treturn this._setRotationAxisCosSin(cosAngle, sinAngle, axis, offset);\n\t}\n\n\t/**\n\t * Set elements of Matrix4 according to reflection.\n\t * @param normal - Unit vector about which to reflect, must be normalized.\n\t * @param offset - Offset vector of reflection.\n\t * @returns this\n\t */\n\tsetReflectionNormalAtOffset(\n\t\tnormal: Vector3Readonly | THREE_Vector3,\n\t\toffset?: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\t// To do this we need to calculate T * R * (-T).\n\t\t// Based on https://math.stackexchange.com/questions/693414/reflection-across-the-plane\n\t\t// First calc R.\n\t\tconst nx = normal.x;\n\t\tconst ny = normal.y;\n\t\tconst nz = normal.z;\n\t\tconst r11 = 1 - 2 * nx * nx,\tr12 = -2 * nx * ny,\t\tr13 = -2 * nx * nz;\n\t\tconst r21 = r12,\t\t\t\tr22 = 1 - 2 * ny * ny,\tr23 = -2 * ny * nz;\n\t\tconst r31 = r13,\t\t\t\tr32 = r23,\t\t\t\tr33 = 1 - 2 * nz * nz;\n\t\tif (offset) {\n\t\t\tthis._setRotationMatrixAtOffset(\n\t\t\t\tr11, r12, r13,\n\t\t\t\tr21, r22, r23,\n\t\t\t\tr31, r32, r33,\n\t\t\t\toffset,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._set(\n\t\t\t\tr11, r12, r13, 0,\n\t\t\t\tr21, r22, r23, 0,\n\t\t\t\tr31, r32, r33, 0,\n\t\t\t);\n\t\t}\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\tprivate _setRotationAxisCosSin(cosAngle: number, sinAngle: number, axis: Vector3Readonly | THREE_Vector3, offset?: Vector3Readonly | THREE_Vector3) {\n\t\t// To do this we need to calculate T * R * (-T).\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t// First calc R.\n\t\tconst t = 1 - cosAngle;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst t_x = t * x, t_y = t * y;\n\t\tconst r11 = t_x * x + cosAngle,\t\tr12 = t_x * y - sinAngle * z,\tr13 = t_x * z + sinAngle * y;\n\t\tconst r21 = t_x * y + sinAngle * z,\tr22 = t_y * y + cosAngle,\t\tr23 = t_y * z - sinAngle * x;\n\t\tconst r31 = t_x * z - sinAngle * y,\tr32 = t_y * z + sinAngle * x,\tr33 = t * z * z + cosAngle;\n\t\tif (offset) {\n\t\t\tthis._setRotationMatrixAtOffset(\n\t\t\t\tr11, r12, r13,\n\t\t\t\tr21, r22, r23,\n\t\t\t\tr31, r32, r33,\n\t\t\t\toffset,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._set(\n\t\t\t\tr11, r12, r13, 0,\n\t\t\t\tr21, r22, r23, 0,\n\t\t\t\tr31, r32, r33, 0,\n\t\t\t);\n\t\t}\n\t\tthis._isIdentity = false;\n\t\treturn this;\n\t}\n\n\tprivate _setRotationMatrixAtOffset(\n\t\tr11: number, r12: number, r13: number,\n\t\tr21: number, r22: number, r23: number,\n\t\tr31: number, r32: number, r33: number,\n\t\toffset: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\t// Apply T * R * (-T).\n\t\t// Pre-multiply R by T and post multiply by -T.\n\t\t// This is a bit confusing to follow, but it reduces the amount of operations in the calc.\n\t\tconst tx = -offset.x * (r11 - 1) - offset.y * r12 - offset.z * r13;\n\t\tconst ty = -offset.x * r21 - offset.y * (r22 - 1) - offset.z * r23;\n\t\tconst tz = -offset.x * r31 - offset.y * r32 - offset.z * (r33 - 1);\n\t\tthis._set(\n\t\t\tr11, r12, r13, tx,\n\t\t\tr21, r22, r23, ty,\n\t\t\tr31, r32, r33, tz,\n\t\t);\n\t}\n\n\t/**\n\t * Invert the current transform.\n\t * https://math.stackexchange.com/questions/1234948/inverse-of-a-rigid-transformation\n\t * @returns this\n\t */\n\tinvertTransform() {\n\t\tif (this._isIdentity) return this;\n\t\tconst { _elements } = this;\n\t\t// The inverted 3x3 rotation matrix is equal to its transpose: rTrans.\n\t\tconst rTrans11 = _elements[0], rTrans12 = _elements[4], rTrans13 = _elements[8];\n\t\tconst rTrans21 = _elements[1], rTrans22 = _elements[5], rTrans23 = _elements[9];\n\t\tconst rTrans31 = _elements[2], rTrans32 = _elements[6], rTrans33 = _elements[10];\n\t\t// The inverted translation is -rTrans * t.\n\t\tconst t1 = _elements[3], t2 = _elements[7], t3 = _elements[11];\n\t\tconst t1Inv = -rTrans11 * t1 - rTrans12 * t2 - rTrans13 * t3;\n\t\tconst t2Inv = -rTrans21 * t1 - rTrans22 * t2 - rTrans23 * t3;\n\t\tconst t3Inv = -rTrans31 * t1 - rTrans32 * t2 - rTrans33 * t3;\n\t\tthis._set(\n\t\t\trTrans11, rTrans12, rTrans13, t1Inv,\n\t\t\trTrans21, rTrans22, rTrans23, t2Inv,\n\t\t\trTrans31, rTrans32, rTrans33, t3Inv,\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Test if this Matrix4 equals another Matrix4.\n\t * @param matrix - Matrix4 to test equality with.\n\t * @returns\n\t */\n\tequals(matrix: Matrix4Readonly) {\n\t\tconst elementsA = this.elements;\n\t\tconst elementsB = matrix.elements;\n\t\tfor (let i = 0, numElements = elementsA.length; i < numElements; i++) {\n\t\t\tif (Math.abs(elementsA[i] - elementsB[i]) > NUMERICAL_TOLERANCE()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Copy values from a Matrix4 into this Matrix4.\n\t * @param matrix - Matrix4 to copy.\n\t * @returns this\n\t */\n\tcopy(matrix: Matrix4Readonly) {\n\t\tconst { elements } = matrix;\n\t\tthis._set(\n\t\t\telements[0], elements[1], elements[2], elements[3],\n\t\t\telements[4], elements[5], elements[6], elements[7],\n\t\t\telements[8], elements[9], elements[10], elements[11],\n\t\t);\n\t\tthis._isIdentity = matrix.isIdentity;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a deep copy of this Matrix4.\n\t */\n\tclone() {\n\t\tconst { _elements } = this;\n\t\tconst clone = new Matrix4(\n\t\t\t_elements[0], _elements[1], _elements[2], _elements[3],\n\t\t\t_elements[4], _elements[5], _elements[6], _elements[7],\n\t\t\t_elements[8], _elements[9], _elements[10], _elements[11],\n\t\t\tthis._isIdentity,\n\t\t);\n\t\treturn clone;\n\t}\n}","import type { Vector3Readonly } from './Vector3';\nimport type {\n\tQuaternion as THREE_Quaternion,\n\tVector3 as THREE_Vector3,\n} from 'three';\nimport { getStackTraceAsString } from './utils';\nimport { NUMERICAL_TOLERANCE } from './constants';\n\nexport type QuaternionReadonly = {\n\treadonly x: number;\n\treadonly y: number;\n\treadonly z: number;\n\treadonly w: number;\n\treadonly lengthSq: () => number;\n\treadonly length: () => number;\n\treadonly clone: () => Quaternion;\n}\n\nexport class Quaternion {\n\tprivate _x;\n\tprivate _y;\n\tprivate _z;\n\tprivate _w;\n\n\t/**\n\t * @param x - Defaults to 0.\n\t * @param y - Defaults to 0.\n\t * @param z - Defaults to 0.\n\t * @param w - Defaults to 1.\n\t */\n\tconstructor();\n\tconstructor(x: number, y: number, z: number, w: number);\n\tconstructor(x?: number, y?: number, z?: number, w?: number) {\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = w !== undefined ? w : 1;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset x(x: number) {\n\t\tthrow new Error('No x setter on Quaternion.');\n\t}\n    /**\n     * @returns The x component of the Quaternion.\n     */\n\tget x() {\n\t\treturn this._x;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset y(y: number) {\n\t\tthrow new Error('No y setter on Quaternion.');\n\t}\n    /**\n     * @returns The y component of the Quaternion.\n     */\n\tget y() {\n\t\treturn this._y;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset z(z: number) {\n\t\tthrow new Error('No z setter on Quaternion.');\n\t}\n    /**\n     * @returns The z component of the Quaternion.\n     */\n\tget z() {\n\t\treturn this._z;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tset w(w: number) {\n\t\tthrow new Error('No w setter on Quaternion.');\n\t}\n    /**\n     * @returns The w component of the Quaternion.\n     */\n\tget w() {\n\t\treturn this._w;\n\t}\n\n\t/**\n\t * Set quaternion from two unit vectors.\n\t * @param vFrom - From unit vector (normalized).\n\t * @param vTo - To unit vector (normalized).\n\t * @returns this\n\t */\n\tsetFromUnitVectors(\n\t\tvFrom: Vector3Readonly | THREE_Vector3,\n\t\tvTo: Vector3Readonly | THREE_Vector3,\n\t) {\n\t\tlet r = vFrom.x * vTo.x + vFrom.y * vTo.y + vFrom.z * vTo.z + 1;\n\t\tif ( r <= Number.EPSILON ) { // TODO: better epsilon?\n\t\t\t// vFrom and vTo point in opposite directions.\n\t\t\tr = 0;\n\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\t\t\t} else {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\t\t} else {\n\t\t\t// crossVectors( vFrom, vTo );\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\t\t}\n\t\treturn this.normalize();\n\t}\n\n\t/**\n\t * Returns the squared length of the Quaternion.\n\t */\n\tlengthSq() {\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t}\n\n\t/**\n\t * Returns the length of the Quaternion.\n\t */\n\tlength() {\n\t\treturn Math.sqrt(this.lengthSq());\n\t}\n\n\t/**\n\t * Normalize the length of this Quaternion.\n\t * @returns this\n\t */\n\tnormalize() {\n\t\tlet l = this.length();\n\t\tif (l <= NUMERICAL_TOLERANCE()) {\n\t\t\tconsole.warn(`Attempting to normalize zero length Quaternion, stack trace:\\n${getStackTraceAsString()}.`);\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\t\t} else {\n\t\t\tl = 1 / l;\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * In place quaternion multiplication of this Quaternion (A) with another Quaternion (B).\n\t * Sets value of this Quaternion to A*B.\n\t * @param quat - Quaternion to multiply with.\n\t * @returns this\n\t */\n\tmultiply(quat: QuaternionReadonly | THREE_Quaternion) {\n\t\treturn Quaternion._multiplyQuaternions(this, this, quat);\n\n\t}\n\n\t/**\n\t * In place quaternion multiplication of this Quaternion (A) with another Quaternion (B).\n\t * Sets value of this Quaternion to B*A.\n\t * @param quat - Quaternion to premultiply with.\n\t * @returns this\n\t */\n\tpremultiply(quat: QuaternionReadonly | THREE_Quaternion) {\n\t\treturn Quaternion._multiplyQuaternions(this, quat, this);\n\t}\n\n\t/**\n\t * Quaternion multiplication.\n\t */\n\tprivate static _multiplyQuaternions(\n\t\tself: Quaternion,\n\t\tquatA: QuaternionReadonly | THREE_Quaternion,\n\t\tquatB: QuaternionReadonly | THREE_Quaternion,\n\t) {\n\t\t// From http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\tconst qax = quatA.x, qay = quatA.y, qaz = quatA.z, qaw = quatA.w;\n\t\tconst qbx = quatB.x, qby = quatB.y, qbz = quatB.z, qbw = quatB.w;\n\n\t\tself._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tself._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tself._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tself._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\treturn self;\n\t}\n\n\t/**\n\t * Copy the contents of a Quaternion to this Quaternion.\n\t * @param quaternion - Quaternion to copy.\n\t * @returns this\n\t */\n\tcopy(quaternion: QuaternionReadonly | THREE_Quaternion) {\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Clone this Quaternion into a new Quaternion.\n\t */\n\tclone() {\n\t\treturn new Quaternion(this._x, this._y, this._z, this._w);\n\t}\n}"],"names":[],"mappings":"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"}